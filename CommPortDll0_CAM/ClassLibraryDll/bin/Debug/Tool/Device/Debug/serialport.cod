; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	E:\cz\VS\DviceCtrlDlg_new_signal_1\serialport.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0M@BBDDNIGA@CSerialPort?$AA@		; `string'
PUBLIC	??_C@_0BB@IOBDGEEK@CSerialException?$AA@	; `string'
PUBLIC	?classCSerialException@CSerialException@@2UCRuntimeClass@@B ; CSerialException::classCSerialException
PUBLIC	?classCSerialPort@CSerialPort@@2UCRuntimeClass@@B ; CSerialPort::classCSerialPort
EXTRN	?classCObject@CObject@@2UCRuntimeClass@@B:BYTE	; CObject::classCObject
EXTRN	?classCException@CException@@2UCRuntimeClass@@B:BYTE ; CException::classCException
;	COMDAT ?classCSerialPort@CSerialPort@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCSerialPort@CSerialPort@@2UCRuntimeClass@@B DD FLAT:??_C@_0M@BBDDNIGA@CSerialPort?$AA@ ; CSerialPort::classCSerialPort
	DD	018H
	DD	0ffffH
	DD	00H
	DD	FLAT:?classCObject@CObject@@2UCRuntimeClass@@B
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_0M@BBDDNIGA@CSerialPort?$AA@
CONST	SEGMENT
??_C@_0M@BBDDNIGA@CSerialPort?$AA@ DB 'CSerialPort', 00H ; `string'
CONST	ENDS
;	COMDAT ?classCSerialException@CSerialException@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCSerialException@CSerialException@@2UCRuntimeClass@@B DD FLAT:??_C@_0BB@IOBDGEEK@CSerialException?$AA@ ; CSerialException::classCSerialException
	DD	010H
	DD	0ffffH
	DD	00H
	DD	FLAT:?classCException@CException@@2UCRuntimeClass@@B
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_0BB@IOBDGEEK@CSerialException?$AA@
CONST	SEGMENT
??_C@_0BB@IOBDGEEK@CSerialException?$AA@ DB 'CSerialException', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
_THIS_FILE DB	'e:\cz\vs\dvicectrldlg_new_signal_1\serialport.cpp', 00H
_DATA	ENDS
PUBLIC	??_C@_08KENEPFL@CancelIo?$AA@			; `string'
PUBLIC	?__LINE__Var@?1???0_SERIAL_PORT_DATA@@QAE@XZ@4JA ; `_SERIAL_PORT_DATA::_SERIAL_PORT_DATA'::`2'::__LINE__Var
PUBLIC	??_C@_1BK@DBDEIDLH@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?4?$AAD?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??0_SERIAL_PORT_DATA@@QAE@XZ			; _SERIAL_PORT_DATA::_SERIAL_PORT_DATA
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:PROC		; AfxAssertFailedLine
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_08KENEPFL@CancelIo?$AA@
; File e:\cz\vs\dvicectrldlg_new_signal_1\serialport.cpp
CONST	SEGMENT
??_C@_08KENEPFL@CancelIo?$AA@ DB 'CancelIo', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???0_SERIAL_PORT_DATA@@QAE@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1???0_SERIAL_PORT_DATA@@QAE@XZ@4JA DD 062H ; `_SERIAL_PORT_DATA::_SERIAL_PORT_DATA'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@DBDEIDLH@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?4?$AAD?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@DBDEIDLH@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?4?$AAD?$AAL?$AAL?$AA?$AA@ DB 'K'
	DB	00H, 'E', 00H, 'R', 00H, 'N', 00H, 'E', 00H, 'L', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'D', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0_SERIAL_PORT_DATA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_SERIAL_PORT_DATA@@QAE@XZ PROC			; _SERIAL_PORT_DATA::_SERIAL_PORT_DATA, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   :   m_hKernel32 = LoadLibrary(_T("KERNEL32.DLL"));

  00023	8b f4		 mov	 esi, esp
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@DBDEIDLH@?$AAK?$AAE?$AAR?$AAN?$AAE?$AAL?$AA3?$AA2?$AA?4?$AAD?$AAL?$AAL?$AA?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryW@4
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	89 01		 mov	 DWORD PTR [ecx], eax

; 100  :   VERIFY(m_hKernel32 != NULL);

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00042	75 19		 jne	 SHORT $LN3@SERIAL_POR
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1???0_SERIAL_PORT_DATA@@QAE@XZ@4JA
  0004a	83 c1 02	 add	 ecx, 2
  0004d	51		 push	 ecx
  0004e	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00053	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00058	85 c0		 test	 eax, eax
  0005a	74 01		 je	 SHORT $LN3@SERIAL_POR
  0005c	cc		 int	 3
$LN3@SERIAL_POR:

; 101  :   m_lpfnCancelIo = (LPCANCELIO) GetProcAddress(m_hKernel32, "CancelIo");

  0005d	8b f4		 mov	 esi, esp
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_08KENEPFL@CancelIo?$AA@
  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	51		 push	 ecx
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  : }

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
??0_SERIAL_PORT_DATA@@QAE@XZ ENDP			; _SERIAL_PORT_DATA::_SERIAL_PORT_DATA
_TEXT	ENDS
PUBLIC	??1_SERIAL_PORT_DATA@@QAE@XZ			; _SERIAL_PORT_DATA::~_SERIAL_PORT_DATA
EXTRN	__imp__FreeLibrary@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_SERIAL_PORT_DATA@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_SERIAL_PORT_DATA@@QAE@XZ PROC			; _SERIAL_PORT_DATA::~_SERIAL_PORT_DATA, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 106  :   FreeLibrary(m_hKernel32);

  00023	8b f4		 mov	 esi, esp
  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	51		 push	 ecx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  :   m_hKernel32 = NULL;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 108  : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??1_SERIAL_PORT_DATA@@QAE@XZ ENDP			; _SERIAL_PORT_DATA::~_SERIAL_PORT_DATA
_TEXT	ENDS
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@ ; `string'
PUBLIC	?__LINE__Var@?1??AfxThrowSerialException@@YAXK@Z@4JA ; `AfxThrowSerialException'::`2'::__LINE__Var
PUBLIC	??_C@_1GC@HPKDEEFP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAo?$AAw?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ ; `string'
PUBLIC	?AfxThrowSerialException@@YAXK@Z		; AfxThrowSerialException
EXTRN	__imp__GetLastError@0:PROC
;	COMDAT ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
CONST	SEGMENT
??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@ DB 'e:\cz\vs\dvi'
	DB	'cectrldlg_new_signal_1\serialport.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AfxThrowSerialException@@YAXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AfxThrowSerialException@@YAXK@Z@4JA DD 079H ; `AfxThrowSerialException'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GC@HPKDEEFP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAo?$AAw?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
CONST	SEGMENT
??_C@_1GC@HPKDEEFP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAo?$AAw?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ DB 'W'
	DB	00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	':', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'o', 00H, 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'C', 00H, 'S', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'E', 00H, 'x'
	DB	00H, 'c', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '%', 00H
	DB	'd', 00H, 0aH, 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?AfxThrowSerialException@@YAXK@Z
_TEXT	SEGMENT
$T211973 = -204						; size = 8
_dwError$ = 8						; size = 4
?AfxThrowSerialException@@YAXK@Z PROC			; AfxThrowSerialException, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 122  : 	if (dwError == 0)

  0001e	83 7d 08 00	 cmp	 DWORD PTR _dwError$[ebp], 0
  00022	75 12		 jne	 SHORT $LN1@AfxThrowSe

; 123  : 	{
; 124  : 		dwError = ::GetLastError();

  00024	8b f4		 mov	 esi, esp
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0002c	3b f4		 cmp	 esi, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	89 45 08	 mov	 DWORD PTR _dwError$[ebp], eax
$LN1@AfxThrowSe:

; 125  : 	}
; 126  : 
; 127  : //	CSerialException* pException = new CSerialException(dwError);
; 128  : 
; 129  : 	TRACE(_T("Warning: throwing CSerialException for error %d\n"), dwError);

  00036	8b 45 08	 mov	 eax, DWORD PTR _dwError$[ebp]
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@HPKDEEFP@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAo?$AAw?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1??AfxThrowSerialException@@YAXK@Z@4JA
  00045	83 c1 08	 add	 ecx, 8
  00048	51		 push	 ecx
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0004e	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T211973[ebp]
  00054	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 130  : // 	THROW(pException);
; 131  : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?AfxThrowSerialException@@YAXK@Z ENDP			; AfxThrowSerialException
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z@4JA ; `CSerialException::GetErrorMessage'::`2'::__LINE__Var
PUBLIC	?GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z ; CSerialException::GetErrorMessage
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__lstrcpynW@12:PROC
EXTRN	__imp__FormatMessageW@28:PROC
EXTRN	?AfxIsValidString@@YGHPB_WH@Z:PROC		; AfxIsValidString
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ?__LINE__Var@?1??GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z@4JA DD 086H ; `CSerialException::GetErrorMessage'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z
_TEXT	SEGMENT
_bRet$ = -32						; size = 4
_lpBuffer$ = -20					; size = 4
_this$ = -8						; size = 4
_pstrError$ = 8						; size = 4
_nMaxError$ = 12					; size = 4
_pnHelpContext$ = 16					; size = 4
?GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z PROC	; CSerialException::GetErrorMessage, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 135  : 	ASSERT(pstrError != NULL && AfxIsValidString(pstrError, nMaxError));

  00023	83 7d 08 00	 cmp	 DWORD PTR _pstrError$[ebp], 0
  00027	74 11		 je	 SHORT $LN6@GetErrorMe
  00029	8b 45 0c	 mov	 eax, DWORD PTR _nMaxError$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _pstrError$[ebp]
  00030	51		 push	 ecx
  00031	e8 00 00 00 00	 call	 ?AfxIsValidString@@YGHPB_WH@Z ; AfxIsValidString
  00036	85 c0		 test	 eax, eax
  00038	75 19		 jne	 SHORT $LN7@GetErrorMe
$LN6@GetErrorMe:
  0003a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?1??GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z@4JA
  00040	83 c2 01	 add	 edx, 1
  00043	52		 push	 edx
  00044	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00049	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0004e	85 c0		 test	 eax, eax
  00050	74 01		 je	 SHORT $LN7@GetErrorMe
  00052	cc		 int	 3
$LN7@GetErrorMe:

; 136  : 
; 137  : 	if (pnHelpContext != NULL)

  00053	83 7d 10 00	 cmp	 DWORD PTR _pnHelpContext$[ebp], 0
  00057	74 09		 je	 SHORT $LN3@GetErrorMe

; 138  : 		*pnHelpContext = 0;

  00059	8b 45 10	 mov	 eax, DWORD PTR _pnHelpContext$[ebp]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN3@GetErrorMe:

; 139  : 
; 140  : 	LPTSTR lpBuffer;
; 141  : 	BOOL bRet = FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
; 142  : 			                      NULL,  m_dwError, MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT),
; 143  : 			                      (LPTSTR) &lpBuffer, 0, NULL);

  00062	8b f4		 mov	 esi, esp
  00064	6a 00		 push	 0
  00066	6a 00		 push	 0
  00068	8d 45 ec	 lea	 eax, DWORD PTR _lpBuffer$[ebp]
  0006b	50		 push	 eax
  0006c	68 00 08 00 00	 push	 2048			; 00000800H
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00077	52		 push	 edx
  00078	6a 00		 push	 0
  0007a	68 00 11 00 00	 push	 4352			; 00001100H
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FormatMessageW@28
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	89 45 e0	 mov	 DWORD PTR _bRet$[ebp], eax

; 144  : 
; 145  : 	if (bRet == FALSE)

  0008f	83 7d e0 00	 cmp	 DWORD PTR _bRet$[ebp], 0
  00093	75 0a		 jne	 SHORT $LN2@GetErrorMe

; 146  : 		*pstrError = '\0';

  00095	33 c0		 xor	 eax, eax
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _pstrError$[ebp]
  0009a	66 89 01	 mov	 WORD PTR [ecx], ax

; 147  : 	else

  0009d	eb 35		 jmp	 SHORT $LN1@GetErrorMe
$LN2@GetErrorMe:

; 148  : 	{
; 149  : 		lstrcpyn(pstrError, lpBuffer, nMaxError);

  0009f	8b f4		 mov	 esi, esp
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _nMaxError$[ebp]
  000a4	50		 push	 eax
  000a5	8b 4d ec	 mov	 ecx, DWORD PTR _lpBuffer$[ebp]
  000a8	51		 push	 ecx
  000a9	8b 55 08	 mov	 edx, DWORD PTR _pstrError$[ebp]
  000ac	52		 push	 edx
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynW@12
  000b3	3b f4		 cmp	 esi, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 150  : 		bRet = TRUE;

  000ba	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _bRet$[ebp], 1

; 151  : 
; 152  : 		LocalFree(lpBuffer);

  000c1	8b f4		 mov	 esi, esp
  000c3	8b 45 ec	 mov	 eax, DWORD PTR _lpBuffer$[ebp]
  000c6	50		 push	 eax
  000c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LocalFree@4
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@GetErrorMe:

; 153  : 	}
; 154  : 
; 155  : 	return bRet;

  000d4	8b 45 e0	 mov	 eax, DWORD PTR _bRet$[ebp]

; 156  : }

  000d7	52		 push	 edx
  000d8	8b cd		 mov	 ecx, ebp
  000da	50		 push	 eax
  000db	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@GetErrorMe
  000e1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e6	58		 pop	 eax
  000e7	5a		 pop	 edx
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx
  000eb	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000f1	3b ec		 cmp	 ebp, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
  000fe	8b ff		 npad	 2
$LN10@GetErrorMe:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN9@GetErrorMe
$LN9@GetErrorMe:
  00108	ec ff ff ff	 DD	 -20			; ffffffecH
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN8@GetErrorMe
$LN8@GetErrorMe:
  00114	6c		 DB	 108			; 0000006cH
  00115	70		 DB	 112			; 00000070H
  00116	42		 DB	 66			; 00000042H
  00117	75		 DB	 117			; 00000075H
  00118	66		 DB	 102			; 00000066H
  00119	66		 DB	 102			; 00000066H
  0011a	65		 DB	 101			; 00000065H
  0011b	72		 DB	 114			; 00000072H
  0011c	00		 DB	 0
?GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z ENDP	; CSerialException::GetErrorMessage
_TEXT	ENDS
PUBLIC	??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
PUBLIC	??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
PUBLIC	?ReleaseBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBuffer
PUBLIC	?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
PUBLIC	??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
PUBLIC	?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ ; CSerialException::GetErrorMessage
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ$0
__ehfuncinfo$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
$T211986 = -248						; size = 4
_pstrError$ = -44					; size = 4
_rVal$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ PROC ; CSerialException::GetErrorMessage, COMDAT
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00021	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T211986[ebp], 0

; 160  :   CString rVal;

  0004c	8d 4d e0	 lea	 ecx, DWORD PTR _rVal$[ebp]
  0004f	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 161  :   LPTSTR pstrError = rVal.GetBuffer(4096);

  0005b	68 00 10 00 00	 push	 4096			; 00001000H
  00060	8d 4d e0	 lea	 ecx, DWORD PTR _rVal$[ebp]
  00063	e8 00 00 00 00	 call	 ?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
  00068	89 45 d4	 mov	 DWORD PTR _pstrError$[ebp], eax

; 162  :   GetErrorMessage(pstrError, 4096, NULL);

  0006b	8b f4		 mov	 esi, esp
  0006d	6a 00		 push	 0
  0006f	68 00 10 00 00	 push	 4096			; 00001000H
  00074	8b 45 d4	 mov	 eax, DWORD PTR _pstrError$[ebp]
  00077	50		 push	 eax
  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00083	ff d0		 call	 eax
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  :   rVal.ReleaseBuffer();

  0008c	6a ff		 push	 -1
  0008e	8d 4d e0	 lea	 ecx, DWORD PTR _rVal$[ebp]
  00091	e8 00 00 00 00	 call	 ?ReleaseBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBuffer

; 164  :   return rVal;

  00096	8d 45 e0	 lea	 eax, DWORD PTR _rVal$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009d	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  000a2	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR $T211986[ebp]
  000a8	83 c9 01	 or	 ecx, 1
  000ab	89 8d 08 ff ff
	ff		 mov	 DWORD PTR $T211986[ebp], ecx
  000b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b8	8d 4d e0	 lea	 ecx, DWORD PTR _rVal$[ebp]
  000bb	e8 00 00 00 00	 call	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  000c0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 165  : }

  000c3	52		 push	 edx
  000c4	8b cd		 mov	 ecx, ebp
  000c6	50		 push	 eax
  000c7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@GetErrorMe@2
  000cd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d2	58		 pop	 eax
  000d3	5a		 pop	 edx
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000e8	3b ec		 cmp	 ebp, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
  000f5	8d 49 00	 npad	 3
$LN9@GetErrorMe@2:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN8@GetErrorMe@2
$LN8@GetErrorMe@2:
  00100	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00104	04 00 00 00	 DD	 4
  00108	00 00 00 00	 DD	 $LN6@GetErrorMe@2
$LN6@GetErrorMe@2:
  0010c	72		 DB	 114			; 00000072H
  0010d	56		 DB	 86			; 00000056H
  0010e	61		 DB	 97			; 00000061H
  0010f	6c		 DB	 108			; 0000006cH
  00110	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _rVal$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
__ehhandler$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 00 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-256]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetErrorMessage@CSerialException@@QAE?AV?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@XZ ENDP ; CSerialException::GetErrorMessage
PUBLIC	??_7CSerialException@@6B@			; CSerialException::`vftable'
PUBLIC	??0CSerialException@@QAE@K@Z			; CSerialException::CSerialException
PUBLIC	??_R4CSerialException@@6B@			; CSerialException::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSerialException@@@8			; CSerialException `RTTI Type Descriptor'
PUBLIC	??_R3CSerialException@@8			; CSerialException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSerialException@@8			; CSerialException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSerialException@@8		; CSerialException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CException@@8			; CException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCException@@@8				; CException `RTTI Type Descriptor'
PUBLIC	??_R3CException@@8				; CException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CException@@8				; CException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	?GetRuntimeClass@CSerialException@@UBEPAUCRuntimeClass@@XZ ; CSerialException::GetRuntimeClass
PUBLIC	?Dump@CSerialException@@UBEXAAVCDumpContext@@@Z	; CSerialException::Dump
EXTRN	??0CException@@QAE@XZ:PROC			; CException::CException
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECSerialException@@UAEPAXI@Z:PROC		; CSerialException::`vector deleting destructor'
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CObject@@UBEXXZ:PROC		; CObject::AssertValid
EXTRN	?GetErrorMessage@CException@@UBEHPA_WIPAI@Z:PROC ; CException::GetErrorMessage
EXTRN	?ReportError@CException@@UAEHII@Z:PROC		; CException::ReportError
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CException@@8
rdata$r	SEGMENT
??_R2CException@@8 DD FLAT:??_R1A@?0A@EA@CException@@8	; CException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CException@@8
rdata$r	SEGMENT
??_R3CException@@8 DD 00H				; CException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CException@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCException@@@8
_DATA	SEGMENT
??_R0?AVCException@@@8 DD FLAT:??_7type_info@@6B@	; CException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCException@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CException@@8 DD FLAT:??_R0?AVCException@@@8 ; CException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CException@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSerialException@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSerialException@@8 DD FLAT:??_R0?AVCSerialException@@@8 ; CSerialException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSerialException@@8
rdata$r	ENDS
;	COMDAT ??_R2CSerialException@@8
rdata$r	SEGMENT
??_R2CSerialException@@8 DD FLAT:??_R1A@?0A@EA@CSerialException@@8 ; CSerialException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CException@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CSerialException@@8
rdata$r	SEGMENT
??_R3CSerialException@@8 DD 00H				; CSerialException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CSerialException@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSerialException@@@8
_DATA	SEGMENT
??_R0?AVCSerialException@@@8 DD FLAT:??_7type_info@@6B@	; CSerialException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSerialException@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSerialException@@6B@
rdata$r	SEGMENT
??_R4CSerialException@@6B@ DD 00H			; CSerialException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSerialException@@@8
	DD	FLAT:??_R3CSerialException@@8
rdata$r	ENDS
;	COMDAT ??_7CSerialException@@6B@
CONST	SEGMENT
??_7CSerialException@@6B@ DD FLAT:??_R4CSerialException@@6B@ ; CSerialException::`vftable'
	DD	FLAT:?GetRuntimeClass@CSerialException@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECSerialException@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CSerialException@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?GetErrorMessage@CSerialException@@UAEHPA_WIPAI@Z
	DD	FLAT:?GetErrorMessage@CException@@UBEHPA_WIPAI@Z
	DD	FLAT:?ReportError@CException@@UAEHII@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0CSerialException@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwError$ = 8						; size = 4
??0CSerialException@@QAE@K@Z PROC			; CSerialException::CSerialException, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0CException@@QAE@XZ	; CException::CException
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSerialException@@6B@

; 169  : 	m_dwError = dwError;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _dwError$[ebp]
  0003a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 170  : }

  0003d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
??0CSerialException@@QAE@K@Z ENDP			; CSerialException::CSerialException
_TEXT	ENDS
PUBLIC	??1CSerialException@@UAE@XZ			; CSerialException::~CSerialException
EXTRN	??3CException@@SGXPAX@Z:PROC			; CException::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCSerialException@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCSerialException@@UAEPAXI@Z PROC			; CSerialException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1CSerialException@@UAE@XZ ; CSerialException::~CSerialException
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 09		 je	 SHORT $LN1@scalar
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3CException@@SGXPAX@Z	; CException::operator delete
$LN1@scalar:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??_GCSerialException@@UAEPAXI@Z ENDP			; CSerialException::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CException@@UAE@XZ:PROC			; CException::~CException
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CSerialException@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CSerialException@@UAE@XZ PROC			; CSerialException::~CSerialException, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSerialException@@6B@

; 174  : }

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ??1CException@@UAE@XZ	; CException::~CException
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??1CSerialException@@UAE@XZ ENDP			; CSerialException::~CSerialException
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetRuntimeClass@CSerialException@@UBEPAUCRuntimeClass@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRuntimeClass@CSerialException@@UBEPAUCRuntimeClass@@XZ PROC ; CSerialException::GetRuntimeClass, COMDAT
; _this$ = ecx

; 176  : IMPLEMENT_DYNAMIC(CSerialException, CException)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b8 00 00 00 00	 mov	 eax, OFFSET ?classCSerialException@CSerialException@@2UCRuntimeClass@@B ; CSerialException::classCSerialException
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetRuntimeClass@CSerialException@@UBEPAUCRuntimeClass@@XZ ENDP ; CSerialException::GetRuntimeClass
_TEXT	ENDS
PUBLIC	??_C@_0N@GBBBFPKD@m_dwError?5?$DN?5?$AA@	; `string'
EXTRN	??6CDumpContext@@QAEAAV0@K@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@PBD@Z:PROC		; CDumpContext::operator<<
EXTRN	?Dump@CObject@@UBEXAAVCDumpContext@@@Z:PROC	; CObject::Dump
;	COMDAT ??_C@_0N@GBBBFPKD@m_dwError?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_0N@GBBBFPKD@m_dwError?5?$DN?5?$AA@ DB 'm_dwError = ', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Dump@CSerialException@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dc$ = 8						; size = 4
?Dump@CSerialException@@UBEXAAVCDumpContext@@@Z PROC	; CSerialException::Dump, COMDAT
; _this$ = ecx

; 180  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 181  : 	CObject::Dump(dc);

  00023	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 182  : 
; 183  : 	dc << "m_dwError = " << m_dwError;

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00035	51		 push	 ecx
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GBBBFPKD@m_dwError?5?$DN?5?$AA@
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  0003e	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBD@Z ; CDumpContext::operator<<
  00043	8b c8		 mov	 ecx, eax
  00045	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@K@Z ; CDumpContext::operator<<

; 184  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?Dump@CSerialException@@UBEXAAVCDumpContext@@@Z ENDP	; CSerialException::Dump
_TEXT	ENDS
PUBLIC	??_7CSerialPort@@6B@				; CSerialPort::`vftable'
PUBLIC	??0CSerialPort@@QAE@XZ				; CSerialPort::CSerialPort
PUBLIC	??_R4CSerialPort@@6B@				; CSerialPort::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSerialPort@@@8				; CSerialPort `RTTI Type Descriptor'
PUBLIC	??_R3CSerialPort@@8				; CSerialPort::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSerialPort@@8				; CSerialPort::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSerialPort@@8			; CSerialPort::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetRuntimeClass@CSerialPort@@UBEPAUCRuntimeClass@@XZ ; CSerialPort::GetRuntimeClass
PUBLIC	?Dump@CSerialPort@@UBEXAAVCDumpContext@@@Z	; CSerialPort::Dump
PUBLIC	?OnCompletion@CSerialPort@@UAEXKKPAU_OVERLAPPED@@@Z ; CSerialPort::OnCompletion
EXTRN	??0CObject@@IAE@XZ:PROC				; CObject::CObject
EXTRN	??_ECSerialPort@@UAEPAXI@Z:PROC			; CSerialPort::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@CSerialPort@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSerialPort@@8 DD FLAT:??_R0?AVCSerialPort@@@8 ; CSerialPort::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSerialPort@@8
rdata$r	ENDS
;	COMDAT ??_R2CSerialPort@@8
rdata$r	SEGMENT
??_R2CSerialPort@@8 DD FLAT:??_R1A@?0A@EA@CSerialPort@@8 ; CSerialPort::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CSerialPort@@8
rdata$r	SEGMENT
??_R3CSerialPort@@8 DD 00H				; CSerialPort::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSerialPort@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSerialPort@@@8
_DATA	SEGMENT
??_R0?AVCSerialPort@@@8 DD FLAT:??_7type_info@@6B@	; CSerialPort `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSerialPort@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CSerialPort@@6B@
rdata$r	SEGMENT
??_R4CSerialPort@@6B@ DD 00H				; CSerialPort::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSerialPort@@@8
	DD	FLAT:??_R3CSerialPort@@8
rdata$r	ENDS
;	COMDAT ??_7CSerialPort@@6B@
CONST	SEGMENT
??_7CSerialPort@@6B@ DD FLAT:??_R4CSerialPort@@6B@	; CSerialPort::`vftable'
	DD	FLAT:?GetRuntimeClass@CSerialPort@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECSerialPort@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CSerialPort@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCompletion@CSerialPort@@UAEXKKPAU_OVERLAPPED@@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0CSerialPort@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CSerialPort@@QAE@XZ PROC				; CSerialPort::CSerialPort, COMDAT
; _this$ = ecx

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSerialPort@@6B@

; 195  :   m_hComm = INVALID_HANDLE_VALUE;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 196  :   m_bOverlapped = FALSE;

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 197  :   m_hEvent = NULL;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 198  : }

  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??0CSerialPort@@QAE@XZ ENDP				; CSerialPort::CSerialPort
_TEXT	ENDS
PUBLIC	??1CSerialPort@@UAE@XZ				; CSerialPort::~CSerialPort
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCSerialPort@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCSerialPort@@UAEPAXI@Z PROC				; CSerialPort::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1CSerialPort@@UAE@XZ	; CSerialPort::~CSerialPort
  0002b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002e	83 e0 01	 and	 eax, 1
  00031	74 09		 je	 SHORT $LN1@scalar@2
  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$LN1@scalar@2:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??_GCSerialPort@@UAEPAXI@Z ENDP				; CSerialPort::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Close@CSerialPort@@QAEXXZ			; CSerialPort::Close
EXTRN	??1CObject@@UAE@XZ:PROC				; CObject::~CObject
EXTRN	__imp__CloseHandle@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSerialPort@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSerialPort@@UAE@XZ$0
__ehfuncinfo$??1CSerialPort@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSerialPort@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1CSerialPort@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CSerialPort@@UAE@XZ PROC				; CSerialPort::~CSerialPort, COMDAT
; _this$ = ecx

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSerialPort@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSerialPort@@6B@
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 202  :   Close();

  00052	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?Close@CSerialPort@@QAEXXZ ; CSerialPort::Close

; 203  :   if (m_hComm)

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00061	74 20		 je	 SHORT $LN2@CSerialPor

; 204  :   {
; 205  : 	  CloseHandle(m_hComm);

  00063	8b f4		 mov	 esi, esp
  00065	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006b	51		 push	 ecx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 206  : 	  m_hComm = NULL;

  00079	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN2@CSerialPor:

; 207  :   }
; 208  : }

  00083	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1CObject@@UAE@XZ	; CObject::~CObject
  00092	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00095	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009c	59		 pop	 ecx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSerialPort@@UAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CObject@@UAE@XZ	; CObject::~CObject
__ehhandler$??1CSerialPort@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSerialPort@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSerialPort@@UAE@XZ ENDP				; CSerialPort::~CSerialPort
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetRuntimeClass@CSerialPort@@UBEPAUCRuntimeClass@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRuntimeClass@CSerialPort@@UBEPAUCRuntimeClass@@XZ PROC ; CSerialPort::GetRuntimeClass, COMDAT
; _this$ = ecx

; 210  : IMPLEMENT_DYNAMIC(CSerialPort, CObject)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b8 00 00 00 00	 mov	 eax, OFFSET ?classCSerialPort@CSerialPort@@2UCRuntimeClass@@B ; CSerialPort::classCSerialPort
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetRuntimeClass@CSerialPort@@UBEPAUCRuntimeClass@@XZ ENDP ; CSerialPort::GetRuntimeClass
_TEXT	ENDS
PUBLIC	??_C@_1CC@JPENPCBB@?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@BAENHBHP@?$AAm?$AA_?$AAh?$AAC?$AAo?$AAm?$AAm?$AA?5?$AA?$DN?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
EXTRN	??6CDumpContext@@QAEAAV0@H@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@PBX@Z:PROC		; CDumpContext::operator<<
EXTRN	??6CDumpContext@@QAEAAV0@PB_W@Z:PROC		; CDumpContext::operator<<
;	COMDAT ??_C@_1CC@JPENPCBB@?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@JPENPCBB@?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$AA@ DB 'm'
	DB	00H, '_', 00H, 'b', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BAENHBHP@?$AAm?$AA_?$AAh?$AAC?$AAo?$AAm?$AAm?$AA?5?$AA?$DN?$AA?5?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@BAENHBHP@?$AAm?$AA_?$AAh?$AAC?$AAo?$AAm?$AAm?$AA?5?$AA?$DN?$AA?5?$AA?$AA@ DB 'm'
	DB	00H, '_', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Dump@CSerialPort@@UBEXAAVCDumpContext@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dc$ = 8						; size = 4
?Dump@CSerialPort@@UBEXAAVCDumpContext@@@Z PROC		; CSerialPort::Dump, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 215  : 	CObject::Dump(dc);

  00023	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Dump@CObject@@UBEXAAVCDumpContext@@@Z ; CObject::Dump

; 216  : 
; 217  : 	dc << _T("m_hComm = ") << m_hComm << _T("\n");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	51		 push	 ecx
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@BAENHBHP@?$AAm?$AA_?$AAh?$AAC?$AAo?$AAm?$AAm?$AA?5?$AA?$DN?$AA?5?$AA?$AA@
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00043	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PB_W@Z ; CDumpContext::operator<<
  00048	8b c8		 mov	 ecx, eax
  0004a	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PBX@Z ; CDumpContext::operator<<
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PB_W@Z ; CDumpContext::operator<<

; 218  :   dc << _T("m_bOverlapped = ") << m_bOverlapped;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005c	51		 push	 ecx
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@JPENPCBB@?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$AA@
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _dc$[ebp]
  00065	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@PB_W@Z ; CDumpContext::operator<<
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ??6CDumpContext@@QAEAAV0@H@Z ; CDumpContext::operator<<

; 219  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?Dump@CSerialPort@@UBEXAAVCDumpContext@@@Z ENDP		; CSerialPort::Dump
_TEXT	ENDS
PUBLIC	?SetState@CSerialPort@@QAEXAAU_DCB@@@Z		; CSerialPort::SetState
PUBLIC	?GetState@CSerialPort@@QAEXAAU_DCB@@@Z		; CSerialPort::GetState
PUBLIC	??_C@_1EO@OMEHBJJJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@ ; `string'
PUBLIC	??_C@_1EE@EHNNJM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr?$AAt@ ; `string'
PUBLIC	??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ	; ATL::CSimpleStringT<wchar_t,0>::operator wchar_t const *
PUBLIC	?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::Format
PUBLIC	??_C@_1BE@DNEHMKHO@?$AA?2?$AA?2?$AA?4?$AA?2?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA ; `CSerialPort::Open'::`2'::__LINE__Var
PUBLIC	__$ArrayPad$
PUBLIC	?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z ; CSerialPort::Open
EXTRN	__imp__CreateEventW@16:PROC
EXTRN	__imp__CreateFileW@28:PROC
;	COMDAT ??_C@_1EO@OMEHBJJJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@
CONST	SEGMENT
??_C@_1EO@OMEHBJJJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'v', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H
	DB	'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@EHNNJM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr?$AAt@
CONST	SEGMENT
??_C@_1EE@EHNNJM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr?$AAt@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, 'u', 00H, 'p', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 's'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@DNEHMKHO@?$AA?2?$AA?2?$AA?4?$AA?2?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@DNEHMKHO@?$AA?2?$AA?2?$AA?4?$AA?2?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@ DB '\'
	DB	00H, '\', 00H, '.', 00H, '\', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'%', 00H, 'd', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA DD 0dfH ; `CSerialPort::Open'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z$0
__ehfuncinfo$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z
_TEXT	SEGMENT
tv180 = -316						; size = 4
tv168 = -316						; size = 4
tv159 = -316						; size = 4
$T212037 = -308						; size = 8
$T212038 = -292						; size = 8
_dcb$ = -84						; size = 28
_dwCreateProperty$ = -48				; size = 4
_sPort$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nPort$ = 8						; size = 4
_dwBaud$ = 12						; size = 4
_parity$ = 16						; size = 4
_DataBits$ = 20						; size = 1
_stopbits$ = 24						; size = 4
_fc$ = 28						; size = 4
_bOverlapped$ = 32					; size = 4
?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z PROC ; CSerialPort::Open, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00021	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 224  :   //Validate our parameters
; 225  :   ASSERT(nPort>0 && nPort<=255);

  00045	83 7d 08 00	 cmp	 DWORD PTR _nPort$[ebp], 0
  00049	7e 09		 jle	 SHORT $LN31@Open
  0004b	81 7d 08 ff 00
	00 00		 cmp	 DWORD PTR _nPort$[ebp], 255 ; 000000ffH
  00052	7e 18		 jle	 SHORT $LN32@Open
$LN31@Open:
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
  00059	83 c0 02	 add	 eax, 2
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00062	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00067	85 c0		 test	 eax, eax
  00069	74 01		 je	 SHORT $LN32@Open
  0006b	cc		 int	 3
$LN32@Open:

; 226  : 
; 227  :   Close(); //In case we are already open

  0006c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?Close@CSerialPort@@QAEXXZ ; CSerialPort::Close

; 228  : 
; 229  :   //Call CreateFile to open up the comms port
; 230  :   CString sPort;

  00074	8d 4d dc	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00077	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 231  :   sPort.Format(_T("\\\\.\\COM%d"), nPort);

  00083	8b 45 08	 mov	 eax, DWORD PTR _nPort$[ebp]
  00086	50		 push	 eax
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@DNEHMKHO@?$AA?2?$AA?2?$AA?4?$AA?2?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@
  0008c	8d 4d dc	 lea	 ecx, DWORD PTR _sPort$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::Format
  00095	83 c4 0c	 add	 esp, 12			; 0000000cH

; 232  :   DWORD dwCreateProperty;
; 233  :   if(bOverlapped) 

  00098	83 7d 20 00	 cmp	 DWORD PTR _bOverlapped$[ebp], 0
  0009c	74 09		 je	 SHORT $LN28@Open

; 234  :   {
; 235  :      dwCreateProperty=FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED;

  0009e	c7 45 d0 80 00
	00 40		 mov	 DWORD PTR _dwCreateProperty$[ebp], 1073741952 ; 40000080H

; 236  :   }
; 237  :   else

  000a5	eb 07		 jmp	 SHORT $LN27@Open
$LN28@Open:

; 238  :   {
; 239  : 	 dwCreateProperty=FILE_ATTRIBUTE_NORMAL;

  000a7	c7 45 d0 80 00
	00 00		 mov	 DWORD PTR _dwCreateProperty$[ebp], 128 ; 00000080H
$LN27@Open:

; 240  :   }
; 241  :   // bOverlapped ? FILE_FLAG_OVERLAPPED : 0
; 242  :   m_hComm = CreateFile(sPort, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING,dwCreateProperty, NULL);

  000ae	8b f4		 mov	 esi, esp
  000b0	6a 00		 push	 0
  000b2	8b 45 d0	 mov	 eax, DWORD PTR _dwCreateProperty$[ebp]
  000b5	50		 push	 eax
  000b6	6a 03		 push	 3
  000b8	6a 00		 push	 0
  000ba	6a 00		 push	 0
  000bc	68 00 00 00 c0	 push	 -1073741824		; c0000000H
  000c1	8d 4d dc	 lea	 ecx, DWORD PTR _sPort$[ebp]
  000c4	e8 00 00 00 00	 call	 ??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ; ATL::CSimpleStringT<wchar_t,0>::operator wchar_t const *
  000c9	50		 push	 eax
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 243  :   if (m_hComm == INVALID_HANDLE_VALUE)

  000dd	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000e0	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  000e4	75 31		 jne	 SHORT $LN26@Open

; 244  :   {
; 245  :     TRACE(_T("Failed to open up the comms port\n"));

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@EHNNJM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr?$AAt@
  000eb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
  000f0	83 c0 16	 add	 eax, 22			; 00000016H
  000f3	50		 push	 eax
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000f9	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T212037[ebp]
  000ff	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0010a	83 c4 08	 add	 esp, 8

; 246  :     AfxThrowSerialException();

  0010d	6a 00		 push	 0
  0010f	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00114	83 c4 04	 add	 esp, 4
$LN26@Open:

; 247  :   }
; 248  : 
; 249  :   this->m_CurPortNum = nPort;

  00117	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _nPort$[ebp]
  0011d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 250  :   //Create the event we need for later synchronisation use
; 251  :   
; 252  :   if(bOverlapped)

  00120	83 7d 20 00	 cmp	 DWORD PTR _bOverlapped$[ebp], 0
  00124	74 5f		 je	 SHORT $LN25@Open

; 253  :   {
; 254  : 	m_hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00126	8b f4		 mov	 esi, esp
  00128	6a 00		 push	 0
  0012a	6a 00		 push	 0
  0012c	6a 00		 push	 0
  0012e	6a 00		 push	 0
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16
  00136	3b f4		 cmp	 esi, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 255  : 	if (m_hEvent == NULL)

  00143	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00146	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0014a	75 39		 jne	 SHORT $LN25@Open

; 256  : 	{
; 257  : 		Close();

  0014c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	e8 00 00 00 00	 call	 ?Close@CSerialPort@@QAEXXZ ; CSerialPort::Close

; 258  : 		TRACE(_T("Failed in call to CreateEvent in Open\n"));

  00154	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@OMEHBJJJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
  0015e	83 c0 23	 add	 eax, 35			; 00000023H
  00161	50		 push	 eax
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00167	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T212038[ebp]
  0016d	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00178	83 c4 08	 add	 esp, 8

; 259  : 		AfxThrowSerialException();

  0017b	6a 00		 push	 0
  0017d	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00182	83 c4 04	 add	 esp, 4
$LN25@Open:

; 260  : 	}
; 261  :   }
; 262  :   m_bOverlapped = bOverlapped;

  00185	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00188	8b 4d 20	 mov	 ecx, DWORD PTR _bOverlapped$[ebp]
  0018b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 263  :   
; 264  :   //Get the current state prior to changing it
; 265  :   DCB dcb;
; 266  :   dcb.DCBlength = sizeof(DCB);

  0018e	c7 45 ac 1c 00
	00 00		 mov	 DWORD PTR _dcb$[ebp], 28 ; 0000001cH

; 267  :   GetState(dcb);

  00195	8d 45 ac	 lea	 eax, DWORD PTR _dcb$[ebp]
  00198	50		 push	 eax
  00199	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019c	e8 00 00 00 00	 call	 ?GetState@CSerialPort@@QAEXAAU_DCB@@@Z ; CSerialPort::GetState

; 268  : 
; 269  :   //Setup the baud rate
; 270  :   dcb.BaudRate = dwBaud; 

  001a1	8b 45 0c	 mov	 eax, DWORD PTR _dwBaud$[ebp]
  001a4	89 45 b0	 mov	 DWORD PTR _dcb$[ebp+4], eax

; 271  : 
; 272  :   //Setup the Parity
; 273  :   switch (parity)

  001a7	8b 45 10	 mov	 eax, DWORD PTR _parity$[ebp]
  001aa	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv159[ebp], eax
  001b0	83 bd c4 fe ff
	ff 04		 cmp	 DWORD PTR tv159[ebp], 4
  001b7	77 2b		 ja	 SHORT $LN16@Open
  001b9	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv159[ebp]
  001bf	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN42@Open[ecx*4]
$LN21@Open:

; 274  :   {
; 275  :     case EvenParity:  dcb.Parity = EVENPARITY;  break;

  001c6	c6 45 bf 02	 mov	 BYTE PTR _dcb$[ebp+19], 2
  001ca	eb 35		 jmp	 SHORT $LN22@Open
$LN20@Open:

; 276  :     case MarkParity:  dcb.Parity = MARKPARITY;  break;

  001cc	c6 45 bf 03	 mov	 BYTE PTR _dcb$[ebp+19], 3
  001d0	eb 2f		 jmp	 SHORT $LN22@Open
$LN19@Open:

; 277  :     case NoParity:    dcb.Parity = NOPARITY;    break;

  001d2	c6 45 bf 00	 mov	 BYTE PTR _dcb$[ebp+19], 0
  001d6	eb 29		 jmp	 SHORT $LN22@Open
$LN18@Open:

; 278  :     case OddParity:   dcb.Parity = ODDPARITY;   break;

  001d8	c6 45 bf 01	 mov	 BYTE PTR _dcb$[ebp+19], 1
  001dc	eb 23		 jmp	 SHORT $LN22@Open
$LN17@Open:

; 279  :     case SpaceParity: dcb.Parity = SPACEPARITY; break;

  001de	c6 45 bf 04	 mov	 BYTE PTR _dcb$[ebp+19], 4
  001e2	eb 1d		 jmp	 SHORT $LN22@Open
$LN16@Open:

; 280  :     default:          ASSERT(FALSE);            break;

  001e4	33 c0		 xor	 eax, eax
  001e6	75 19		 jne	 SHORT $LN22@Open
  001e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
  001ee	83 c1 39	 add	 ecx, 57			; 00000039H
  001f1	51		 push	 ecx
  001f2	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  001f7	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001fc	85 c0		 test	 eax, eax
  001fe	74 01		 je	 SHORT $LN22@Open
  00200	cc		 int	 3
$LN22@Open:

; 281  :   }
; 282  : 
; 283  :   //Setup the data bits
; 284  :   dcb.ByteSize = DataBits;

  00201	8a 45 14	 mov	 al, BYTE PTR _DataBits$[ebp]
  00204	88 45 be	 mov	 BYTE PTR _dcb$[ebp+18], al

; 285  : 
; 286  :   //Setup the stop bits
; 287  :   switch (stopbits)

  00207	8b 45 18	 mov	 eax, DWORD PTR _stopbits$[ebp]
  0020a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv168[ebp], eax
  00210	83 bd c4 fe ff
	ff 00		 cmp	 DWORD PTR tv168[ebp], 0
  00217	74 14		 je	 SHORT $LN13@Open
  00219	83 bd c4 fe ff
	ff 01		 cmp	 DWORD PTR tv168[ebp], 1
  00220	74 11		 je	 SHORT $LN12@Open
  00222	83 bd c4 fe ff
	ff 02		 cmp	 DWORD PTR tv168[ebp], 2
  00229	74 0e		 je	 SHORT $LN11@Open
  0022b	eb 12		 jmp	 SHORT $LN10@Open
$LN13@Open:

; 288  :   {
; 289  :     case OneStopBit:           dcb.StopBits = ONESTOPBIT;   break;

  0022d	c6 45 c0 00	 mov	 BYTE PTR _dcb$[ebp+20], 0
  00231	eb 29		 jmp	 SHORT $LN14@Open
$LN12@Open:

; 290  :     case OnePointFiveStopBits: dcb.StopBits = ONE5STOPBITS; break;

  00233	c6 45 c0 01	 mov	 BYTE PTR _dcb$[ebp+20], 1
  00237	eb 23		 jmp	 SHORT $LN14@Open
$LN11@Open:

; 291  :     case TwoStopBits:          dcb.StopBits = TWOSTOPBITS;  break;

  00239	c6 45 c0 02	 mov	 BYTE PTR _dcb$[ebp+20], 2
  0023d	eb 1d		 jmp	 SHORT $LN14@Open
$LN10@Open:

; 292  :     default:                   ASSERT(FALSE);               break;

  0023f	33 c0		 xor	 eax, eax
  00241	75 19		 jne	 SHORT $LN14@Open
  00243	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
  00249	83 c1 45	 add	 ecx, 69			; 00000045H
  0024c	51		 push	 ecx
  0024d	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00252	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00257	85 c0		 test	 eax, eax
  00259	74 01		 je	 SHORT $LN14@Open
  0025b	cc		 int	 3
$LN14@Open:

; 293  :   }
; 294  : 
; 295  :   //Setup the flow control 
; 296  :   dcb.fDsrSensitivity = FALSE;

  0025c	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0025f	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00262	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 297  :   switch (fc)

  00265	8b 45 1c	 mov	 eax, DWORD PTR _fc$[ebp]
  00268	89 85 c4 fe ff
	ff		 mov	 DWORD PTR tv180[ebp], eax
  0026e	83 bd c4 fe ff
	ff 05		 cmp	 DWORD PTR tv180[ebp], 5
  00275	0f 87 67 01 00
	00		 ja	 $LN1@Open
  0027b	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR tv180[ebp]
  00281	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN43@Open[ecx*4]
$LN7@Open:

; 298  :   {
; 299  :     case NoFlowControl:
; 300  :     {
; 301  :       dcb.fOutxCtsFlow = FALSE;

  00288	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0028b	83 e0 fb	 and	 eax, -5			; fffffffbH
  0028e	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 302  :       dcb.fOutxDsrFlow = FALSE;

  00291	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00294	83 e0 f7	 and	 eax, -9			; fffffff7H
  00297	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 303  :       dcb.fOutX = FALSE;

  0029a	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0029d	25 ff fe ff ff	 and	 eax, -257		; fffffeffH
  002a2	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 304  :       dcb.fInX = FALSE;

  002a5	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002a8	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  002ad	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 305  :       break;

  002b0	e9 4d 01 00 00	 jmp	 $LN8@Open
$LN6@Open:

; 306  :     }
; 307  :     case CtsRtsFlowControl:
; 308  :     {
; 309  :       dcb.fOutxCtsFlow = TRUE;

  002b5	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002b8	83 c8 04	 or	 eax, 4
  002bb	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 310  :       dcb.fOutxDsrFlow = FALSE;

  002be	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002c1	83 e0 f7	 and	 eax, -9			; fffffff7H
  002c4	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 311  :       dcb.fRtsControl = RTS_CONTROL_HANDSHAKE;

  002c7	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002ca	25 ff cf ff ff	 and	 eax, -12289		; ffffcfffH
  002cf	0d 00 20 00 00	 or	 eax, 8192		; 00002000H
  002d4	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 312  :       dcb.fOutX = FALSE;

  002d7	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002da	25 ff fe ff ff	 and	 eax, -257		; fffffeffH
  002df	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 313  :       dcb.fInX = FALSE;

  002e2	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002e5	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  002ea	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 314  :       break;

  002ed	e9 10 01 00 00	 jmp	 $LN8@Open
$LN5@Open:

; 315  :     }
; 316  :     case CtsDtrFlowControl:
; 317  :     {
; 318  :       dcb.fOutxCtsFlow = TRUE;

  002f2	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002f5	83 c8 04	 or	 eax, 4
  002f8	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 319  :       dcb.fOutxDsrFlow = FALSE;

  002fb	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  002fe	83 e0 f7	 and	 eax, -9			; fffffff7H
  00301	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 320  :       dcb.fDtrControl = DTR_CONTROL_HANDSHAKE;

  00304	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00307	83 e0 cf	 and	 eax, -49		; ffffffcfH
  0030a	83 c8 20	 or	 eax, 32			; 00000020H
  0030d	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 321  :       dcb.fOutX = FALSE;

  00310	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00313	25 ff fe ff ff	 and	 eax, -257		; fffffeffH
  00318	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 322  :       dcb.fInX = FALSE;

  0031b	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0031e	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  00323	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 323  :       break;

  00326	e9 d7 00 00 00	 jmp	 $LN8@Open
$LN4@Open:

; 324  :     }
; 325  :     case DsrRtsFlowControl:
; 326  :     {
; 327  :       dcb.fOutxCtsFlow = FALSE;

  0032b	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0032e	83 e0 fb	 and	 eax, -5			; fffffffbH
  00331	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 328  :       dcb.fOutxDsrFlow = TRUE;

  00334	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00337	83 c8 08	 or	 eax, 8
  0033a	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 329  :       dcb.fRtsControl = RTS_CONTROL_HANDSHAKE;

  0033d	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00340	25 ff cf ff ff	 and	 eax, -12289		; ffffcfffH
  00345	0d 00 20 00 00	 or	 eax, 8192		; 00002000H
  0034a	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 330  :       dcb.fOutX = FALSE;

  0034d	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00350	25 ff fe ff ff	 and	 eax, -257		; fffffeffH
  00355	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 331  :       dcb.fInX = FALSE;

  00358	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0035b	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  00360	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 332  :       break;

  00363	e9 9a 00 00 00	 jmp	 $LN8@Open
$LN3@Open:

; 333  :     }
; 334  :     case DsrDtrFlowControl:
; 335  :     {
; 336  :       dcb.fOutxCtsFlow = FALSE;

  00368	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0036b	83 e0 fb	 and	 eax, -5			; fffffffbH
  0036e	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 337  :       dcb.fOutxDsrFlow = TRUE;

  00371	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00374	83 c8 08	 or	 eax, 8
  00377	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 338  :       dcb.fDtrControl = DTR_CONTROL_HANDSHAKE;

  0037a	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  0037d	83 e0 cf	 and	 eax, -49		; ffffffcfH
  00380	83 c8 20	 or	 eax, 32			; 00000020H
  00383	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 339  :       dcb.fOutX = FALSE;

  00386	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00389	25 ff fe ff ff	 and	 eax, -257		; fffffeffH
  0038e	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 340  :       dcb.fInX = FALSE;

  00391	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  00394	25 ff fd ff ff	 and	 eax, -513		; fffffdffH
  00399	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 341  :       break;

  0039c	eb 64		 jmp	 SHORT $LN8@Open
$LN2@Open:

; 342  :     }
; 343  :     case XonXoffFlowControl:
; 344  :     {
; 345  :       dcb.fOutxCtsFlow = FALSE;

  0039e	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  003a1	83 e0 fb	 and	 eax, -5			; fffffffbH
  003a4	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 346  :       dcb.fOutxDsrFlow = FALSE;

  003a7	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  003aa	83 e0 f7	 and	 eax, -9			; fffffff7H
  003ad	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 347  :       dcb.fOutX = TRUE;

  003b0	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  003b3	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  003b8	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 348  :       dcb.fInX = TRUE;

  003bb	8b 45 b4	 mov	 eax, DWORD PTR _dcb$[ebp+8]
  003be	0d 00 02 00 00	 or	 eax, 512		; 00000200H
  003c3	89 45 b4	 mov	 DWORD PTR _dcb$[ebp+8], eax

; 349  :       dcb.XonChar = 0x11;

  003c6	c6 45 c1 11	 mov	 BYTE PTR _dcb$[ebp+21], 17 ; 00000011H

; 350  :       dcb.XoffChar = 0x13;

  003ca	c6 45 c2 13	 mov	 BYTE PTR _dcb$[ebp+22], 19 ; 00000013H

; 351  :       dcb.XoffLim = 100;

  003ce	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  003d3	66 89 45 bc	 mov	 WORD PTR _dcb$[ebp+16], ax

; 352  :       dcb.XonLim = 100;

  003d7	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  003dc	66 89 45 ba	 mov	 WORD PTR _dcb$[ebp+14], ax

; 353  :       break;

  003e0	eb 20		 jmp	 SHORT $LN8@Open
$LN1@Open:

; 354  :     }
; 355  :     default:
; 356  :     {
; 357  :       ASSERT(FALSE);

  003e2	33 c0		 xor	 eax, eax
  003e4	75 1c		 jne	 SHORT $LN8@Open
  003e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1??Open@CSerialPort@@QAEXHKW4Parity@2@EW4StopBits@2@W4FlowControl@2@H@Z@4JA
  003ec	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  003f2	51		 push	 ecx
  003f3	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  003f8	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  003fd	85 c0		 test	 eax, eax
  003ff	74 01		 je	 SHORT $LN8@Open
  00401	cc		 int	 3
$LN8@Open:

; 358  :       break;
; 359  :     }
; 360  :   }
; 361  :   
; 362  :   //Now that we have all the settings in place, make the changes
; 363  :   SetState(dcb);

  00402	8d 45 ac	 lea	 eax, DWORD PTR _dcb$[ebp]
  00405	50		 push	 eax
  00406	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00409	e8 00 00 00 00	 call	 ?SetState@CSerialPort@@QAEXAAU_DCB@@@Z ; CSerialPort::SetState

; 364  : }

  0040e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00415	8d 4d dc	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00418	e8 00 00 00 00	 call	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  0041d	52		 push	 edx
  0041e	8b cd		 mov	 ecx, ebp
  00420	50		 push	 eax
  00421	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN41@Open
  00427	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0042c	58		 pop	 eax
  0042d	5a		 pop	 edx
  0042e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00431	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00438	59		 pop	 ecx
  00439	5f		 pop	 edi
  0043a	5e		 pop	 esi
  0043b	5b		 pop	 ebx
  0043c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0043f	33 cd		 xor	 ecx, ebp
  00441	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00446	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  0044c	3b ec		 cmp	 ebp, esp
  0044e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00453	8b e5		 mov	 esp, ebp
  00455	5d		 pop	 ebp
  00456	c2 1c 00	 ret	 28			; 0000001cH
  00459	8d 49 00	 npad	 3
$LN41@Open:
  0045c	02 00 00 00	 DD	 2
  00460	00 00 00 00	 DD	 $LN40@Open
$LN40@Open:
  00464	dc ff ff ff	 DD	 -36			; ffffffdcH
  00468	04 00 00 00	 DD	 4
  0046c	00 00 00 00	 DD	 $LN37@Open
  00470	ac ff ff ff	 DD	 -84			; ffffffacH
  00474	1c 00 00 00	 DD	 28			; 0000001cH
  00478	00 00 00 00	 DD	 $LN38@Open
$LN38@Open:
  0047c	64		 DB	 100			; 00000064H
  0047d	63		 DB	 99			; 00000063H
  0047e	62		 DB	 98			; 00000062H
  0047f	00		 DB	 0
$LN37@Open:
  00480	73		 DB	 115			; 00000073H
  00481	50		 DB	 80			; 00000050H
  00482	6f		 DB	 111			; 0000006fH
  00483	72		 DB	 114			; 00000072H
  00484	74		 DB	 116			; 00000074H
  00485	00		 DB	 0
  00486	8b ff		 npad	 2
$LN42@Open:
  00488	00 00 00 00	 DD	 $LN21@Open
  0048c	00 00 00 00	 DD	 $LN20@Open
  00490	00 00 00 00	 DD	 $LN19@Open
  00494	00 00 00 00	 DD	 $LN18@Open
  00498	00 00 00 00	 DD	 $LN17@Open
$LN43@Open:
  0049c	00 00 00 00	 DD	 $LN7@Open
  004a0	00 00 00 00	 DD	 $LN6@Open
  004a4	00 00 00 00	 DD	 $LN5@Open
  004a8	00 00 00 00	 DD	 $LN4@Open
  004ac	00 00 00 00	 DD	 $LN3@Open
  004b0	00 00 00 00	 DD	 $LN2@Open
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
__ehhandler$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a c0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-320]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Open@CSerialPort@@QAEXHKW4Parity@1@EW4StopBits@1@W4FlowControl@1@H@Z ENDP ; CSerialPort::Open
PUBLIC	?__LINE__Var@?1??Close@CSerialPort@@QAEXXZ@4JA	; `CSerialPort::Close'::`2'::__LINE__Var
PUBLIC	??_C@_1GI@KMOJLNHF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr@ ; `string'
PUBLIC	?IsOpen@CSerialPort@@QBEHXZ			; CSerialPort::IsOpen
;	COMDAT ?__LINE__Var@?1??Close@CSerialPort@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Close@CSerialPort@@QAEXXZ@4JA DD 016fH	; `CSerialPort::Close'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GI@KMOJLNHF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr@
CONST	SEGMENT
??_C@_1GI@KMOJLNHF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'o', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 'u', 00H, 'p', 00H, ' ', 00H, 't', 00H
	DB	'h', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'm'
	DB	00H, 's', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	',', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'L', 00H, 'a'
	DB	00H, 's', 00H, 't', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H
	DB	'r', 00H, ':', 00H, '%', 00H, 'd', 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Close@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
$T212057 = -228						; size = 8
_bSuccess$211126 = -20					; size = 4
_this$ = -8						; size = 4
?Close@CSerialPort@@QAEXXZ PROC				; CSerialPort::Close, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00013	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 368  :   if (IsOpen())

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?IsOpen@CSerialPort@@QBEHXZ ; CSerialPort::IsOpen
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 93 00 00
	00		 je	 $LN4@Close

; 369  :   {
; 370  :     //Close down the comms port
; 371  :     BOOL bSuccess = CloseHandle(m_hComm);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	51		 push	 ecx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 ec	 mov	 DWORD PTR _bSuccess$211126[ebp], eax

; 372  :     m_hComm = INVALID_HANDLE_VALUE;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 373  :     if (!bSuccess)

  00056	83 7d ec 00	 cmp	 DWORD PTR _bSuccess$211126[ebp], 0
  0005a	75 37		 jne	 SHORT $LN2@Close

; 374  :       TRACE(_T("Failed to close up the comms port, GetLastError:%d\n"), GetLastError());

  0005c	8b f4		 mov	 esi, esp
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	50		 push	 eax
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1GI@KMOJLNHF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AA?5?$AAu?$AAp?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAs?$AA?5?$AAp?$AAo?$AAr@
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Close@CSerialPort@@QAEXXZ@4JA
  00076	83 c0 07	 add	 eax, 7
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007f	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212057[ebp]
  00085	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@Close:

; 375  :     m_bOverlapped = FALSE;

  00093	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00096	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 376  : 
; 377  :     //Free up the event object we are using
; 378  :     if(m_hEvent)

  0009d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000a4	74 20		 je	 SHORT $LN4@Close

; 379  : 	{
; 380  : 	   CloseHandle(m_hEvent);

  000a6	8b f4		 mov	 esi, esp
  000a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000ae	51		 push	 ecx
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 381  :        m_hEvent = NULL;

  000bc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN4@Close:

; 382  : 	}
; 383  : 
; 384  :   }
; 385  : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?Close@CSerialPort@@QAEXXZ ENDP				; CSerialPort::Close
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\cz\vs\dvicectrldlg_new_signal_1\serialport.h
_TEXT	ENDS
;	COMDAT ?IsOpen@CSerialPort@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsOpen@CSerialPort@@QBEHXZ PROC			; CSerialPort::IsOpen, COMDAT
; _this$ = ecx

; 97   :   BOOL IsOpen() const { return m_hComm != INVALID_HANDLE_VALUE; };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	33 c9		 xor	 ecx, ecx
  00028	83 78 04 ff	 cmp	 DWORD PTR [eax+4], -1
  0002c	0f 95 c1	 setne	 cl
  0002f	8b c1		 mov	 eax, ecx
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?IsOpen@CSerialPort@@QBEHXZ ENDP			; CSerialPort::IsOpen
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??Attach@CSerialPort@@QAEXPAXH@Z@4JA ; `CSerialPort::Attach'::`2'::__LINE__Var
PUBLIC	??_C@_1FC@NOBNBECN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@ ; `string'
PUBLIC	?Attach@CSerialPort@@QAEXPAXH@Z			; CSerialPort::Attach
;	COMDAT ?__LINE__Var@?1??Attach@CSerialPort@@QAEXPAXH@Z@4JA
; File e:\cz\vs\dvicectrldlg_new_signal_1\serialport.cpp
_DATA	SEGMENT
?__LINE__Var@?1??Attach@CSerialPort@@QAEXPAXH@Z@4JA DD 0184H ; `CSerialPort::Attach'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@NOBNBECN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@
CONST	SEGMENT
??_C@_1FC@NOBNBECN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'v', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H
	DB	'A', 00H, 't', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Attach@CSerialPort@@QAEXPAXH@Z
_TEXT	SEGMENT
$T212062 = -216						; size = 8
_this$ = -8						; size = 4
_hComm$ = 8						; size = 4
_bOverlapped$ = 12					; size = 4
?Attach@CSerialPort@@QAEXPAXH@Z PROC			; CSerialPort::Attach, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :   Close();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?Close@CSerialPort@@QAEXXZ ; CSerialPort::Close

; 390  :   m_hComm = hComm;  

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _hComm$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 391  :   m_bOverlapped = bOverlapped;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _bOverlapped$[ebp]
  0003a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 392  : 
; 393  :   //Create the event we need for later synchronisation use
; 394  :   m_hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  0003d	8b f4		 mov	 esi, esp
  0003f	6a 00		 push	 0
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateEventW@16
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 395  :   if (m_hEvent == NULL)

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  00061	75 39		 jne	 SHORT $LN2@Attach

; 396  :   {
; 397  :     Close();

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?Close@CSerialPort@@QAEXXZ ; CSerialPort::Close

; 398  :     TRACE(_T("Failed in call to CreateEvent in Attach\n"));

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_1FC@NOBNBECN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAi?$AAn@
  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Attach@CSerialPort@@QAEXPAXH@Z@4JA
  00075	83 c0 0a	 add	 eax, 10			; 0000000aH
  00078	50		 push	 eax
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007e	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212062[ebp]
  00084	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008f	83 c4 08	 add	 esp, 8

; 399  :     AfxThrowSerialException();

  00092	6a 00		 push	 0
  00094	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00099	83 c4 04	 add	 esp, 4
$LN2@Attach:

; 400  :   }
; 401  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?Attach@CSerialPort@@QAEXPAXH@Z ENDP			; CSerialPort::Attach
_TEXT	ENDS
PUBLIC	?Detach@CSerialPort@@QAEPAXXZ			; CSerialPort::Detach
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Detach@CSerialPort@@QAEPAXXZ
_TEXT	SEGMENT
_hrVal$ = -20						; size = 4
_this$ = -8						; size = 4
?Detach@CSerialPort@@QAEPAXXZ PROC			; CSerialPort::Detach, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 405  :   HANDLE hrVal = m_hComm;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	89 4d ec	 mov	 DWORD PTR _hrVal$[ebp], ecx

; 406  :   m_hComm = INVALID_HANDLE_VALUE;

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 407  :   CloseHandle(m_hEvent);

  00036	8b f4		 mov	 esi, esp
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0003e	51		 push	 ecx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 408  :   m_hEvent = NULL;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 409  :   return hrVal;

  00056	8b 45 ec	 mov	 eax, DWORD PTR _hrVal$[ebp]

; 410  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?Detach@CSerialPort@@QAEPAXXZ ENDP			; CSerialPort::Detach
_TEXT	ENDS
PUBLIC	??_C@_1DI@LEHPDBLE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@MALJNKNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?1??Read@CSerialPort@@QAEKPAXK@Z@4JA ; `CSerialPort::Read'::`2'::__LINE__Var
PUBLIC	??_C@_1DK@IHDMHEEB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@CSerialPort@@QAEKPAXK@Z			; CSerialPort::Read
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__ClearCommError@12:PROC
;	COMDAT ??_C@_1DI@LEHPDBLE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@LEHPDBLE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@MALJNKNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@
CONST	SEGMENT
??_C@_1EG@MALJNKNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'R'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H, '!', 00H, 'm', 00H
	DB	'_', 00H, 'b', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l'
	DB	00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Read@CSerialPort@@QAEKPAXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Read@CSerialPort@@QAEKPAXK@Z@4JA DD 019dH ; `CSerialPort::Read'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DK@IHDMHEEB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@IHDMHEEB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'R'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H, 'I', 00H, 's', 00H
	DB	'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Read@CSerialPort@@QAEKPAXK@Z
_TEXT	SEGMENT
$T212068 = -308						; size = 8
$T212069 = -292						; size = 8
$T212070 = -276						; size = 8
_dwBytesRead$ = -68					; size = 4
_ok$ = -56						; size = 4
_comstat$ = -44						; size = 12
_Errors$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpBuf$ = 8						; size = 4
_dwCount$ = 12						; size = 4
?Read@CSerialPort@@QAEKPAXK@Z PROC			; CSerialPort::Read, COMDAT
; _this$ = ecx

; 413  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00013	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 414  : //   ASSERT(IsOpen());
; 415  : //   ASSERT(!m_bOverlapped);
; 416  :   TRACE(_T("CSerialPort::Read,IsOpen()\r\n"));

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@IHDMHEEB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Read@CSerialPort@@QAEKPAXK@Z@4JA
  00037	83 c0 03	 add	 eax, 3
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00040	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T212068[ebp]
  00046	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00051	83 c4 08	 add	 esp, 8

; 417  :   TRACE(_T("CSerialPort::Read,!m_bOverlapped\r\n"));

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@MALJNKNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Read@CSerialPort@@QAEKPAXK@Z@4JA
  0005e	83 c0 04	 add	 eax, 4
  00061	50		 push	 eax
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00067	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T212069[ebp]
  0006d	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00078	83 c4 08	 add	 esp, 8

; 418  :   
; 419  :   DWORD Errors;
; 420  :   COMSTAT comstat;
; 421  :   BOOL ok;
; 422  :   ok = ::ClearCommError(this->m_hComm,&Errors,&comstat);

  0007b	8b f4		 mov	 esi, esp
  0007d	8d 45 d4	 lea	 eax, DWORD PTR _comstat$[ebp]
  00080	50		 push	 eax
  00081	8d 4d e8	 lea	 ecx, DWORD PTR _Errors$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008b	50		 push	 eax
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClearCommError@12
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	89 45 c8	 mov	 DWORD PTR _ok$[ebp], eax

; 423  :   if(!ok)

  0009c	83 7d c8 00	 cmp	 DWORD PTR _ok$[ebp], 0
  000a0	75 04		 jne	 SHORT $LN3@Read

; 424  :   {
; 425  :      return 0;

  000a2	33 c0		 xor	 eax, eax
  000a4	eb 6d		 jmp	 SHORT $LN4@Read
$LN3@Read:

; 426  :   }
; 427  :   if(comstat.cbInQue==0)

  000a6	83 7d d8 00	 cmp	 DWORD PTR _comstat$[ebp+4], 0
  000aa	75 04		 jne	 SHORT $LN2@Read

; 428  :   {
; 429  :      return 0;

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 63		 jmp	 SHORT $LN4@Read
$LN2@Read:

; 430  :   }
; 431  : 
; 432  :   DWORD dwBytesRead = 0;

  000b0	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _dwBytesRead$[ebp], 0

; 433  :   if (!ReadFile(m_hComm, lpBuf, comstat.cbInQue, &dwBytesRead, NULL))

  000b7	8b f4		 mov	 esi, esp
  000b9	6a 00		 push	 0
  000bb	8d 45 bc	 lea	 eax, DWORD PTR _dwBytesRead$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d d8	 mov	 ecx, DWORD PTR _comstat$[ebp+4]
  000c2	51		 push	 ecx
  000c3	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  000c6	52		 push	 edx
  000c7	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cd	51		 push	 ecx
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  000d4	3b f4		 cmp	 esi, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	85 c0		 test	 eax, eax
  000dd	75 31		 jne	 SHORT $LN1@Read

; 434  :   {
; 435  :     TRACE(_T("Failed in call to ReadFile\n"));

  000df	68 00 00 00 00	 push	 OFFSET ??_C@_1DI@LEHPDBLE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Read@CSerialPort@@QAEKPAXK@Z@4JA
  000e9	83 c0 16	 add	 eax, 22			; 00000016H
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000f2	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T212070[ebp]
  000f8	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00103	83 c4 08	 add	 esp, 8

; 436  :     AfxThrowSerialException();

  00106	6a 00		 push	 0
  00108	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  0010d	83 c4 04	 add	 esp, 4
$LN1@Read:

; 437  :   }
; 438  : 
; 439  :   return dwBytesRead;

  00110	8b 45 bc	 mov	 eax, DWORD PTR _dwBytesRead$[ebp]
$LN4@Read:

; 440  : }

  00113	52		 push	 edx
  00114	8b cd		 mov	 ecx, ebp
  00116	50		 push	 eax
  00117	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Read
  0011d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00122	58		 pop	 eax
  00123	5a		 pop	 edx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	33 cd		 xor	 ecx, ebp
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  00137	3b ec		 cmp	 ebp, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 08 00	 ret	 8
$LN10@Read:
  00144	03 00 00 00	 DD	 3
  00148	00 00 00 00	 DD	 $LN9@Read
$LN9@Read:
  0014c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00150	04 00 00 00	 DD	 4
  00154	00 00 00 00	 DD	 $LN6@Read
  00158	d4 ff ff ff	 DD	 -44			; ffffffd4H
  0015c	0c 00 00 00	 DD	 12			; 0000000cH
  00160	00 00 00 00	 DD	 $LN7@Read
  00164	bc ff ff ff	 DD	 -68			; ffffffbcH
  00168	04 00 00 00	 DD	 4
  0016c	00 00 00 00	 DD	 $LN8@Read
$LN8@Read:
  00170	64		 DB	 100			; 00000064H
  00171	77		 DB	 119			; 00000077H
  00172	42		 DB	 66			; 00000042H
  00173	79		 DB	 121			; 00000079H
  00174	74		 DB	 116			; 00000074H
  00175	65		 DB	 101			; 00000065H
  00176	73		 DB	 115			; 00000073H
  00177	52		 DB	 82			; 00000052H
  00178	65		 DB	 101			; 00000065H
  00179	61		 DB	 97			; 00000061H
  0017a	64		 DB	 100			; 00000064H
  0017b	00		 DB	 0
$LN7@Read:
  0017c	63		 DB	 99			; 00000063H
  0017d	6f		 DB	 111			; 0000006fH
  0017e	6d		 DB	 109			; 0000006dH
  0017f	73		 DB	 115			; 00000073H
  00180	74		 DB	 116			; 00000074H
  00181	61		 DB	 97			; 00000061H
  00182	74		 DB	 116			; 00000074H
  00183	00		 DB	 0
$LN6@Read:
  00184	45		 DB	 69			; 00000045H
  00185	72		 DB	 114			; 00000072H
  00186	72		 DB	 114			; 00000072H
  00187	6f		 DB	 111			; 0000006fH
  00188	72		 DB	 114			; 00000072H
  00189	73		 DB	 115			; 00000073H
  0018a	00		 DB	 0
?Read@CSerialPort@@QAEKPAXK@Z ENDP			; CSerialPort::Read
_TEXT	ENDS
PUBLIC	??_C@_1FG@CLNOEDCD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?1??Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z@4JA ; `CSerialPort::Read'::`2'::__LINE__Var
PUBLIC	?Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z ; CSerialPort::Read
;	COMDAT ??_C@_1FG@CLNOEDCD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FG@CLNOEDCD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'R'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H, 'm', 00H, '_', 00H
	DB	'b', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E'
	DB	00H, 0dH, 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z@4JA DD 01bbH ; `CSerialPort::Read'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z
_TEXT	SEGMENT
$T212078 = -272						; size = 8
$T212079 = -256						; size = 8
$T212080 = -240						; size = 8
_bSuccess$ = -32					; size = 4
_dwBytesRead$ = -20					; size = 4
_this$ = -8						; size = 4
_lpBuf$ = 8						; size = 4
_dwCount$ = 12						; size = 4
_overlapped$ = 16					; size = 4
_pBytesRead$ = 20					; size = 4
?Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z PROC	; CSerialPort::Read, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00013	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 444  : //   ASSERT(IsOpen());
; 445  : //   ASSERT(m_bOverlapped);
; 446  : 	TRACE(_T("CSerialPort::Read,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@IHDMHEEB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z@4JA
  0002d	83 c0 03	 add	 eax, 3
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T212078[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 447  : 	TRACE(_T("CSerialPort::Read,m_bOverlapped == FALSE\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@CLNOEDCD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z@4JA
  00054	83 c0 04	 add	 eax, 4
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T212079[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 448  : 
; 449  :   DWORD dwBytesRead = 0;

  00071	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwBytesRead$[ebp], 0

; 450  :   /*
; 451  :   BOOL ok;
; 452  :   ok = ::ClearCommError(this->m_hComm,&Errors,&comstat);
; 453  :   if(!ok)
; 454  :   {
; 455  :      return false;
; 456  :   }
; 457  :   if(comstat.cbInQue==0)
; 458  :   {
; 459  :      return false;
; 460  :   }
; 461  :   */
; 462  :   BOOL bSuccess = ReadFile(m_hComm, lpBuf, dwCount, &dwBytesRead, &overlapped);

  00078	8b f4		 mov	 esi, esp
  0007a	8b 45 10	 mov	 eax, DWORD PTR _overlapped$[ebp]
  0007d	50		 push	 eax
  0007e	8d 4d ec	 lea	 ecx, DWORD PTR _dwBytesRead$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 0c	 mov	 edx, DWORD PTR _dwCount$[ebp]
  00085	52		 push	 edx
  00086	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00090	52		 push	 edx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	89 45 e0	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 463  :   if (!bSuccess)

  000a1	83 7d e0 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  000a5	75 49		 jne	 SHORT $LN4@Read@2

; 464  :   {
; 465  :     if (GetLastError() != ERROR_IO_PENDING)

  000a7	8b f4		 mov	 esi, esp
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000bb	74 31		 je	 SHORT $LN3@Read@2

; 466  :     {
; 467  :       TRACE(_T("Failed in call to ReadFile\n"));

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_1DI@LEHPDBLE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z@4JA
  000c7	83 c0 18	 add	 eax, 24			; 00000018H
  000ca	50		 push	 eax
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000d0	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T212080[ebp]
  000d6	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000e1	83 c4 08	 add	 esp, 8

; 468  :       AfxThrowSerialException();

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000eb	83 c4 04	 add	 esp, 4
$LN3@Read@2:

; 469  :     }
; 470  :   }
; 471  :   else

  000ee	eb 0e		 jmp	 SHORT $LN2@Read@2
$LN4@Read@2:

; 472  :   {
; 473  :     if (pBytesRead)

  000f0	83 7d 14 00	 cmp	 DWORD PTR _pBytesRead$[ebp], 0
  000f4	74 08		 je	 SHORT $LN2@Read@2

; 474  :       *pBytesRead = dwBytesRead;

  000f6	8b 45 14	 mov	 eax, DWORD PTR _pBytesRead$[ebp]
  000f9	8b 4d ec	 mov	 ecx, DWORD PTR _dwBytesRead$[ebp]
  000fc	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@Read@2:

; 475  :   }
; 476  :   return bSuccess;

  000fe	8b 45 e0	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 477  : }

  00101	52		 push	 edx
  00102	8b cd		 mov	 ecx, ebp
  00104	50		 push	 eax
  00105	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Read@2
  0010b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00110	58		 pop	 eax
  00111	5a		 pop	 edx
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 10 00	 ret	 16			; 00000010H
$LN9@Read@2:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN8@Read@2
$LN8@Read@2:
  00130	ec ff ff ff	 DD	 -20			; ffffffecH
  00134	04 00 00 00	 DD	 4
  00138	00 00 00 00	 DD	 $LN7@Read@2
$LN7@Read@2:
  0013c	64		 DB	 100			; 00000064H
  0013d	77		 DB	 119			; 00000077H
  0013e	42		 DB	 66			; 00000042H
  0013f	79		 DB	 121			; 00000079H
  00140	74		 DB	 116			; 00000074H
  00141	65		 DB	 101			; 00000065H
  00142	73		 DB	 115			; 00000073H
  00143	52		 DB	 82			; 00000052H
  00144	65		 DB	 101			; 00000065H
  00145	61		 DB	 97			; 00000061H
  00146	64		 DB	 100			; 00000064H
  00147	00		 DB	 0
?Read@CSerialPort@@QAEHPAXKAAU_OVERLAPPED@@PAK@Z ENDP	; CSerialPort::Read
_TEXT	ENDS
PUBLIC	??_C@_1DK@NONDCBBD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@DDEAHPHG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?1??Write@CSerialPort@@QAEKPBXK@Z@4JA ; `CSerialPort::Write'::`2'::__LINE__Var
PUBLIC	??_C@_1DM@DOBAFFBN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?Write@CSerialPort@@QAEKPBXK@Z			; CSerialPort::Write
EXTRN	__imp__WriteFile@20:PROC
;	COMDAT ??_C@_1DK@NONDCBBD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@NONDCBBD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'W', 00H, 'r', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@DDEAHPHG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@
CONST	SEGMENT
??_C@_1FI@DDEAHPHG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ',', 00H, '!', 00H
	DB	'm', 00H, '_', 00H, 'b', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'T', 00H, 'R', 00H, 'U'
	DB	00H, 'E', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Write@CSerialPort@@QAEKPBXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Write@CSerialPort@@QAEKPBXK@Z@4JA DD 01e0H ; `CSerialPort::Write'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@DOBAFFBN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@DOBAFFBN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ',', 00H, 'I', 00H
	DB	's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')'
	DB	00H, 0dH, 00H, 0aH, 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Write@CSerialPort@@QAEKPBXK@Z
_TEXT	SEGMENT
$T212086 = -260						; size = 8
$T212087 = -244						; size = 8
$T212088 = -228						; size = 8
_dwBytesWritten$ = -20					; size = 4
_this$ = -8						; size = 4
_lpBuf$ = 8						; size = 4
_dwCount$ = 12						; size = 4
?Write@CSerialPort@@QAEKPBXK@Z PROC			; CSerialPort::Write, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : //   ASSERT(IsOpen());
; 482  : //   ASSERT(!m_bOverlapped);
; 483  : 	TRACE(_T("CSerialPort::Write,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@DOBAFFBN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEKPBXK@Z@4JA
  0002d	83 c0 03	 add	 eax, 3
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T212086[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 484  : 	TRACE(_T("CSerialPort::Write,!m_bOverlapped == TRUE\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@DDEAHPHG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AA?$CB?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEKPBXK@Z@4JA
  00054	83 c0 04	 add	 eax, 4
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T212087[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 485  : 
; 486  :   DWORD dwBytesWritten = 0;

  00071	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwBytesWritten$[ebp], 0

; 487  :   if (!WriteFile(m_hComm, lpBuf, dwCount, &dwBytesWritten, NULL))

  00078	8b f4		 mov	 esi, esp
  0007a	6a 00		 push	 0
  0007c	8d 45 ec	 lea	 eax, DWORD PTR _dwBytesWritten$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  00087	52		 push	 edx
  00088	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008e	51		 push	 ecx
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	85 c0		 test	 eax, eax
  0009e	75 31		 jne	 SHORT $LN1@Write

; 488  :   {
; 489  :     TRACE(_T("Failed in call to WriteFile\n"));

  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@NONDCBBD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEKPBXK@Z@4JA
  000aa	83 c0 09	 add	 eax, 9
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000b3	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212088[ebp]
  000b9	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000c4	83 c4 08	 add	 esp, 8

; 490  :     AfxThrowSerialException();

  000c7	6a 00		 push	 0
  000c9	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000ce	83 c4 04	 add	 esp, 4
$LN1@Write:

; 491  :   }
; 492  : 
; 493  :   return dwBytesWritten;

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _dwBytesWritten$[ebp]

; 494  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Write
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
  000fb	90		 npad	 1
$LN6@Write:
  000fc	01 00 00 00	 DD	 1
  00100	00 00 00 00	 DD	 $LN5@Write
$LN5@Write:
  00104	ec ff ff ff	 DD	 -20			; ffffffecH
  00108	04 00 00 00	 DD	 4
  0010c	00 00 00 00	 DD	 $LN4@Write
$LN4@Write:
  00110	64		 DB	 100			; 00000064H
  00111	77		 DB	 119			; 00000077H
  00112	42		 DB	 66			; 00000042H
  00113	79		 DB	 121			; 00000079H
  00114	74		 DB	 116			; 00000074H
  00115	65		 DB	 101			; 00000065H
  00116	73		 DB	 115			; 00000073H
  00117	57		 DB	 87			; 00000057H
  00118	72		 DB	 114			; 00000072H
  00119	69		 DB	 105			; 00000069H
  0011a	74		 DB	 116			; 00000074H
  0011b	74		 DB	 116			; 00000074H
  0011c	65		 DB	 101			; 00000065H
  0011d	6e		 DB	 110			; 0000006eH
  0011e	00		 DB	 0
?Write@CSerialPort@@QAEKPBXK@Z ENDP			; CSerialPort::Write
_TEXT	ENDS
PUBLIC	??_C@_1GA@LJDEEEE@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAL?$AAe?$AAn?$AA?3?$AA?$CF?$AAd?$AA?0?$AA?5?$AAA@ ; `string'
PUBLIC	??_C@_1FI@LIBINEKP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA ; `CSerialPort::Write'::`2'::__LINE__Var
PUBLIC	?Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z ; CSerialPort::Write
;	COMDAT ??_C@_1GA@LJDEEEE@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAL?$AAe?$AAn?$AA?3?$AA?$CF?$AAd?$AA?0?$AA?5?$AAA@
CONST	SEGMENT
??_C@_1GA@LJDEEEE@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAL?$AAe?$AAn?$AA?3?$AA?$CF?$AAd?$AA?0?$AA?5?$AAA@ DB 'W'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, ',', 00H, ' ', 00H, 'W', 00H, 'r', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, 'L', 00H, 'e', 00H, 'n', 00H, ':'
	DB	00H, '%', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'A', 00H, 'c', 00H
	DB	't', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'L', 00H, 'e'
	DB	00H, 'n', 00H, ':', 00H, ' ', 00H, '%', 00H, 'd', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@LIBINEKP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@
CONST	SEGMENT
??_C@_1FI@LIBINEKP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ',', 00H, 'm', 00H
	DB	'_', 00H, 'b', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l'
	DB	00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S'
	DB	00H, 'E', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA DD 01f1H ; `CSerialPort::Write'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z
_TEXT	SEGMENT
$T212094 = -288						; size = 8
$T212095 = -272						; size = 8
$T212096 = -256						; size = 8
$T212097 = -240						; size = 8
_bSuccess$ = -32					; size = 4
_dwBytesWritten$ = -20					; size = 4
_this$ = -8						; size = 4
_lpBuf$ = 8						; size = 4
_dwCount$ = 12						; size = 4
_overlapped$ = 16					; size = 4
_pBytesWritten$ = 20					; size = 4
?Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z PROC	; CSerialPort::Write, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd dc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-292]
  00013	b9 49 00 00 00	 mov	 ecx, 73			; 00000049H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 498  : //   ASSERT(IsOpen());
; 499  : //   ASSERT(m_bOverlapped);
; 500  : 	TRACE(_T("CSerialPort::Write,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@DOBAFFBN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA
  0002d	83 c0 03	 add	 eax, 3
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T212094[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 501  : 	TRACE(_T("CSerialPort::Write,m_bOverlapped == FALSE\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@LIBINEKP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA
  00054	83 c0 04	 add	 eax, 4
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T212095[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 502  : 
; 503  :   DWORD dwBytesWritten = 0;

  00071	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwBytesWritten$[ebp], 0

; 504  :   BOOL bSuccess = WriteFile(m_hComm, lpBuf, dwCount, &dwBytesWritten, &overlapped);

  00078	8b f4		 mov	 esi, esp
  0007a	8b 45 10	 mov	 eax, DWORD PTR _overlapped$[ebp]
  0007d	50		 push	 eax
  0007e	8d 4d ec	 lea	 ecx, DWORD PTR _dwBytesWritten$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 0c	 mov	 edx, DWORD PTR _dwCount$[ebp]
  00085	52		 push	 edx
  00086	8b 45 08	 mov	 eax, DWORD PTR _lpBuf$[ebp]
  00089	50		 push	 eax
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00090	52		 push	 edx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	89 45 e0	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 505  :   if (!bSuccess)

  000a1	83 7d e0 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  000a5	75 79		 jne	 SHORT $LN4@Write@2

; 506  :   {
; 507  :     if (GetLastError() != ERROR_IO_PENDING)

  000a7	8b f4		 mov	 esi, esp
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000bb	74 31		 je	 SHORT $LN3@Write@2

; 508  :     {
; 509  :       TRACE(_T("Failed in call to WriteFile\n"));

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@NONDCBBD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?6?$AA?$AA@
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA
  000c7	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ca	50		 push	 eax
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000d0	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T212096[ebp]
  000d6	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000e1	83 c4 08	 add	 esp, 8

; 510  :       AfxThrowSerialException();

  000e4	6a 00		 push	 0
  000e6	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000eb	83 c4 04	 add	 esp, 4
$LN3@Write@2:

; 511  :     }
; 512  : 	TRACE(_T("WriteFile Error, Write Len:%d, Actual Len: %d\r\n"), dwCount, dwBytesWritten);

  000ee	8b 45 ec	 mov	 eax, DWORD PTR _dwBytesWritten$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  000f5	51		 push	 ecx
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_1GA@LJDEEEE@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAL?$AAe?$AAn?$AA?3?$AA?$CF?$AAd?$AA?0?$AA?5?$AAA@
  000fb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?__LINE__Var@?1??Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z@4JA
  00101	83 c2 0f	 add	 edx, 15			; 0000000fH
  00104	52		 push	 edx
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0010a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T212097[ebp]
  00110	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0011b	83 c4 10	 add	 esp, 16			; 00000010H

; 513  :   }
; 514  :   else

  0011e	eb 0e		 jmp	 SHORT $LN2@Write@2
$LN4@Write@2:

; 515  :   {
; 516  :     if (pBytesWritten)

  00120	83 7d 14 00	 cmp	 DWORD PTR _pBytesWritten$[ebp], 0
  00124	74 08		 je	 SHORT $LN2@Write@2

; 517  :       *pBytesWritten = dwBytesWritten;

  00126	8b 45 14	 mov	 eax, DWORD PTR _pBytesWritten$[ebp]
  00129	8b 4d ec	 mov	 ecx, DWORD PTR _dwBytesWritten$[ebp]
  0012c	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@Write@2:

; 518  :   }
; 519  : 
; 520  :   return bSuccess;

  0012e	8b 45 e0	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 521  : }

  00131	52		 push	 edx
  00132	8b cd		 mov	 ecx, ebp
  00134	50		 push	 eax
  00135	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Write@2
  0013b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00140	58		 pop	 eax
  00141	5a		 pop	 edx
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	81 c4 24 01 00
	00		 add	 esp, 292		; 00000124H
  0014b	3b ec		 cmp	 ebp, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 10 00	 ret	 16			; 00000010H
$LN9@Write@2:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN8@Write@2
$LN8@Write@2:
  00160	ec ff ff ff	 DD	 -20			; ffffffecH
  00164	04 00 00 00	 DD	 4
  00168	00 00 00 00	 DD	 $LN7@Write@2
$LN7@Write@2:
  0016c	64		 DB	 100			; 00000064H
  0016d	77		 DB	 119			; 00000077H
  0016e	42		 DB	 66			; 00000042H
  0016f	79		 DB	 121			; 00000079H
  00170	74		 DB	 116			; 00000074H
  00171	65		 DB	 101			; 00000065H
  00172	73		 DB	 115			; 00000073H
  00173	57		 DB	 87			; 00000057H
  00174	72		 DB	 114			; 00000072H
  00175	69		 DB	 105			; 00000069H
  00176	74		 DB	 116			; 00000074H
  00177	74		 DB	 116			; 00000074H
  00178	65		 DB	 101			; 00000065H
  00179	6e		 DB	 110			; 0000006eH
  0017a	00		 DB	 0
?Write@CSerialPort@@QAEHPBXKAAU_OVERLAPPED@@PAK@Z ENDP	; CSerialPort::Write
_TEXT	ENDS
PUBLIC	??_C@_1EO@LEFHNIPA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR@ ; `string'
PUBLIC	??_C@_1HE@KIPENHBI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z@4JA ; `CSerialPort::GetOverlappedResult'::`2'::__LINE__Var
PUBLIC	??_C@_1FI@FHPDLOPC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ ; `string'
PUBLIC	?GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z ; CSerialPort::GetOverlappedResult
EXTRN	__imp__GetOverlappedResult@16:PROC
;	COMDAT ??_C@_1EO@LEFHNIPA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR@
CONST	SEGMENT
??_C@_1EO@LEFHNIPA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, 'R', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@KIPENHBI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
CONST	SEGMENT
??_C@_1HE@KIPENHBI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, 'R'
	DB	00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ',', 00H
	DB	'm', 00H, '_', 00H, 'b', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'L'
	DB	00H, 'S', 00H, 'E', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z@4JA DD 020cH ; `CSerialPort::GetOverlappedResult'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FI@FHPDLOPC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
CONST	SEGMENT
??_C@_1FI@FHPDLOPC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, 'R'
	DB	00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ',', 00H
	DB	'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '('
	DB	00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z
_TEXT	SEGMENT
$T212103 = -260						; size = 8
$T212104 = -244						; size = 8
$T212105 = -228						; size = 8
_bSuccess$ = -20					; size = 4
_this$ = -8						; size = 4
_overlapped$ = 8					; size = 4
_dwBytesTransferred$ = 12				; size = 4
_bWait$ = 16						; size = 4
?GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z PROC ; CSerialPort::GetOverlappedResult, COMDAT
; _this$ = ecx

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 525  : //   ASSERT(IsOpen());
; 526  : //   ASSERT(m_bOverlapped);
; 527  : 	TRACE(_T("CSerialPort::GetOverlappedResult,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@FHPDLOPC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z@4JA
  0002d	83 c0 03	 add	 eax, 3
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T212103[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 528  : 	TRACE(_T("CSerialPort::GetOverlappedResult,m_bOverlapped == FALSE\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1HE@KIPENHBI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z@4JA
  00054	83 c0 04	 add	 eax, 4
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T212104[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 529  : 
; 530  :   BOOL bSuccess = ::GetOverlappedResult(m_hComm, &overlapped, &dwBytesTransferred, bWait);

  00071	8b f4		 mov	 esi, esp
  00073	8b 45 10	 mov	 eax, DWORD PTR _bWait$[ebp]
  00076	50		 push	 eax
  00077	8b 4d 0c	 mov	 ecx, DWORD PTR _dwBytesTransferred$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 08	 mov	 edx, DWORD PTR _overlapped$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00085	51		 push	 ecx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetOverlappedResult@16
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	89 45 ec	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 531  :   if (!bSuccess)

  00096	83 7d ec 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  0009a	75 47		 jne	 SHORT $LN4@GetOverlap

; 532  :   {
; 533  :     if (GetLastError() != ERROR_IO_PENDING)

  0009c	8b f4		 mov	 esi, esp
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000b0	74 31		 je	 SHORT $LN4@GetOverlap

; 534  :     {
; 535  :       TRACE(_T("Failed in call to GetOverlappedResult\n"));

  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@LEFHNIPA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AAR@
  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z@4JA
  000bc	83 c0 0b	 add	 eax, 11			; 0000000bH
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000c5	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212105[ebp]
  000cb	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000d6	83 c4 08	 add	 esp, 8

; 536  :       AfxThrowSerialException();

  000d9	6a 00		 push	 0
  000db	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000e0	83 c4 04	 add	 esp, 4
$LN4@GetOverlap:

; 537  :     }
; 538  :   }
; 539  : 
; 540  :   if (bSuccess)

  000e3	83 7d ec 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  000e7	74 06		 je	 SHORT $LN2@GetOverlap

; 541  :   {
; 542  : 	  return TRUE;

  000e9	b0 01		 mov	 al, 1
  000eb	eb 04		 jmp	 SHORT $LN5@GetOverlap

; 543  :   }
; 544  :   else

  000ed	eb 02		 jmp	 SHORT $LN5@GetOverlap
$LN2@GetOverlap:

; 545  :   {
; 546  : 	  return FALSE;

  000ef	32 c0		 xor	 al, al
$LN5@GetOverlap:

; 547  :   }
; 548  : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 0c 00	 ret	 12			; 0000000cH
?GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z ENDP ; CSerialPort::GetOverlappedResult
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z@4JA@249df390 ; `CSerialPort::_OnCompletion'::`2'::__LINE__Var
PUBLIC	??_C@_1GE@DNOIFAKC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AA_?$AAO?$AAn?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAl?$AAp?$AAO?$AAv?$AAe@ ; `string'
PUBLIC	?_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z ; CSerialPort::_OnCompletion
EXTRN	?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z:PROC ; CObject::IsKindOf
;	COMDAT ?__LINE__Var@?1??_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z@4JA@249df390
_DATA	SEGMENT
?__LINE__Var@?1??_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z@4JA@249df390 DD 0227H ; `CSerialPort::_OnCompletion'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GE@DNOIFAKC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AA_?$AAO?$AAn?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAl?$AAp?$AAO?$AAv?$AAe@
CONST	SEGMENT
??_C@_1GE@DNOIFAKC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AA_?$AAO?$AAn?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAl?$AAp?$AAO?$AAv?$AAe@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'O', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H
	DB	'l', 00H, 'e', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ','
	DB	00H, 'l', 00H, 'p', 00H, 'O', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z
_TEXT	SEGMENT
$T212108 = -216						; size = 8
_pSerialPort$ = -8					; size = 4
_dwErrorCode$ = 8					; size = 4
_dwCount$ = 12						; size = 4
_lpOverlapped$ = 16					; size = 4
?_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z PROC ; CSerialPort::_OnCompletion, COMDAT

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 552  :   //Validate our parameters
; 553  : //   ASSERT(lpOverlapped);
; 554  :   TRACE(_T("CSerialPort::_OnCompletion,lpOverlapped == NULL\r\n"));

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_1GE@DNOIFAKC@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AA_?$AAO?$AAn?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AA?0?$AAl?$AAp?$AAO?$AAv?$AAe@
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z@4JA@249df390
  00028	83 c0 03	 add	 eax, 3
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00031	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212108[ebp]
  00037	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00042	83 c4 08	 add	 esp, 8

; 555  : 
; 556  :   //Convert back to the C++ world
; 557  :   CSerialPort* pSerialPort = (CSerialPort*) lpOverlapped->hEvent;

  00045	8b 45 10	 mov	 eax, DWORD PTR _lpOverlapped$[ebp]
  00048	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004b	89 4d f8	 mov	 DWORD PTR _pSerialPort$[ebp], ecx

; 558  :   ASSERT(pSerialPort);

  0004e	83 7d f8 00	 cmp	 DWORD PTR _pSerialPort$[ebp], 0
  00052	75 18		 jne	 SHORT $LN3@OnCompleti
  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z@4JA@249df390
  00059	83 c0 07	 add	 eax, 7
  0005c	50		 push	 eax
  0005d	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00062	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00067	85 c0		 test	 eax, eax
  00069	74 01		 je	 SHORT $LN3@OnCompleti
  0006b	cc		 int	 3
$LN3@OnCompleti:

; 559  :   ASSERT(pSerialPort->IsKindOf(RUNTIME_CLASS(CSerialPort)));

  0006c	68 00 00 00 00	 push	 OFFSET ?classCSerialPort@CSerialPort@@2UCRuntimeClass@@B ; CSerialPort::classCSerialPort
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _pSerialPort$[ebp]
  00074	e8 00 00 00 00	 call	 ?IsKindOf@CObject@@QBEHPBUCRuntimeClass@@@Z ; CObject::IsKindOf
  00079	85 c0		 test	 eax, eax
  0007b	75 18		 jne	 SHORT $LN4@OnCompleti
  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z@4JA@249df390
  00082	83 c0 08	 add	 eax, 8
  00085	50		 push	 eax
  00086	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  0008b	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00090	85 c0		 test	 eax, eax
  00092	74 01		 je	 SHORT $LN4@OnCompleti
  00094	cc		 int	 3
$LN4@OnCompleti:

; 560  : 
; 561  :   //Call the C++ function
; 562  :   pSerialPort->OnCompletion(dwErrorCode, dwCount, lpOverlapped);

  00095	8b f4		 mov	 esi, esp
  00097	8b 45 10	 mov	 eax, DWORD PTR _lpOverlapped$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 08	 mov	 edx, DWORD PTR _dwErrorCode$[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 f8	 mov	 eax, DWORD PTR _pSerialPort$[ebp]
  000a6	8b 10		 mov	 edx, DWORD PTR [eax]
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _pSerialPort$[ebp]
  000ab	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ae	ff d0		 call	 eax
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 563  : }

  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000c0	3b ec		 cmp	 ebp, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 0c 00	 ret	 12			; 0000000cH
?_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z ENDP ; CSerialPort::_OnCompletion
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?OnCompletion@CSerialPort@@UAEXKKPAU_OVERLAPPED@@@Z
_TEXT	SEGMENT
$T212113 = -212						; size = 4
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
_lpOverlapped$ = 16					; size = 4
?OnCompletion@CSerialPort@@UAEXKKPAU_OVERLAPPED@@@Z PROC ; CSerialPort::OnCompletion, COMDAT
; _this$ = ecx

; 566  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 567  :   //Just free up the memory which was previously allocated for the OVERLAPPED structure
; 568  :   delete lpOverlapped;

  00023	8b 45 10	 mov	 eax, DWORD PTR _lpOverlapped$[ebp]
  00026	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T212113[ebp], eax
  0002c	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR $T212113[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00038	83 c4 04	 add	 esp, 4

; 569  : 
; 570  :   //Your derived classes can do something useful in OnCompletion, but don't forget to
; 571  :   //call CSerialPort::OnCompletion to ensure the memory is freed up
; 572  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?OnCompletion@CSerialPort@@UAEXKKPAU_OVERLAPPED@@@Z ENDP ; CSerialPort::OnCompletion
_TEXT	ENDS
PUBLIC	??_C@_1DI@EPHGDDAF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAO?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_1OI@BEBLMHMK@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??CancelIo@CSerialPort@@QAEXXZ@4JA ; `CSerialPort::CancelIo'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@IOFCDPGK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ ; `string'
PUBLIC	?CancelIo@CSerialPort@@QAEXXZ			; CSerialPort::CancelIo
;	COMDAT ??_C@_1DI@EPHGDDAF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAO?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@EPHGDDAF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAO?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'a', 00H
	DB	'n', 00H, 'c', 00H, 'e', 00H, 'l', 00H, 'I', 00H, 'O', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OI@BEBLMHMK@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@
CONST	SEGMENT
??_C@_1OI@BEBLMHMK@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@ DB 'C'
	DB	00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'l', 00H, 'I', 00H
	DB	'o', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 's', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 's', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'i', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'S', 00H, '.', 00H
	DB	' ', 00H, 'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'n', 00H, 'e'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'b', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'u', 00H, 'n', 00H, 'n'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'N', 00H, 'T', 00H, ' ', 00H, '4', 00H, ' ', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'W', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '9'
	DB	00H, '8', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CancelIo@CSerialPort@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CancelIo@CSerialPort@@QAEXXZ@4JA DD 023fH ; `CSerialPort::CancelIo'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@IOFCDPGK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_1EC@IOFCDPGK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'C'
	DB	00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'l', 00H, 'I', 00H
	DB	'o', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?CancelIo@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
$T212116 = -248						; size = 8
$T212117 = -232						; size = 8
$T212118 = -216						; size = 8
_this$ = -8						; size = 4
?CancelIo@CSerialPort@@QAEXXZ PROC			; CSerialPort::CancelIo, COMDAT
; _this$ = ecx

; 575  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 576  : //   ASSERT(IsOpen());
; 577  : 	TRACE(_T("CSerialPort::CancelIo,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@IOFCDPGK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CancelIo@CSerialPort@@QAEXXZ@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T212116[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 578  : 
; 579  :   if (_SerialPortData.m_lpfnCancelIo == NULL)

  0004a	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?_SerialPortData@@3V_SERIAL_PORT_DATA@@A+4, 0
  00051	75 31		 jne	 SHORT $LN2@CancelIo

; 580  :   {
; 581  :     TRACE(_T("CancelIo function is not supported on this OS. You need to be running at least NT 4 or Win 98 to use this function\n"));

  00053	68 00 00 00 00	 push	 OFFSET ??_C@_1OI@BEBLMHMK@?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAo?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt@
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CancelIo@CSerialPort@@QAEXXZ@4JA
  0005d	83 c0 06	 add	 eax, 6
  00060	50		 push	 eax
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00066	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212117[ebp]
  0006c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00077	83 c4 08	 add	 esp, 8

; 582  :     AfxThrowSerialException(ERROR_CALL_NOT_IMPLEMENTED);  

  0007a	6a 78		 push	 120			; 00000078H
  0007c	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00081	83 c4 04	 add	 esp, 4
$LN2@CancelIo:

; 583  :   }
; 584  : 
; 585  :   if (!::_SerialPortData.m_lpfnCancelIo(m_hComm))

  00084	8b f4		 mov	 esi, esp
  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008c	51		 push	 ecx
  0008d	ff 15 04 00 00
	00		 call	 DWORD PTR ?_SerialPortData@@3V_SERIAL_PORT_DATA@@A+4
  00093	3b f4		 cmp	 esi, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	85 c0		 test	 eax, eax
  0009c	75 31		 jne	 SHORT $LN3@CancelIo

; 586  :   {
; 587  :     TRACE(_T("Failed in call to CancelIO\n"));

  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_1DI@EPHGDDAF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAI?$AAO?$AA?6?$AA?$AA@
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??CancelIo@CSerialPort@@QAEXXZ@4JA
  000a8	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ab	50		 push	 eax
  000ac	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000b1	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212118[ebp]
  000b7	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000c2	83 c4 08	 add	 esp, 8

; 588  :     AfxThrowSerialException();

  000c5	6a 00		 push	 0
  000c7	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000cc	83 c4 04	 add	 esp, 4
$LN3@CancelIo:

; 589  :   }
; 590  : }

  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
?CancelIo@CSerialPort@@QAEXXZ ENDP			; CSerialPort::CancelIo
_TEXT	ENDS
PUBLIC	?GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z	; CSerialPort::GetStatus
PUBLIC	?__LINE__Var@?1??BytesWaiting@CSerialPort@@QAEKXZ@4JA ; `CSerialPort::BytesWaiting'::`2'::__LINE__Var
PUBLIC	??_C@_1EK@KPHFPBEJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAB?$AAy?$AAt?$AAe?$AAs?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?BytesWaiting@CSerialPort@@QAEKXZ		; CSerialPort::BytesWaiting
;	COMDAT ?__LINE__Var@?1??BytesWaiting@CSerialPort@@QAEKXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??BytesWaiting@CSerialPort@@QAEKXZ@4JA DD 0251H ; `CSerialPort::BytesWaiting'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@KPHFPBEJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAB?$AAy?$AAt?$AAe?$AAs?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@
CONST	SEGMENT
??_C@_1EK@KPHFPBEJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAB?$AAy?$AAt?$AAe?$AAs?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'B'
	DB	00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, 'W', 00H, 'a', 00H
	DB	'i', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ',', 00H, 'I'
	DB	00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H
	DB	')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?BytesWaiting@CSerialPort@@QAEKXZ
_TEXT	SEGMENT
$T212122 = -240						; size = 8
_stat$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?BytesWaiting@CSerialPort@@QAEKXZ PROC			; CSerialPort::BytesWaiting, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00013	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 594  : //   ASSERT(IsOpen());
; 595  : 	TRACE(_T("CSerialPort::BytesWaiting,IsOpen()\r\n"));

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@KPHFPBEJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAB?$AAy?$AAt?$AAe?$AAs?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??BytesWaiting@CSerialPort@@QAEKXZ@4JA
  00037	83 c0 02	 add	 eax, 2
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00040	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T212122[ebp]
  00046	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00051	83 c4 08	 add	 esp, 8

; 596  : 
; 597  :   //Check to see how many characters are unread
; 598  :   COMSTAT stat;
; 599  :   GetStatus(stat);

  00054	8d 45 e0	 lea	 eax, DWORD PTR _stat$[ebp]
  00057	50		 push	 eax
  00058	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z ; CSerialPort::GetStatus

; 600  :   return stat.cbInQue;

  00060	8b 45 e4	 mov	 eax, DWORD PTR _stat$[ebp+4]

; 601  : }

  00063	52		 push	 edx
  00064	8b cd		 mov	 ecx, ebp
  00066	50		 push	 eax
  00067	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@BytesWaiti
  0006d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00072	58		 pop	 eax
  00073	5a		 pop	 edx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
  00092	8b ff		 npad	 2
$LN5@BytesWaiti:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@BytesWaiti
$LN4@BytesWaiti:
  0009c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a0	0c 00 00 00	 DD	 12			; 0000000cH
  000a4	00 00 00 00	 DD	 $LN3@BytesWaiti
$LN3@BytesWaiti:
  000a8	73		 DB	 115			; 00000073H
  000a9	74		 DB	 116			; 00000074H
  000aa	61		 DB	 97			; 00000061H
  000ab	74		 DB	 116			; 00000074H
  000ac	00		 DB	 0
?BytesWaiting@CSerialPort@@QAEKXZ ENDP			; CSerialPort::BytesWaiting
_TEXT	ENDS
PUBLIC	?WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z ; CSerialPort::WaitEvent
PUBLIC	?SetMask@CSerialPort@@QAEXK@Z			; CSerialPort::SetMask
PUBLIC	?GetMask@CSerialPort@@QAEXAAK@Z			; CSerialPort::GetMask
PUBLIC	??_C@_1FI@PGIBAFNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?1??DataWaiting@CSerialPort@@QAEHK@Z@4JA ; `CSerialPort::DataWaiting'::`2'::__LINE__Var
PUBLIC	??_C@_1EI@IJFPCJHF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@ ; `string'
PUBLIC	?DataWaiting@CSerialPort@@QAEHK@Z		; CSerialPort::DataWaiting
EXTRN	__imp__WaitForSingleObject@8:PROC
;	COMDAT ??_C@_1FI@PGIBAFNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FI@PGIBAFNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'D'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, 'W', 00H, 'a', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ',', 00H, 'm', 00H, '_'
	DB	00H, 'h', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DataWaiting@CSerialPort@@QAEHK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DataWaiting@CSerialPort@@QAEHK@Z@4JA DD 025cH ; `CSerialPort::DataWaiting'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@IJFPCJHF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@
CONST	SEGMENT
??_C@_1EI@IJFPCJHF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'D'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, 'W', 00H, 'a', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ',', 00H, 'I', 00H, 's'
	DB	00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	0dH, 00H, 0aH, 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?DataWaiting@CSerialPort@@QAEHK@Z
_TEXT	SEGMENT
$T212128 = -308						; size = 8
$T212129 = -292						; size = 8
_dwBytesTransferred$211293 = -84			; size = 4
_dwEvent$ = -72						; size = 4
_bSuccess$ = -60					; size = 4
_o$ = -48						; size = 20
_dwOldMask$ = -20					; size = 4
_this$ = -8						; size = 4
_dwTimeout$ = 8						; size = 4
?DataWaiting@CSerialPort@@QAEHK@Z PROC			; CSerialPort::DataWaiting, COMDAT
; _this$ = ecx

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00013	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 605  : //   ASSERT(IsOpen());
; 606  : //   ASSERT(m_hEvent);
; 607  : 	TRACE(_T("CSerialPort::DataWaiting,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@IJFPCJHF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??DataWaiting@CSerialPort@@QAEHK@Z@4JA
  0002d	83 c0 03	 add	 eax, 3
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T212128[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 608  : 	TRACE(_T("CSerialPort::DataWaiting,m_hEvent == NULL\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@PGIBAFNH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAD?$AAa?$AAt?$AAa?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?0?$AAm?$AA_?$AAh?$AAE?$AAv?$AAe?$AAn@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??DataWaiting@CSerialPort@@QAEHK@Z@4JA
  00054	83 c0 04	 add	 eax, 4
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T212129[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 609  : 
; 610  :   //Setup to wait for incoming data
; 611  :   DWORD dwOldMask;
; 612  :   GetMask(dwOldMask);

  00071	8d 45 ec	 lea	 eax, DWORD PTR _dwOldMask$[ebp]
  00074	50		 push	 eax
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?GetMask@CSerialPort@@QAEXAAK@Z ; CSerialPort::GetMask

; 613  :   SetMask(EV_RXCHAR);

  0007d	6a 01		 push	 1
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ?SetMask@CSerialPort@@QAEXK@Z ; CSerialPort::SetMask

; 614  :    
; 615  :   //Setup the overlapped structure
; 616  :   OVERLAPPED o;
; 617  :   o.hEvent = m_hEvent;

  00087	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0008d	89 4d e0	 mov	 DWORD PTR _o$[ebp+16], ecx

; 618  : 
; 619  :   //Assume the worst;
; 620  :   BOOL bSuccess = FALSE;

  00090	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 0

; 621  : 
; 622  :   DWORD dwEvent;
; 623  :   bSuccess = WaitEvent(dwEvent, o);

  00097	8d 45 d0	 lea	 eax, DWORD PTR _o$[ebp]
  0009a	50		 push	 eax
  0009b	8d 4d b8	 lea	 ecx, DWORD PTR _dwEvent$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ?WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z ; CSerialPort::WaitEvent
  000a7	89 45 c4	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 624  :   if (!bSuccess)

  000aa	83 7d c4 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  000ae	75 34		 jne	 SHORT $LN2@DataWaitin

; 625  :   {
; 626  :     if (WaitForSingleObject(o.hEvent, dwTimeout) == WAIT_OBJECT_0)

  000b0	8b f4		 mov	 esi, esp
  000b2	8b 45 08	 mov	 eax, DWORD PTR _dwTimeout$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d e0	 mov	 ecx, DWORD PTR _o$[ebp+16]
  000b9	51		 push	 ecx
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8
  000c0	3b f4		 cmp	 esi, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	85 c0		 test	 eax, eax
  000c9	75 19		 jne	 SHORT $LN2@DataWaitin

; 627  :     {
; 628  :       DWORD dwBytesTransferred;
; 629  :       GetOverlappedResult(o, dwBytesTransferred, FALSE);

  000cb	6a 00		 push	 0
  000cd	8d 45 ac	 lea	 eax, DWORD PTR _dwBytesTransferred$211293[ebp]
  000d0	50		 push	 eax
  000d1	8d 4d d0	 lea	 ecx, DWORD PTR _o$[ebp]
  000d4	51		 push	 ecx
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	e8 00 00 00 00	 call	 ?GetOverlappedResult@CSerialPort@@QAE_NAAU_OVERLAPPED@@AAKH@Z ; CSerialPort::GetOverlappedResult

; 630  :       bSuccess = TRUE;

  000dd	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _bSuccess$[ebp], 1
$LN2@DataWaitin:

; 631  :     }
; 632  :   }
; 633  : 
; 634  :   //Reset the event mask
; 635  :   SetMask(dwOldMask);

  000e4	8b 45 ec	 mov	 eax, DWORD PTR _dwOldMask$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	e8 00 00 00 00	 call	 ?SetMask@CSerialPort@@QAEXK@Z ; CSerialPort::SetMask

; 636  : 
; 637  :   return bSuccess;

  000f0	8b 45 c4	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 638  : }

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@DataWaitin
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  0010d	3b ec		 cmp	 ebp, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
  0011a	8b ff		 npad	 2
$LN10@DataWaitin:
  0011c	04 00 00 00	 DD	 4
  00120	00 00 00 00	 DD	 $LN9@DataWaitin
$LN9@DataWaitin:
  00124	ec ff ff ff	 DD	 -20			; ffffffecH
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN5@DataWaitin
  00130	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00134	14 00 00 00	 DD	 20			; 00000014H
  00138	00 00 00 00	 DD	 $LN6@DataWaitin
  0013c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00140	04 00 00 00	 DD	 4
  00144	00 00 00 00	 DD	 $LN7@DataWaitin
  00148	ac ff ff ff	 DD	 -84			; ffffffacH
  0014c	04 00 00 00	 DD	 4
  00150	00 00 00 00	 DD	 $LN8@DataWaitin
$LN8@DataWaitin:
  00154	64		 DB	 100			; 00000064H
  00155	77		 DB	 119			; 00000077H
  00156	42		 DB	 66			; 00000042H
  00157	79		 DB	 121			; 00000079H
  00158	74		 DB	 116			; 00000074H
  00159	65		 DB	 101			; 00000065H
  0015a	73		 DB	 115			; 00000073H
  0015b	54		 DB	 84			; 00000054H
  0015c	72		 DB	 114			; 00000072H
  0015d	61		 DB	 97			; 00000061H
  0015e	6e		 DB	 110			; 0000006eH
  0015f	73		 DB	 115			; 00000073H
  00160	66		 DB	 102			; 00000066H
  00161	65		 DB	 101			; 00000065H
  00162	72		 DB	 114			; 00000072H
  00163	72		 DB	 114			; 00000072H
  00164	65		 DB	 101			; 00000065H
  00165	64		 DB	 100			; 00000064H
  00166	00		 DB	 0
$LN7@DataWaitin:
  00167	64		 DB	 100			; 00000064H
  00168	77		 DB	 119			; 00000077H
  00169	45		 DB	 69			; 00000045H
  0016a	76		 DB	 118			; 00000076H
  0016b	65		 DB	 101			; 00000065H
  0016c	6e		 DB	 110			; 0000006eH
  0016d	74		 DB	 116			; 00000074H
  0016e	00		 DB	 0
$LN6@DataWaitin:
  0016f	6f		 DB	 111			; 0000006fH
  00170	00		 DB	 0
$LN5@DataWaitin:
  00171	64		 DB	 100			; 00000064H
  00172	77		 DB	 119			; 00000077H
  00173	4f		 DB	 79			; 0000004fH
  00174	6c		 DB	 108			; 0000006cH
  00175	64		 DB	 100			; 00000064H
  00176	4d		 DB	 77			; 0000004dH
  00177	61		 DB	 97			; 00000061H
  00178	73		 DB	 115			; 00000073H
  00179	6b		 DB	 107			; 0000006bH
  0017a	00		 DB	 0
?DataWaiting@CSerialPort@@QAEHK@Z ENDP			; CSerialPort::DataWaiting
_TEXT	ENDS
PUBLIC	??_C@_1DO@MICMACCA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??WriteEx@CSerialPort@@QAEXPBXK@Z@4JA ; `CSerialPort::WriteEx'::`2'::__LINE__Var
PUBLIC	??_C@_1EA@IHGNHLGH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?WriteEx@CSerialPort@@QAEXPBXK@Z		; CSerialPort::WriteEx
EXTRN	__imp__WriteFileEx@20:PROC
EXTRN	_memset:PROC
EXTRN	??2@YAPAXIPBDH@Z:PROC				; operator new
;	COMDAT ??_C@_1DO@MICMACCA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@MICMACCA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'W', 00H, 'r', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'E', 00H, 'x', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??WriteEx@CSerialPort@@QAEXPBXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??WriteEx@CSerialPort@@QAEXPBXK@Z@4JA DD 0281H ; `CSerialPort::WriteEx'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EA@IHGNHLGH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@IHGNHLGH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'E', 00H, 'x', 00H
	DB	',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?WriteEx@CSerialPort@@QAEXPBXK@Z
_TEXT	SEGMENT
$T212138 = -268						; size = 8
$T212139 = -252						; size = 4
$T212140 = -240						; size = 4
$T212141 = -228						; size = 8
_pOverlapped$ = -20					; size = 4
_this$ = -8						; size = 4
_lpBuf$ = 8						; size = 4
_dwCount$ = 12						; size = 4
?WriteEx@CSerialPort@@QAEXPBXK@Z PROC			; CSerialPort::WriteEx, COMDAT
; _this$ = ecx

; 641  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00013	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 642  : //   ASSERT(IsOpen());
; 643  : 	TRACE(_T("CSerialPort::WriteEx,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@IHGNHLGH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAr?$AAi?$AAt?$AAe?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WriteEx@CSerialPort@@QAEXPBXK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T212138[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 644  : 
; 645  :   OVERLAPPED* pOverlapped = new OVERLAPPED;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WriteEx@CSerialPort@@QAEXPBXK@Z@4JA
  0004f	83 c0 04	 add	 eax, 4
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00058	6a 14		 push	 20			; 00000014H
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T212139[ebp], eax
  00068	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T212139[ebp]
  0006e	89 4d ec	 mov	 DWORD PTR _pOverlapped$[ebp], ecx

; 646  :   ZeroMemory(pOverlapped, sizeof(OVERLAPPED));

  00071	6a 14		 push	 20			; 00000014H
  00073	6a 00		 push	 0
  00075	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _memset
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 647  :   pOverlapped->hEvent = (HANDLE) this;

  00081	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 648  :   if (!WriteFileEx(m_hComm, lpBuf, dwCount, pOverlapped, _OnCompletion))

  0008a	8b f4		 mov	 esi, esp
  0008c	68 00 00 00 00	 push	 OFFSET ?_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z ; CSerialPort::_OnCompletion
  00091	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  0009c	52		 push	 edx
  0009d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a3	51		 push	 ecx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFileEx@20
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	85 c0		 test	 eax, eax
  000b3	75 49		 jne	 SHORT $LN2@WriteEx

; 649  :   {
; 650  :     delete pOverlapped;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  000b8	89 85 10 ff ff
	ff		 mov	 DWORD PTR $T212140[ebp], eax
  000be	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR $T212140[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ca	83 c4 04	 add	 esp, 4

; 651  :     TRACE(_T("Failed in call to WriteFileEx\n"));

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@MICMACCA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WriteEx@CSerialPort@@QAEXPBXK@Z@4JA
  000d7	83 c0 0a	 add	 eax, 10			; 0000000aH
  000da	50		 push	 eax
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000e0	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212141[ebp]
  000e6	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000f1	83 c4 08	 add	 esp, 8

; 652  :     AfxThrowSerialException();

  000f4	6a 00		 push	 0
  000f6	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000fb	83 c4 04	 add	 esp, 4
$LN2@WriteEx:

; 653  :   }
; 654  : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
?WriteEx@CSerialPort@@QAEXPBXK@Z ENDP			; CSerialPort::WriteEx
_TEXT	ENDS
PUBLIC	??_C@_1DM@KLGDPLEP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??ReadEx@CSerialPort@@QAEXPAXK@Z@4JA ; `CSerialPort::ReadEx'::`2'::__LINE__Var
PUBLIC	??_C@_1DO@LELFIHCM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?ReadEx@CSerialPort@@QAEXPAXK@Z			; CSerialPort::ReadEx
EXTRN	__imp__ReadFileEx@20:PROC
;	COMDAT ??_C@_1DM@KLGDPLEP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KLGDPLEP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'E'
	DB	00H, 'x', 00H, 0aH, 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ReadEx@CSerialPort@@QAEXPAXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ReadEx@CSerialPort@@QAEXPAXK@Z@4JA DD 0291H ; `CSerialPort::ReadEx'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@LELFIHCM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@LELFIHCM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'R'
	DB	00H, 'e', 00H, 'a', 00H, 'd', 00H, 'E', 00H, 'x', 00H, ',', 00H
	DB	'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '('
	DB	00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ReadEx@CSerialPort@@QAEXPAXK@Z
_TEXT	SEGMENT
$T212144 = -268						; size = 8
$T212145 = -252						; size = 4
$T212146 = -240						; size = 4
$T212147 = -228						; size = 8
_pOverlapped$ = -20					; size = 4
_this$ = -8						; size = 4
_lpBuf$ = 8						; size = 4
_dwCount$ = 12						; size = 4
?ReadEx@CSerialPort@@QAEXPAXK@Z PROC			; CSerialPort::ReadEx, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00013	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 658  : //   ASSERT(IsOpen());
; 659  : 	TRACE(_T("CSerialPort::ReadEx,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@LELFIHCM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAE?$AAx?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ReadEx@CSerialPort@@QAEXPAXK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T212144[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 660  : 
; 661  :   OVERLAPPED* pOverlapped = new OVERLAPPED;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ReadEx@CSerialPort@@QAEXPAXK@Z@4JA
  0004f	83 c0 04	 add	 eax, 4
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  00058	6a 14		 push	 20			; 00000014H
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T212145[ebp], eax
  00068	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T212145[ebp]
  0006e	89 4d ec	 mov	 DWORD PTR _pOverlapped$[ebp], ecx

; 662  :   ZeroMemory(pOverlapped, sizeof(OVERLAPPED));

  00071	6a 14		 push	 20			; 00000014H
  00073	6a 00		 push	 0
  00075	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _memset
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 663  :   pOverlapped->hEvent = (HANDLE) this;

  00081	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 664  :   if (!ReadFileEx(m_hComm, lpBuf, dwCount, pOverlapped, _OnCompletion))

  0008a	8b f4		 mov	 esi, esp
  0008c	68 00 00 00 00	 push	 OFFSET ?_OnCompletion@CSerialPort@@KGXKKPAU_OVERLAPPED@@@Z ; CSerialPort::_OnCompletion
  00091	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _dwCount$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR _lpBuf$[ebp]
  0009c	52		 push	 edx
  0009d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a3	51		 push	 ecx
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFileEx@20
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	85 c0		 test	 eax, eax
  000b3	75 49		 jne	 SHORT $LN2@ReadEx

; 665  :   {
; 666  :     delete pOverlapped;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _pOverlapped$[ebp]
  000b8	89 85 10 ff ff
	ff		 mov	 DWORD PTR $T212146[ebp], eax
  000be	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR $T212146[ebp]
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ca	83 c4 04	 add	 esp, 4

; 667  :     TRACE(_T("Failed in call to ReadFileEx\n"));

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@KLGDPLEP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAF?$AAi?$AAl?$AAe?$AAE?$AAx?$AA?6?$AA?$AA@
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ReadEx@CSerialPort@@QAEXPAXK@Z@4JA
  000d7	83 c0 0a	 add	 eax, 10			; 0000000aH
  000da	50		 push	 eax
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000e0	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212147[ebp]
  000e6	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000f1	83 c4 08	 add	 esp, 8

; 668  :     AfxThrowSerialException();

  000f4	6a 00		 push	 0
  000f6	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000fb	83 c4 04	 add	 esp, 4
$LN2@ReadEx:

; 669  :   }
; 670  : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
?ReadEx@CSerialPort@@QAEXPAXK@Z ENDP			; CSerialPort::ReadEx
_TEXT	ENDS
PUBLIC	??_C@_1EI@LFHKFODP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAh@ ; `string'
PUBLIC	?__LINE__Var@?1??TransmitChar@CSerialPort@@QAEXD@Z@4JA ; `CSerialPort::TransmitChar'::`2'::__LINE__Var
PUBLIC	??_C@_1EK@FINLNIPK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAh?$AAa?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@ ; `string'
PUBLIC	?TransmitChar@CSerialPort@@QAEXD@Z		; CSerialPort::TransmitChar
EXTRN	__imp__TransmitCommChar@8:PROC
;	COMDAT ??_C@_1EI@LFHKFODP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAh@
CONST	SEGMENT
??_C@_1EI@LFHKFODP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAh@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'T', 00H, 'r', 00H
	DB	'a', 00H, 'n', 00H, 's', 00H, 'm', 00H, 'i', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'C', 00H, 'h', 00H, 'a', 00H
	DB	'r', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??TransmitChar@CSerialPort@@QAEXD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??TransmitChar@CSerialPort@@QAEXD@Z@4JA DD 02a1H ; `CSerialPort::TransmitChar'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@FINLNIPK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAh?$AAa?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@
CONST	SEGMENT
??_C@_1EK@FINLNIPK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAh?$AAa?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'T'
	DB	00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'm', 00H, 'i', 00H
	DB	't', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'r', 00H, ',', 00H, 'I'
	DB	00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H
	DB	')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?TransmitChar@CSerialPort@@QAEXD@Z
_TEXT	SEGMENT
$T212150 = -232						; size = 8
$T212151 = -216						; size = 8
_this$ = -8						; size = 4
_cChar$ = 8						; size = 1
?TransmitChar@CSerialPort@@QAEXD@Z PROC			; CSerialPort::TransmitChar, COMDAT
; _this$ = ecx

; 673  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 674  : //   ASSERT(IsOpen());
; 675  : 	TRACE(_T("CSerialPort::TransmitChar,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@FINLNIPK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAh?$AAa?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??TransmitChar@CSerialPort@@QAEXD@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212150[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 676  : 
; 677  :   if (!TransmitCommChar(m_hComm, cChar))

  0004a	8b f4		 mov	 esi, esp
  0004c	0f b6 45 08	 movzx	 eax, BYTE PTR _cChar$[ebp]
  00050	50		 push	 eax
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00057	52		 push	 edx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TransmitCommChar@8
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	85 c0		 test	 eax, eax
  00067	75 31		 jne	 SHORT $LN2@TransmitCh

; 678  :   {
; 679  :     TRACE(_T("Failed in call to TransmitCommChar\n"));

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@LFHKFODP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAh@
  0006e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??TransmitChar@CSerialPort@@QAEXD@Z@4JA
  00073	83 c0 06	 add	 eax, 6
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212151[ebp]
  00082	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008d	83 c4 08	 add	 esp, 8

; 680  :     AfxThrowSerialException();

  00090	6a 00		 push	 0
  00092	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00097	83 c4 04	 add	 esp, 4
$LN2@TransmitCh:

; 681  :   }
; 682  : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?TransmitChar@CSerialPort@@QAEXD@Z ENDP			; CSerialPort::TransmitChar
_TEXT	ENDS
PUBLIC	??_C@_1EC@GJOODHBK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@ ; `string'
PUBLIC	?__LINE__Var@?1??GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA ; `CSerialPort::GetConfig'::`2'::__LINE__Var
PUBLIC	??_C@_1EE@IJGMFJPG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ ; `string'
PUBLIC	?GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z	; CSerialPort::GetConfig
EXTRN	__imp__GetCommConfig@12:PROC
;	COMDAT ??_C@_1EC@GJOODHBK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@
CONST	SEGMENT
??_C@_1EC@GJOODHBK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'C', 00H, 'o'
	DB	00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA DD 02adH ; `CSerialPort::GetConfig'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@IJGMFJPG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
CONST	SEGMENT
??_C@_1EE@IJGMFJPG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H
	DB	'i', 00H, 'g', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z
_TEXT	SEGMENT
$T212154 = -244						; size = 8
$T212155 = -228						; size = 8
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_config$ = 8						; size = 4
?GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z PROC	; CSerialPort::GetConfig, COMDAT
; _this$ = ecx

; 685  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00013	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 686  : //   ASSERT(IsOpen());
; 687  : 	TRACE(_T("CSerialPort::GetConfig,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@IJGMFJPG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T212154[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 688  : 
; 689  :   DWORD dwSize = sizeof(COMMCONFIG);

  0004a	c7 45 ec 34 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 52 ; 00000034H

; 690  :   if (!GetCommConfig(m_hComm, &config, &dwSize))

  00051	8b f4		 mov	 esi, esp
  00053	8d 45 ec	 lea	 eax, DWORD PTR _dwSize$[ebp]
  00056	50		 push	 eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _config$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommConfig@12
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	85 c0		 test	 eax, eax
  00071	75 31		 jne	 SHORT $LN2@GetConfig

; 691  :   {
; 692  :     TRACE(_T("Failed in call to GetCommConfig\n"));

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@GJOODHBK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA
  0007d	83 c0 07	 add	 eax, 7
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00086	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212155[ebp]
  0008c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00097	83 c4 08	 add	 esp, 8

; 693  :     AfxThrowSerialException();

  0009a	6a 00		 push	 0
  0009c	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000a1	83 c4 04	 add	 esp, 4
$LN2@GetConfig:

; 694  :   }
; 695  : }

  000a4	52		 push	 edx
  000a5	8b cd		 mov	 ecx, ebp
  000a7	50		 push	 eax
  000a8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@GetConfig
  000ae	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b3	58		 pop	 eax
  000b4	5a		 pop	 edx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
  000cb	90		 npad	 1
$LN6@GetConfig:
  000cc	01 00 00 00	 DD	 1
  000d0	00 00 00 00	 DD	 $LN5@GetConfig
$LN5@GetConfig:
  000d4	ec ff ff ff	 DD	 -20			; ffffffecH
  000d8	04 00 00 00	 DD	 4
  000dc	00 00 00 00	 DD	 $LN4@GetConfig
$LN4@GetConfig:
  000e0	64		 DB	 100			; 00000064H
  000e1	77		 DB	 119			; 00000077H
  000e2	53		 DB	 83			; 00000053H
  000e3	69		 DB	 105			; 00000069H
  000e4	7a		 DB	 122			; 0000007aH
  000e5	65		 DB	 101			; 00000065H
  000e6	00		 DB	 0
?GetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z ENDP	; CSerialPort::GetConfig
_TEXT	ENDS
PUBLIC	??_C@_1EC@OIIBIHDI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@ ; `string'
PUBLIC	?__LINE__Var@?1??SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA ; `CSerialPort::SetConfig'::`2'::__LINE__Var
PUBLIC	??_C@_1EE@HDCPCJOD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ ; `string'
PUBLIC	?SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z	; CSerialPort::SetConfig
EXTRN	__imp__SetCommConfig@12:PROC
;	COMDAT ??_C@_1EC@OIIBIHDI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@
CONST	SEGMENT
??_C@_1EC@OIIBIHDI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'C', 00H, 'o'
	DB	00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA DD 02baH ; `CSerialPort::SetConfig'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@HDCPCJOD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
CONST	SEGMENT
??_C@_1EE@HDCPCJOD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H
	DB	'i', 00H, 'g', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z
_TEXT	SEGMENT
$T212161 = -244						; size = 8
$T212162 = -228						; size = 8
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_config$ = 8						; size = 4
?SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z PROC	; CSerialPort::SetConfig, COMDAT
; _this$ = ecx

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00013	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 699  : //   ASSERT(IsOpen());
; 700  : 	TRACE(_T("CSerialPort::SetConfig,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@HDCPCJOD@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T212161[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 701  : 
; 702  :   DWORD dwSize = sizeof(COMMCONFIG);

  0004a	c7 45 ec 34 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 52 ; 00000034H

; 703  :   if (!SetCommConfig(m_hComm, &config, dwSize))

  00051	8b f4		 mov	 esi, esp
  00053	8b 45 ec	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00056	50		 push	 eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _config$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCommConfig@12
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	85 c0		 test	 eax, eax
  00071	75 31		 jne	 SHORT $LN2@SetConfig

; 704  :   {
; 705  :     TRACE(_T("Failed in call to SetCommConfig\n"));

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@OIIBIHDI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?6@
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z@4JA
  0007d	83 c0 07	 add	 eax, 7
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00086	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212162[ebp]
  0008c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00097	83 c4 08	 add	 esp, 8

; 706  :     AfxThrowSerialException();

  0009a	6a 00		 push	 0
  0009c	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000a1	83 c4 04	 add	 esp, 4
$LN2@SetConfig:

; 707  :   }
; 708  : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
?SetConfig@CSerialPort@@QAEXAAU_COMMCONFIG@@@Z ENDP	; CSerialPort::SetConfig
_TEXT	ENDS
PUBLIC	??_C@_1EA@NDEOBMDG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetBreak@CSerialPort@@QAEXXZ@4JA ; `CSerialPort::SetBreak'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@JOMEIDFF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ ; `string'
PUBLIC	?SetBreak@CSerialPort@@QAEXXZ			; CSerialPort::SetBreak
EXTRN	__imp__SetCommBreak@4:PROC
;	COMDAT ??_C@_1EA@NDEOBMDG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@NDEOBMDG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'B', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'k', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetBreak@CSerialPort@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetBreak@CSerialPort@@QAEXXZ@4JA DD 02c7H ; `CSerialPort::SetBreak'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@JOMEIDFF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_1EC@JOMEIDFF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, 'B', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'k', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetBreak@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
$T212165 = -232						; size = 8
$T212166 = -216						; size = 8
_this$ = -8						; size = 4
?SetBreak@CSerialPort@@QAEXXZ PROC			; CSerialPort::SetBreak, COMDAT
; _this$ = ecx

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 712  : //   ASSERT(IsOpen());
; 713  : 	TRACE(_T("CSerialPort::SetBreak,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@JOMEIDFF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetBreak@CSerialPort@@QAEXXZ@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212165[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 714  : 
; 715  :   if (!SetCommBreak(m_hComm))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCommBreak@4
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	85 c0		 test	 eax, eax
  00062	75 31		 jne	 SHORT $LN2@SetBreak

; 716  :   {
; 717  :     TRACE(_T("Failed in call to SetCommBreak\n"));

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@NDEOBMDG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?6?$AA?$AA@
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetBreak@CSerialPort@@QAEXXZ@4JA
  0006e	83 c0 06	 add	 eax, 6
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00077	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212166[ebp]
  0007d	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00088	83 c4 08	 add	 esp, 8

; 718  :     AfxThrowSerialException();

  0008b	6a 00		 push	 0
  0008d	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00092	83 c4 04	 add	 esp, 4
$LN2@SetBreak:

; 719  :   }
; 720  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
?SetBreak@CSerialPort@@QAEXXZ ENDP			; CSerialPort::SetBreak
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ClearBreak@CSerialPort@@QAEXXZ@4JA ; `CSerialPort::ClearBreak'::`2'::__LINE__Var
PUBLIC	??_C@_1EG@BLFKPLMM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	?ClearBreak@CSerialPort@@QAEXXZ			; CSerialPort::ClearBreak
EXTRN	__imp__ClearCommBreak@4:PROC
;	COMDAT ?__LINE__Var@?1??ClearBreak@CSerialPort@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ClearBreak@CSerialPort@@QAEXXZ@4JA DD 02d3H ; `CSerialPort::ClearBreak'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EG@BLFKPLMM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1EG@BLFKPLMM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'C'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'B', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 'k', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O'
	DB	00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ClearBreak@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
$T212169 = -232						; size = 8
$T212170 = -216						; size = 8
_this$ = -8						; size = 4
?ClearBreak@CSerialPort@@QAEXXZ PROC			; CSerialPort::ClearBreak, COMDAT
; _this$ = ecx

; 723  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 724  : //   ASSERT(IsOpen());
; 725  : 	TRACE(_T("CSerialPort::ClearBreak,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@BLFKPLMM@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ClearBreak@CSerialPort@@QAEXXZ@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212169[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 726  : 
; 727  :   if (!ClearCommBreak(m_hComm))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClearCommBreak@4
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	85 c0		 test	 eax, eax
  00062	75 31		 jne	 SHORT $LN2@ClearBreak

; 728  :   {
; 729  :     TRACE(_T("Failed in call to SetCommBreak\n"));

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@NDEOBMDG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?6?$AA?$AA@
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ClearBreak@CSerialPort@@QAEXXZ@4JA
  0006e	83 c0 06	 add	 eax, 6
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00077	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212170[ebp]
  0007d	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00088	83 c4 08	 add	 esp, 8

; 730  :     AfxThrowSerialException();

  0008b	6a 00		 push	 0
  0008d	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00092	83 c4 04	 add	 esp, 4
$LN2@ClearBreak:

; 731  :   }
; 732  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
?ClearBreak@CSerialPort@@QAEXXZ ENDP			; CSerialPort::ClearBreak
_TEXT	ENDS
PUBLIC	??_C@_1EE@PLDBDCDA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAC?$AAo?$AAm?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?1??ClearError@CSerialPort@@QAEXAAK@Z@4JA ; `CSerialPort::ClearError'::`2'::__LINE__Var
PUBLIC	??_C@_1EG@DBGOOPIB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	?ClearError@CSerialPort@@QAEXAAK@Z		; CSerialPort::ClearError
;	COMDAT ??_C@_1EE@PLDBDCDA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAC?$AAo?$AAm?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr@
CONST	SEGMENT
??_C@_1EE@PLDBDCDA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAC?$AAo?$AAm?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'C', 00H, 'l', 00H
	DB	'e', 00H, 'a', 00H, 'r', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm'
	DB	00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ClearError@CSerialPort@@QAEXAAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ClearError@CSerialPort@@QAEXAAK@Z@4JA DD 02dfH ; `CSerialPort::ClearError'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EG@DBGOOPIB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1EG@DBGOOPIB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'C'
	DB	00H, 'l', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O'
	DB	00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ClearError@CSerialPort@@QAEXAAK@Z
_TEXT	SEGMENT
$T212173 = -232						; size = 8
$T212174 = -216						; size = 8
_this$ = -8						; size = 4
_dwErrors$ = 8						; size = 4
?ClearError@CSerialPort@@QAEXAAK@Z PROC			; CSerialPort::ClearError, COMDAT
; _this$ = ecx

; 735  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 736  : //   ASSERT(IsOpen());
; 737  : 	TRACE(_T("CSerialPort::ClearError,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@DBGOOPIB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ClearError@CSerialPort@@QAEXAAK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212173[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 738  : 
; 739  :   if (!ClearCommError(m_hComm, &dwErrors, NULL))

  0004a	8b f4		 mov	 esi, esp
  0004c	6a 00		 push	 0
  0004e	8b 45 08	 mov	 eax, DWORD PTR _dwErrors$[ebp]
  00051	50		 push	 eax
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClearCommError@12
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	85 c0		 test	 eax, eax
  00068	75 31		 jne	 SHORT $LN2@ClearError

; 740  :   {
; 741  :     TRACE(_T("Failed in call to ClearCommError\n"));

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@PLDBDCDA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAC?$AAo?$AAm?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr@
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??ClearError@CSerialPort@@QAEXAAK@Z@4JA
  00074	83 c0 06	 add	 eax, 6
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212174[ebp]
  00083	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008e	83 c4 08	 add	 esp, 8

; 742  :     AfxThrowSerialException();

  00091	6a 00		 push	 0
  00093	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00098	83 c4 04	 add	 esp, 4
$LN2@ClearError:

; 743  :   }
; 744  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
?ClearError@CSerialPort@@QAEXAAK@Z ENDP			; CSerialPort::ClearError
_TEXT	ENDS
PUBLIC	??_C@_1FA@GDEBBLKF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAC?$AAo?$AAm?$AAm@ ; `string'
PUBLIC	??_C@_1M@PNNLCDFA@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390 ; `CSerialPort::GetDefaultConfig'::`2'::__LINE__Var
PUBLIC	?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z ; CSerialPort::GetDefaultConfig
EXTRN	__imp__GetDefaultCommConfigW@12:PROC
;	COMDAT ??_C@_1FA@GDEBBLKF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAC?$AAo?$AAm?$AAm@
CONST	SEGMENT
??_C@_1FA@GDEBBLKF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAC?$AAo?$AAm?$AAm@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'D', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l'
	DB	00H, 't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 0aH, 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PNNLCDFA@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1M@PNNLCDFA@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@ DB 'C', 00H, 'O', 00H
	DB	'M', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390
_DATA	SEGMENT
?__LINE__Var@?1??GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390 DD 02ebH ; `CSerialPort::GetDefaultConfig'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z$0
__ehfuncinfo$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
_TEXT	SEGMENT
$T212179 = -240						; size = 8
_dwSize$ = -32						; size = 4
_sPort$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_nPort$ = 8						; size = 4
_config$ = 12						; size = 4
?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z PROC ; CSerialPort::GetDefaultConfig, COMDAT

; 747  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 748  :   //Validate our parameters
; 749  :   ASSERT(nPort>0 && nPort<=255);

  0003d	83 7d 08 00	 cmp	 DWORD PTR _nPort$[ebp], 0
  00041	7e 09		 jle	 SHORT $LN4@GetDefault
  00043	81 7d 08 ff 00
	00 00		 cmp	 DWORD PTR _nPort$[ebp], 255 ; 000000ffH
  0004a	7e 18		 jle	 SHORT $LN5@GetDefault
$LN4@GetDefault:
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390
  00051	83 c0 02	 add	 eax, 2
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  0005a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005f	85 c0		 test	 eax, eax
  00061	74 01		 je	 SHORT $LN5@GetDefault
  00063	cc		 int	 3
$LN5@GetDefault:

; 750  : 
; 751  :   //Create the device name as a string
; 752  :   CString sPort;

  00064	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00067	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 753  :   sPort.Format(_T("COM%d"), nPort);

  00073	8b 45 08	 mov	 eax, DWORD PTR _nPort$[ebp]
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PNNLCDFA@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@
  0007c	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::Format
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 754  : 
; 755  :   DWORD dwSize = sizeof(COMMCONFIG);

  00088	c7 45 e0 34 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 52 ; 00000034H

; 756  :   if (!GetDefaultCommConfig(sPort, &config, &dwSize))

  0008f	8b f4		 mov	 esi, esp
  00091	8d 45 e0	 lea	 eax, DWORD PTR _dwSize$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _config$[ebp]
  00098	51		 push	 ecx
  00099	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  0009c	e8 00 00 00 00	 call	 ??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ; ATL::CSimpleStringT<wchar_t,0>::operator wchar_t const *
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDefaultCommConfigW@12
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	85 c0		 test	 eax, eax
  000b1	75 31		 jne	 SHORT $LN1@GetDefault

; 757  :   {
; 758  :     TRACE(_T("Failed in call to GetDefaultCommConfig\n"));

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@GDEBBLKF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAC?$AAo?$AAm?$AAm@
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390
  000bd	83 c0 0b	 add	 eax, 11			; 0000000bH
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000c6	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T212179[ebp]
  000cc	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000d7	83 c4 08	 add	 esp, 8

; 759  :     AfxThrowSerialException();

  000da	6a 00		 push	 0
  000dc	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000e1	83 c4 04	 add	 esp, 4
$LN1@GetDefault:

; 760  :   }
; 761  : }

  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  000ee	e8 00 00 00 00	 call	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GetDefault
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00118	3b ec		 cmp	 ebp, esp
  0011a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
  00123	90		 npad	 1
$LN11@GetDefault:
  00124	02 00 00 00	 DD	 2
  00128	00 00 00 00	 DD	 $LN10@GetDefault
$LN10@GetDefault:
  0012c	ec ff ff ff	 DD	 -20			; ffffffecH
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN7@GetDefault
  00138	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0013c	04 00 00 00	 DD	 4
  00140	00 00 00 00	 DD	 $LN8@GetDefault
$LN8@GetDefault:
  00144	64		 DB	 100			; 00000064H
  00145	77		 DB	 119			; 00000077H
  00146	53		 DB	 83			; 00000053H
  00147	69		 DB	 105			; 00000069H
  00148	7a		 DB	 122			; 0000007aH
  00149	65		 DB	 101			; 00000065H
  0014a	00		 DB	 0
$LN7@GetDefault:
  0014b	73		 DB	 115			; 00000073H
  0014c	50		 DB	 80			; 00000050H
  0014d	6f		 DB	 111			; 0000006fH
  0014e	72		 DB	 114			; 00000072H
  0014f	74		 DB	 116			; 00000074H
  00150	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
__ehhandler$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z ENDP ; CSerialPort::GetDefaultConfig
PUBLIC	?__LINE__Var@?1??SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390 ; `CSerialPort::SetDefaultConfig'::`2'::__LINE__Var
PUBLIC	?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z ; CSerialPort::SetDefaultConfig
EXTRN	__imp__SetDefaultCommConfigW@12:PROC
;	COMDAT ?__LINE__Var@?1??SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390
_DATA	SEGMENT
?__LINE__Var@?1??SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390 DD 02fcH ; `CSerialPort::SetDefaultConfig'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z$0
__ehfuncinfo$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
_TEXT	SEGMENT
$T212195 = -240						; size = 8
_dwSize$ = -32						; size = 4
_sPort$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_nPort$ = 8						; size = 4
_config$ = 12						; size = 4
?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z PROC ; CSerialPort::SetDefaultConfig, COMDAT

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 765  :   //Validate our parameters
; 766  :   ASSERT(nPort>0 && nPort<=255);

  0003d	83 7d 08 00	 cmp	 DWORD PTR _nPort$[ebp], 0
  00041	7e 09		 jle	 SHORT $LN4@SetDefault
  00043	81 7d 08 ff 00
	00 00		 cmp	 DWORD PTR _nPort$[ebp], 255 ; 000000ffH
  0004a	7e 18		 jle	 SHORT $LN5@SetDefault
$LN4@SetDefault:
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390
  00051	83 c0 02	 add	 eax, 2
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET _THIS_FILE
  0005a	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  0005f	85 c0		 test	 eax, eax
  00061	74 01		 je	 SHORT $LN5@SetDefault
  00063	cc		 int	 3
$LN5@SetDefault:

; 767  : 
; 768  :   //Create the device name as a string
; 769  :   CString sPort;

  00064	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00067	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 770  :   sPort.Format(_T("COM%d"), nPort);

  00073	8b 45 08	 mov	 eax, DWORD PTR _nPort$[ebp]
  00076	50		 push	 eax
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PNNLCDFA@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?$AA@
  0007c	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::Format
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 771  : 
; 772  :   DWORD dwSize = sizeof(COMMCONFIG);

  00088	c7 45 e0 34 00
	00 00		 mov	 DWORD PTR _dwSize$[ebp], 52 ; 00000034H

; 773  :   if (!SetDefaultCommConfig(sPort, &config, dwSize))

  0008f	8b f4		 mov	 esi, esp
  00091	8b 45 e0	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _config$[ebp]
  00098	51		 push	 ecx
  00099	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  0009c	e8 00 00 00 00	 call	 ??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ; ATL::CSimpleStringT<wchar_t,0>::operator wchar_t const *
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDefaultCommConfigW@12
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	85 c0		 test	 eax, eax
  000b1	75 31		 jne	 SHORT $LN1@SetDefault

; 774  :   {
; 775  :     TRACE(_T("Failed in call to GetDefaultCommConfig\n"));

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@GDEBBLKF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAC?$AAo?$AAm?$AAm@
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z@4JA@249df390
  000bd	83 c0 0b	 add	 eax, 11			; 0000000bH
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000c6	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T212195[ebp]
  000cc	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000d7	83 c4 08	 add	 esp, 8

; 776  :     AfxThrowSerialException();

  000da	6a 00		 push	 0
  000dc	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  000e1	83 c4 04	 add	 esp, 4
$LN1@SetDefault:

; 777  :   }
; 778  : }

  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  000ee	e8 00 00 00 00	 call	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@SetDefault
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00118	3b ec		 cmp	 ebp, esp
  0011a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c3		 ret	 0
  00123	90		 npad	 1
$LN10@SetDefault:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN9@SetDefault
$LN9@SetDefault:
  0012c	ec ff ff ff	 DD	 -20			; ffffffecH
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN7@SetDefault
$LN7@SetDefault:
  00138	73		 DB	 115			; 00000073H
  00139	50		 DB	 80			; 00000050H
  0013a	6f		 DB	 111			; 0000006fH
  0013b	72		 DB	 114			; 00000072H
  0013c	74		 DB	 116			; 00000074H
  0013d	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _sPort$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
__ehhandler$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetDefaultConfig@CSerialPort@@SAXHAAU_COMMCONFIG@@@Z ENDP ; CSerialPort::SetDefaultConfig
PUBLIC	?__LINE__Var@?1??GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z@4JA ; `CSerialPort::GetStatus'::`2'::__LINE__Var
PUBLIC	??_C@_1EE@BMDDICJL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ ; `string'
;	COMDAT ?__LINE__Var@?1??GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z@4JA DD 030dH ; `CSerialPort::GetStatus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@BMDDICJL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
CONST	SEGMENT
??_C@_1EE@BMDDICJL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'u', 00H, 's', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z
_TEXT	SEGMENT
$T212208 = -244						; size = 8
$T212209 = -228						; size = 8
_dwErrors$ = -20					; size = 4
_this$ = -8						; size = 4
_stat$ = 8						; size = 4
?GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z PROC	; CSerialPort::GetStatus, COMDAT
; _this$ = ecx

; 781  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00013	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 782  : //   ASSERT(IsOpen());
; 783  : 	TRACE(_T("CSerialPort::GetStatus,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@BMDDICJL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T212208[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 784  : 
; 785  :   DWORD dwErrors;
; 786  :   if (!ClearCommError(m_hComm, &dwErrors, &stat))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _stat$[ebp]
  0004f	50		 push	 eax
  00050	8d 4d ec	 lea	 ecx, DWORD PTR _dwErrors$[ebp]
  00053	51		 push	 ecx
  00054	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ClearCommError@12
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	85 c0		 test	 eax, eax
  0006a	75 31		 jne	 SHORT $LN2@GetStatus

; 787  :   {
; 788  :     TRACE(_T("Failed in call to ClearCommError\n"));

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@PLDBDCDA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAr?$AAC?$AAo?$AAm?$AAm?$AAE?$AAr?$AAr?$AAo?$AAr@
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z@4JA
  00076	83 c0 07	 add	 eax, 7
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007f	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212209[ebp]
  00085	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00090	83 c4 08	 add	 esp, 8

; 789  :     AfxThrowSerialException();

  00093	6a 00		 push	 0
  00095	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  0009a	83 c4 04	 add	 esp, 4
$LN2@GetStatus:

; 790  :   }
; 791  : }

  0009d	52		 push	 edx
  0009e	8b cd		 mov	 ecx, ebp
  000a0	50		 push	 eax
  000a1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@GetStatus
  000a7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ac	58		 pop	 eax
  000ad	5a		 pop	 edx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c2 04 00	 ret	 4
$LN6@GetStatus:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN5@GetStatus
$LN5@GetStatus:
  000cc	ec ff ff ff	 DD	 -20			; ffffffecH
  000d0	04 00 00 00	 DD	 4
  000d4	00 00 00 00	 DD	 $LN4@GetStatus
$LN4@GetStatus:
  000d8	64		 DB	 100			; 00000064H
  000d9	77		 DB	 119			; 00000077H
  000da	45		 DB	 69			; 00000045H
  000db	72		 DB	 114			; 00000072H
  000dc	72		 DB	 114			; 00000072H
  000dd	6f		 DB	 111			; 0000006fH
  000de	72		 DB	 114			; 00000072H
  000df	73		 DB	 115			; 00000073H
  000e0	00		 DB	 0
?GetStatus@CSerialPort@@QAEXAAU_COMSTAT@@@Z ENDP	; CSerialPort::GetStatus
_TEXT	ENDS
PUBLIC	??_C@_1EA@NNPMLPCN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA ; `CSerialPort::GetState'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@HFJADIEK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ ; `string'
EXTRN	__imp__GetCommState@8:PROC
;	COMDAT ??_C@_1EA@NNPMLPCN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@NNPMLPCN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA DD 031aH ; `CSerialPort::GetState'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@HFJADIEK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_1EC@HFJADIEK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetState@CSerialPort@@QAEXAAU_DCB@@@Z
_TEXT	SEGMENT
$T212215 = -232						; size = 8
$T212216 = -216						; size = 8
_this$ = -8						; size = 4
_dcb$ = 8						; size = 4
?GetState@CSerialPort@@QAEXAAU_DCB@@@Z PROC		; CSerialPort::GetState, COMDAT
; _this$ = ecx

; 794  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 795  : //   ASSERT(IsOpen());
; 796  : 	TRACE(_T("CSerialPort::GetState,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@HFJADIEK@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212215[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 797  : 
; 798  :   if (!GetCommState(m_hComm, &dcb))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dcb$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommState@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@GetState

; 799  :   {
; 800  :     TRACE(_T("Failed in call to GetCommState\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@NNPMLPCN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212216[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 801  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@GetState:

; 802  :   }
; 803  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?GetState@CSerialPort@@QAEXAAU_DCB@@@Z ENDP		; CSerialPort::GetState
_TEXT	ENDS
PUBLIC	??_C@_1EA@MAHEJKIJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA ; `CSerialPort::SetState'::`2'::__LINE__Var
PUBLIC	??_C@_1EC@FBPGHIGL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ ; `string'
EXTRN	__imp__SetCommState@8:PROC
;	COMDAT ??_C@_1EA@MAHEJKIJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@MAHEJKIJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'S', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA DD 0326H ; `CSerialPort::SetState'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EC@FBPGHIGL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_1EC@FBPGHIGL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetState@CSerialPort@@QAEXAAU_DCB@@@Z
_TEXT	SEGMENT
$T212219 = -232						; size = 8
$T212220 = -216						; size = 8
_this$ = -8						; size = 4
_dcb$ = 8						; size = 4
?SetState@CSerialPort@@QAEXAAU_DCB@@@Z PROC		; CSerialPort::SetState, COMDAT
; _this$ = ecx

; 806  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 807  : //   ASSERT(IsOpen());
; 808  : 	TRACE(_T("CSerialPort::SetState,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@FBPGHIGL@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212219[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 809  : 
; 810  :   if (!SetCommState(m_hComm, &dcb))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dcb$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCommState@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@SetState

; 811  :   {
; 812  :     TRACE(_T("Failed in call to SetCommState\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@MAHEJKIJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetState@CSerialPort@@QAEXAAU_DCB@@@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212220[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 813  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@SetState:

; 814  :   }
; 815  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?SetState@CSerialPort@@QAEXAAU_DCB@@@Z ENDP		; CSerialPort::SetState
_TEXT	ENDS
PUBLIC	??_C@_1EM@DPOCFIFJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AAC?$AAo?$AAm?$AAm?$AAF?$AAu?$AAn?$AAc@ ; `string'
PUBLIC	?__LINE__Var@?1??Escape@CSerialPort@@QAEXK@Z@4JA ; `CSerialPort::Escape'::`2'::__LINE__Var
PUBLIC	??_C@_1DO@BKKJGGKH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?Escape@CSerialPort@@QAEXK@Z			; CSerialPort::Escape
EXTRN	__imp__EscapeCommFunction@8:PROC
;	COMDAT ??_C@_1EM@DPOCFIFJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AAC?$AAo?$AAm?$AAm?$AAF?$AAu?$AAn?$AAc@
CONST	SEGMENT
??_C@_1EM@DPOCFIFJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AAC?$AAo?$AAm?$AAm?$AAF?$AAu?$AAn?$AAc@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'E', 00H, 's', 00H
	DB	'c', 00H, 'a', 00H, 'p', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'm'
	DB	00H, 'm', 00H, 'F', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Escape@CSerialPort@@QAEXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Escape@CSerialPort@@QAEXK@Z@4JA DD 0332H ; `CSerialPort::Escape'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@BKKJGGKH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@BKKJGGKH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'E'
	DB	00H, 's', 00H, 'c', 00H, 'a', 00H, 'p', 00H, 'e', 00H, ',', 00H
	DB	'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '('
	DB	00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Escape@CSerialPort@@QAEXK@Z
_TEXT	SEGMENT
$T212223 = -232						; size = 8
$T212224 = -216						; size = 8
_this$ = -8						; size = 4
_dwFunc$ = 8						; size = 4
?Escape@CSerialPort@@QAEXK@Z PROC			; CSerialPort::Escape, COMDAT
; _this$ = ecx

; 818  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 819  : //   ASSERT(IsOpen());
; 820  : 	TRACE(_T("CSerialPort::Escape,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@BKKJGGKH@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Escape@CSerialPort@@QAEXK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212223[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 821  : 
; 822  :   if (!EscapeCommFunction(m_hComm, dwFunc))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dwFunc$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EscapeCommFunction@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@Escape

; 823  :   {
; 824  :     TRACE(_T("Failed in call to EscapeCommFunction\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@DPOCFIFJ@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAE?$AAs?$AAc?$AAa?$AAp?$AAe?$AAC?$AAo?$AAm?$AAm?$AAF?$AAu?$AAn?$AAc@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Escape@CSerialPort@@QAEXK@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212224[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 825  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@Escape:

; 826  :   }
; 827  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?Escape@CSerialPort@@QAEXK@Z ENDP			; CSerialPort::Escape
_TEXT	ENDS
PUBLIC	?ClearDTR@CSerialPort@@QAEXXZ			; CSerialPort::ClearDTR
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearDTR@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearDTR@CSerialPort@@QAEXXZ PROC			; CSerialPort::ClearDTR, COMDAT
; _this$ = ecx

; 830  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 831  :   Escape(CLRDTR);

  00023	6a 06		 push	 6
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Escape@CSerialPort@@QAEXK@Z ; CSerialPort::Escape

; 832  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?ClearDTR@CSerialPort@@QAEXXZ ENDP			; CSerialPort::ClearDTR
_TEXT	ENDS
PUBLIC	?ClearRTS@CSerialPort@@QAEXXZ			; CSerialPort::ClearRTS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearRTS@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearRTS@CSerialPort@@QAEXXZ PROC			; CSerialPort::ClearRTS, COMDAT
; _this$ = ecx

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 836  :   Escape(CLRRTS);

  00023	6a 04		 push	 4
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Escape@CSerialPort@@QAEXK@Z ; CSerialPort::Escape

; 837  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?ClearRTS@CSerialPort@@QAEXXZ ENDP			; CSerialPort::ClearRTS
_TEXT	ENDS
PUBLIC	?SetDTR@CSerialPort@@QAEXXZ			; CSerialPort::SetDTR
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetDTR@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetDTR@CSerialPort@@QAEXXZ PROC			; CSerialPort::SetDTR, COMDAT
; _this$ = ecx

; 840  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 841  :   Escape(SETDTR);

  00023	6a 05		 push	 5
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Escape@CSerialPort@@QAEXK@Z ; CSerialPort::Escape

; 842  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?SetDTR@CSerialPort@@QAEXXZ ENDP			; CSerialPort::SetDTR
_TEXT	ENDS
PUBLIC	?SetRTS@CSerialPort@@QAEXXZ			; CSerialPort::SetRTS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetRTS@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetRTS@CSerialPort@@QAEXXZ PROC			; CSerialPort::SetRTS, COMDAT
; _this$ = ecx

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 846  :   Escape(SETRTS);

  00023	6a 03		 push	 3
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Escape@CSerialPort@@QAEXK@Z ; CSerialPort::Escape

; 847  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?SetRTS@CSerialPort@@QAEXXZ ENDP			; CSerialPort::SetRTS
_TEXT	ENDS
PUBLIC	?SetXOFF@CSerialPort@@QAEXXZ			; CSerialPort::SetXOFF
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetXOFF@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetXOFF@CSerialPort@@QAEXXZ PROC			; CSerialPort::SetXOFF, COMDAT
; _this$ = ecx

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 851  :   Escape(SETXOFF);

  00023	6a 01		 push	 1
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Escape@CSerialPort@@QAEXK@Z ; CSerialPort::Escape

; 852  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?SetXOFF@CSerialPort@@QAEXXZ ENDP			; CSerialPort::SetXOFF
_TEXT	ENDS
PUBLIC	?SetXON@CSerialPort@@QAEXXZ			; CSerialPort::SetXON
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetXON@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetXON@CSerialPort@@QAEXXZ PROC			; CSerialPort::SetXON, COMDAT
; _this$ = ecx

; 855  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 856  :   Escape(SETXON);

  00023	6a 02		 push	 2
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Escape@CSerialPort@@QAEXK@Z ; CSerialPort::Escape

; 857  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?SetXON@CSerialPort@@QAEXXZ ENDP			; CSerialPort::SetXON
_TEXT	ENDS
PUBLIC	??_C@_1EK@NOJJICPD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z@4JA ; `CSerialPort::GetProperties'::`2'::__LINE__Var
PUBLIC	??_C@_1EM@OMBDJMHN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe@ ; `string'
PUBLIC	?GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z ; CSerialPort::GetProperties
EXTRN	__imp__GetCommProperties@8:PROC
;	COMDAT ??_C@_1EK@NOJJICPD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt@
CONST	SEGMENT
??_C@_1EK@NOJJICPD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H
	DB	'e', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z@4JA DD 035cH ; `CSerialPort::GetProperties'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EM@OMBDJMHN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe@
CONST	SEGMENT
??_C@_1EM@OMBDJMHN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'e', 00H, 's', 00H, ','
	DB	00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z
_TEXT	SEGMENT
$T212239 = -232						; size = 8
$T212240 = -216						; size = 8
_this$ = -8						; size = 4
_properties$ = 8					; size = 4
?GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z PROC	; CSerialPort::GetProperties, COMDAT
; _this$ = ecx

; 860  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 861  : //   ASSERT(IsOpen());
; 862  : 	TRACE(_T("CSerialPort::GetProperties,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@OMBDJMHN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt?$AAi?$AAe?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212239[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 863  : 
; 864  :   if (!GetCommProperties(m_hComm, &properties))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _properties$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommProperties@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@GetPropert

; 865  :   {
; 866  :     TRACE(_T("Failed in call to GetCommProperties\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NOJJICPD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAP?$AAr?$AAo?$AAp?$AAe?$AAr?$AAt@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212240[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 867  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@GetPropert:

; 868  :   }
; 869  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?GetProperties@CSerialPort@@QAEXAAU_COMMPROP@@@Z ENDP	; CSerialPort::GetProperties
_TEXT	ENDS
PUBLIC	??_C@_1EM@OFHOONMF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??GetModemStatus@CSerialPort@@QAEXAAK@Z@4JA ; `CSerialPort::GetModemStatus'::`2'::__LINE__Var
PUBLIC	??_C@_1EO@CIFBHKKN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp@ ; `string'
PUBLIC	?GetModemStatus@CSerialPort@@QAEXAAK@Z		; CSerialPort::GetModemStatus
EXTRN	__imp__GetCommModemStatus@8:PROC
;	COMDAT ??_C@_1EM@OFHOONMF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt@
CONST	SEGMENT
??_C@_1EM@OFHOONMF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'M', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, 'm', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 's', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetModemStatus@CSerialPort@@QAEXAAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetModemStatus@CSerialPort@@QAEXAAK@Z@4JA DD 0368H ; `CSerialPort::GetModemStatus'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EO@CIFBHKKN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp@
CONST	SEGMENT
??_C@_1EO@CIFBHKKN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'm', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'u', 00H, 's'
	DB	00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H
	DB	'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetModemStatus@CSerialPort@@QAEXAAK@Z
_TEXT	SEGMENT
$T212243 = -232						; size = 8
$T212244 = -216						; size = 8
_this$ = -8						; size = 4
_dwModemStatus$ = 8					; size = 4
?GetModemStatus@CSerialPort@@QAEXAAK@Z PROC		; CSerialPort::GetModemStatus, COMDAT
; _this$ = ecx

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 873  : //   ASSERT(IsOpen());
; 874  : 	TRACE(_T("CSerialPort::GetModemStatus,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@CIFBHKKN@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetModemStatus@CSerialPort@@QAEXAAK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212243[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 875  : 
; 876  :   if (!GetCommModemStatus(m_hComm, &dwModemStatus))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dwModemStatus$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommModemStatus@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@GetModemSt

; 877  :   {
; 878  :     TRACE(_T("Failed in call to GetCommModemStatus\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@OFHOONMF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAo?$AAd?$AAe?$AAm?$AAS?$AAt@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetModemStatus@CSerialPort@@QAEXAAK@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212244[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 879  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@GetModemSt:

; 880  :   }
; 881  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?GetModemStatus@CSerialPort@@QAEXAAK@Z ENDP		; CSerialPort::GetModemStatus
_TEXT	ENDS
PUBLIC	??_C@_1DO@OGNKBNPO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetMask@CSerialPort@@QAEXK@Z@4JA ; `CSerialPort::SetMask'::`2'::__LINE__Var
PUBLIC	??_C@_1EA@LJINIAPO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
EXTRN	__imp__SetCommMask@8:PROC
;	COMDAT ??_C@_1DO@OGNKBNPO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@OGNKBNPO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'M', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetMask@CSerialPort@@QAEXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetMask@CSerialPort@@QAEXK@Z@4JA DD 0374H ; `CSerialPort::SetMask'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EA@LJINIAPO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LJINIAPO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, 'M', 00H, 'a', 00H, 's', 00H, 'k', 00H
	DB	',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetMask@CSerialPort@@QAEXK@Z
_TEXT	SEGMENT
$T212247 = -232						; size = 8
$T212248 = -216						; size = 8
_this$ = -8						; size = 4
_dwMask$ = 8						; size = 4
?SetMask@CSerialPort@@QAEXK@Z PROC			; CSerialPort::SetMask, COMDAT
; _this$ = ecx

; 884  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 885  : //   ASSERT(IsOpen());
; 886  : 	TRACE(_T("CSerialPort::SetMask,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@LJINIAPO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetMask@CSerialPort@@QAEXK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212247[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 887  : 
; 888  :   if (!SetCommMask(m_hComm, dwMask))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dwMask$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCommMask@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@SetMask

; 889  :   {
; 890  :     TRACE(_T("Failed in call to SetCommMask\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@OGNKBNPO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetMask@CSerialPort@@QAEXK@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212248[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 891  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@SetMask:

; 892  :   }
; 893  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?SetMask@CSerialPort@@QAEXK@Z ENDP			; CSerialPort::SetMask
_TEXT	ENDS
PUBLIC	??_C@_1DO@GGBMNAFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetMask@CSerialPort@@QAEXAAK@Z@4JA ; `CSerialPort::GetMask'::`2'::__LINE__Var
PUBLIC	??_C@_1EA@FHIPIONI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
EXTRN	__imp__GetCommMask@8:PROC
;	COMDAT ??_C@_1DO@GGBMNAFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@GGBMNAFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'M', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetMask@CSerialPort@@QAEXAAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetMask@CSerialPort@@QAEXAAK@Z@4JA DD 0380H ; `CSerialPort::GetMask'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EA@FHIPIONI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@FHIPIONI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'M', 00H, 'a', 00H, 's', 00H, 'k', 00H
	DB	',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetMask@CSerialPort@@QAEXAAK@Z
_TEXT	SEGMENT
$T212251 = -232						; size = 8
$T212252 = -216						; size = 8
_this$ = -8						; size = 4
_dwMask$ = 8						; size = 4
?GetMask@CSerialPort@@QAEXAAK@Z PROC			; CSerialPort::GetMask, COMDAT
; _this$ = ecx

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 897  : //   ASSERT(IsOpen());
; 898  : 	TRACE(_T("CSerialPort::GetMask,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EA@FHIPIONI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetMask@CSerialPort@@QAEXAAK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212251[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 899  : 
; 900  :   if (!GetCommMask(m_hComm, &dwMask))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dwMask$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommMask@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@GetMask

; 901  :   {
; 902  :     TRACE(_T("Failed in call to GetCommMask\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@GGBMNAFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAM?$AAa?$AAs?$AAk?$AA?6?$AA?$AA@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetMask@CSerialPort@@QAEXAAK@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212252[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 903  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@GetMask:

; 904  :   }
; 905  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?GetMask@CSerialPort@@QAEXAAK@Z ENDP			; CSerialPort::GetMask
_TEXT	ENDS
PUBLIC	??_C@_1EI@MHNCBKKB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAF?$AAi?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?1??Flush@CSerialPort@@QAEXXZ@4JA	; `CSerialPort::Flush'::`2'::__LINE__Var
PUBLIC	??_C@_1DM@KNJGBAIP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?Flush@CSerialPort@@QAEXXZ			; CSerialPort::Flush
EXTRN	__imp__FlushFileBuffers@4:PROC
;	COMDAT ??_C@_1EI@MHNCBKKB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAF?$AAi?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe@
CONST	SEGMENT
??_C@_1EI@MHNCBKKB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAF?$AAi?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'F', 00H, 'l', 00H
	DB	'u', 00H, 's', 00H, 'h', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Flush@CSerialPort@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Flush@CSerialPort@@QAEXXZ@4JA DD 038cH	; `CSerialPort::Flush'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@KNJGBAIP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KNJGBAIP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'F'
	DB	00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, ',', 00H, 'I', 00H
	DB	's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')'
	DB	00H, 0dH, 00H, 0aH, 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Flush@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
$T212255 = -232						; size = 8
$T212256 = -216						; size = 8
_this$ = -8						; size = 4
?Flush@CSerialPort@@QAEXXZ PROC				; CSerialPort::Flush, COMDAT
; _this$ = ecx

; 908  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 909  : //   ASSERT(IsOpen());
; 910  : 	TRACE(_T("CSerialPort::Flush,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@KNJGBAIP@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Flush@CSerialPort@@QAEXXZ@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212255[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 911  : 
; 912  :   if (!FlushFileBuffers(m_hComm))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FlushFileBuffers@4
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	85 c0		 test	 eax, eax
  00062	75 31		 jne	 SHORT $LN2@Flush

; 913  :   {
; 914  :     TRACE(_T("Failed in call to FlushFileBuffers\n"));

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@MHNCBKKB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAF?$AAl?$AAu?$AAs?$AAh?$AAF?$AAi?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe@
  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Flush@CSerialPort@@QAEXXZ@4JA
  0006e	83 c0 06	 add	 eax, 6
  00071	50		 push	 eax
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00077	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212256[ebp]
  0007d	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00088	83 c4 08	 add	 esp, 8

; 915  :     AfxThrowSerialException();

  0008b	6a 00		 push	 0
  0008d	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00092	83 c4 04	 add	 esp, 4
$LN2@Flush:

; 916  :   }
; 917  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
?Flush@CSerialPort@@QAEXXZ ENDP				; CSerialPort::Flush
_TEXT	ENDS
PUBLIC	??_C@_1DK@PDJBJJHO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Purge@CSerialPort@@QAEXK@Z@4JA	; `CSerialPort::Purge'::`2'::__LINE__Var
PUBLIC	??_C@_1DM@GMLACBOG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAP?$AAu?$AAr?$AAg?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?Purge@CSerialPort@@QAEXK@Z			; CSerialPort::Purge
EXTRN	__imp__PurgeComm@8:PROC
;	COMDAT ??_C@_1DK@PDJBJJHO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@PDJBJJHO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'P', 00H, 'u', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Purge@CSerialPort@@QAEXK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Purge@CSerialPort@@QAEXK@Z@4JA DD 0398H ; `CSerialPort::Purge'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@GMLACBOG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAP?$AAu?$AAr?$AAg?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@GMLACBOG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAP?$AAu?$AAr?$AAg?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'P'
	DB	00H, 'u', 00H, 'r', 00H, 'g', 00H, 'e', 00H, ',', 00H, 'I', 00H
	DB	's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')'
	DB	00H, 0dH, 00H, 0aH, 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Purge@CSerialPort@@QAEXK@Z
_TEXT	SEGMENT
$T212259 = -232						; size = 8
$T212260 = -216						; size = 8
_this$ = -8						; size = 4
_dwFlags$ = 8						; size = 4
?Purge@CSerialPort@@QAEXK@Z PROC			; CSerialPort::Purge, COMDAT
; _this$ = ecx

; 920  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 921  : //   ASSERT(IsOpen());
; 922  : 	TRACE(_T("CSerialPort::Purge,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@GMLACBOG@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAP?$AAu?$AAr?$AAg?$AAe?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Purge@CSerialPort@@QAEXK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212259[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 923  : 
; 924  :   if (!PurgeComm(m_hComm, dwFlags))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PurgeComm@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@Purge

; 925  :   {
; 926  :     TRACE(_T("Failed in call to PurgeComm\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@PDJBJJHO@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAP?$AAu?$AAr?$AAg?$AAe?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Purge@CSerialPort@@QAEXK@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212260[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 927  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@Purge:

; 928  :   }
; 929  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?Purge@CSerialPort@@QAEXK@Z ENDP			; CSerialPort::Purge
_TEXT	ENDS
PUBLIC	?TerminateOutstandingWrites@CSerialPort@@QAEXXZ	; CSerialPort::TerminateOutstandingWrites
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TerminateOutstandingWrites@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?TerminateOutstandingWrites@CSerialPort@@QAEXXZ PROC	; CSerialPort::TerminateOutstandingWrites, COMDAT
; _this$ = ecx

; 932  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 933  :   Purge(PURGE_TXABORT);

  00023	6a 01		 push	 1
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Purge@CSerialPort@@QAEXK@Z ; CSerialPort::Purge

; 934  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?TerminateOutstandingWrites@CSerialPort@@QAEXXZ ENDP	; CSerialPort::TerminateOutstandingWrites
_TEXT	ENDS
PUBLIC	?TerminateOutstandingReads@CSerialPort@@QAEXXZ	; CSerialPort::TerminateOutstandingReads
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TerminateOutstandingReads@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?TerminateOutstandingReads@CSerialPort@@QAEXXZ PROC	; CSerialPort::TerminateOutstandingReads, COMDAT
; _this$ = ecx

; 937  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 938  :   Purge(PURGE_RXABORT);

  00023	6a 02		 push	 2
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Purge@CSerialPort@@QAEXK@Z ; CSerialPort::Purge

; 939  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?TerminateOutstandingReads@CSerialPort@@QAEXXZ ENDP	; CSerialPort::TerminateOutstandingReads
_TEXT	ENDS
PUBLIC	?ClearWriteBuffer@CSerialPort@@QAEXXZ		; CSerialPort::ClearWriteBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearWriteBuffer@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearWriteBuffer@CSerialPort@@QAEXXZ PROC		; CSerialPort::ClearWriteBuffer, COMDAT
; _this$ = ecx

; 942  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 943  :   Purge(PURGE_TXCLEAR);

  00023	6a 04		 push	 4
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Purge@CSerialPort@@QAEXK@Z ; CSerialPort::Purge

; 944  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?ClearWriteBuffer@CSerialPort@@QAEXXZ ENDP		; CSerialPort::ClearWriteBuffer
_TEXT	ENDS
PUBLIC	?ClearReadBuffer@CSerialPort@@QAEXXZ		; CSerialPort::ClearReadBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearReadBuffer@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearReadBuffer@CSerialPort@@QAEXXZ PROC		; CSerialPort::ClearReadBuffer, COMDAT
; _this$ = ecx

; 947  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 948  :   Purge(PURGE_RXCLEAR);

  00023	6a 08		 push	 8
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?Purge@CSerialPort@@QAEXK@Z ; CSerialPort::Purge

; 949  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?ClearReadBuffer@CSerialPort@@QAEXXZ ENDP		; CSerialPort::ClearReadBuffer
_TEXT	ENDS
PUBLIC	??_C@_1DK@KHMFGKGC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Setup@CSerialPort@@QAEXKK@Z@4JA ; `CSerialPort::Setup'::`2'::__LINE__Var
PUBLIC	??_C@_1DM@OKMCLGLO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
PUBLIC	?Setup@CSerialPort@@QAEXKK@Z			; CSerialPort::Setup
EXTRN	__imp__SetupComm@12:PROC
;	COMDAT ??_C@_1DK@KHMFGKGC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@KHMFGKGC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'u', 00H, 'p', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Setup@CSerialPort@@QAEXKK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Setup@CSerialPort@@QAEXKK@Z@4JA DD 03b8H ; `CSerialPort::Setup'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@OKMCLGLO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@OKMCLGLO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, 'u', 00H, 'p', 00H, ',', 00H, 'I', 00H
	DB	's', 00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')'
	DB	00H, 0dH, 00H, 0aH, 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Setup@CSerialPort@@QAEXKK@Z
_TEXT	SEGMENT
$T212271 = -232						; size = 8
$T212272 = -216						; size = 8
_this$ = -8						; size = 4
_dwInQueue$ = 8						; size = 4
_dwOutQueue$ = 12					; size = 4
?Setup@CSerialPort@@QAEXKK@Z PROC			; CSerialPort::Setup, COMDAT
; _this$ = ecx

; 952  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 953  : //   ASSERT(IsOpen());
; 954  : 	TRACE(_T("CSerialPort::Setup,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@OKMCLGLO@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAu?$AAp?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Setup@CSerialPort@@QAEXKK@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212271[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 955  : 
; 956  :   if (!SetupComm(m_hComm, dwInQueue, dwOutQueue))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _dwOutQueue$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _dwInQueue$[ebp]
  00053	51		 push	 ecx
  00054	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00057	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetupComm@12
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	85 c0		 test	 eax, eax
  0006a	75 31		 jne	 SHORT $LN2@Setup

; 957  :   {
; 958  :     TRACE(_T("Failed in call to SetupComm\n"));

  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@KHMFGKGC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAo?$AAm?$AAm?$AA?6?$AA?$AA@
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??Setup@CSerialPort@@QAEXKK@Z@4JA
  00076	83 c0 06	 add	 eax, 6
  00079	50		 push	 eax
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007f	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212272[ebp]
  00085	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00090	83 c4 08	 add	 esp, 8

; 959  :     AfxThrowSerialException();

  00093	6a 00		 push	 0
  00095	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  0009a	83 c4 04	 add	 esp, 4
$LN2@Setup:

; 960  :   }
; 961  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?Setup@CSerialPort@@QAEXKK@Z ENDP			; CSerialPort::Setup
_TEXT	ENDS
PUBLIC	??_C@_1EG@JAEMNGIN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA ; `CSerialPort::SetTimeouts'::`2'::__LINE__Var
PUBLIC	??_C@_1EI@LKKJEGBB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@ ; `string'
PUBLIC	?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::SetTimeouts
EXTRN	__imp__SetCommTimeouts@8:PROC
;	COMDAT ??_C@_1EG@JAEMNGIN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@
CONST	SEGMENT
??_C@_1EG@JAEMNGIN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA DD 03c4H ; `CSerialPort::SetTimeouts'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@LKKJEGBB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@
CONST	SEGMENT
??_C@_1EI@LKKJEGBB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 's', 00H, ',', 00H, 'I', 00H, 's'
	DB	00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	0dH, 00H, 0aH, 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z
_TEXT	SEGMENT
$T212275 = -232						; size = 8
$T212276 = -216						; size = 8
_this$ = -8						; size = 4
_timeouts$ = 8						; size = 4
?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z PROC	; CSerialPort::SetTimeouts, COMDAT
; _this$ = ecx

; 964  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 965  : //   ASSERT(IsOpen());
; 966  : 	TRACE(_T("CSerialPort::SetTimeouts,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@LKKJEGBB@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212275[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 967  : 
; 968  :   if (!SetCommTimeouts(m_hComm, &timeouts))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _timeouts$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCommTimeouts@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@SetTimeout

; 969  :   {
; 970  :     TRACE(_T("Failed in call to SetCommTimeouts\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@JAEMNGIN@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212276[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 971  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@SetTimeout:

; 972  :   }
; 973  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ENDP	; CSerialPort::SetTimeouts
_TEXT	ENDS
PUBLIC	??_C@_1EG@CHPDILPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA ; `CSerialPort::GetTimeouts'::`2'::__LINE__Var
PUBLIC	??_C@_1EI@PKDIOCI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@ ; `string'
PUBLIC	?GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::GetTimeouts
EXTRN	__imp__GetCommTimeouts@8:PROC
;	COMDAT ??_C@_1EG@CHPDILPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@
CONST	SEGMENT
??_C@_1EG@CHPDILPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA DD 03d0H ; `CSerialPort::GetTimeouts'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@PKDIOCI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@
CONST	SEGMENT
??_C@_1EI@PKDIOCI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'G'
	DB	00H, 'e', 00H, 't', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, 's', 00H, ',', 00H, 'I', 00H, 's'
	DB	00H, 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	0dH, 00H, 0aH, 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z
_TEXT	SEGMENT
$T212279 = -232						; size = 8
$T212280 = -216						; size = 8
_this$ = -8						; size = 4
_timeouts$ = 8						; size = 4
?GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z PROC	; CSerialPort::GetTimeouts, COMDAT
; _this$ = ecx

; 976  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 977  : //   ASSERT(IsOpen());
; 978  : 	TRACE(_T("CSerialPort::GetTimeouts,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@PKDIOCI@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAs?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA
  0002d	83 c0 02	 add	 eax, 2
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212279[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 979  : 
; 980  :   if (!GetCommTimeouts(m_hComm, &timeouts))

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 45 08	 mov	 eax, DWORD PTR _timeouts$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00056	52		 push	 edx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCommTimeouts@8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 31		 jne	 SHORT $LN2@GetTimeout

; 981  :   {
; 982  :     TRACE(_T("Failed in call to GetCommTimeouts\n"));

  00068	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@CHPDILPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt@
  0006d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z@4JA
  00072	83 c0 06	 add	 eax, 6
  00075	50		 push	 eax
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0007b	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212280[ebp]
  00081	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0008c	83 c4 08	 add	 esp, 8

; 983  :     AfxThrowSerialException();

  0008f	6a 00		 push	 0
  00091	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00096	83 c4 04	 add	 esp, 4
$LN2@GetTimeout:

; 984  :   }
; 985  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
?GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ENDP	; CSerialPort::GetTimeouts
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Set0Timeout@CSerialPort@@QAEXXZ		; CSerialPort::Set0Timeout
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Set0Timeout@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_Timeouts$ = -40					; size = 20
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Set0Timeout@CSerialPort@@QAEXXZ PROC			; CSerialPort::Set0Timeout, COMDAT
; _this$ = ecx

; 988  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 989  :   COMMTIMEOUTS Timeouts;
; 990  :   ZeroMemory(&Timeouts, sizeof(COMMTIMEOUTS));

  0002d	6a 14		 push	 20			; 00000014H
  0002f	6a 00		 push	 0
  00031	8d 45 d8	 lea	 eax, DWORD PTR _Timeouts$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 _memset
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 991  :   Timeouts.ReadIntervalTimeout = MAXDWORD;

  0003d	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _Timeouts$[ebp], -1

; 992  :   SetTimeouts(Timeouts);

  00044	8d 45 d8	 lea	 eax, DWORD PTR _Timeouts$[ebp]
  00047	50		 push	 eax
  00048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::SetTimeouts

; 993  : }

  00050	52		 push	 edx
  00051	8b cd		 mov	 ecx, ebp
  00053	50		 push	 eax
  00054	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Set0Timeou
  0005a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005f	58		 pop	 eax
  00060	5a		 pop	 edx
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00067	33 cd		 xor	 ecx, ebp
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
  0007f	90		 npad	 1
$LN5@Set0Timeou:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN4@Set0Timeou
$LN4@Set0Timeou:
  00088	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0008c	14 00 00 00	 DD	 20			; 00000014H
  00090	00 00 00 00	 DD	 $LN3@Set0Timeou
$LN3@Set0Timeou:
  00094	54		 DB	 84			; 00000054H
  00095	69		 DB	 105			; 00000069H
  00096	6d		 DB	 109			; 0000006dH
  00097	65		 DB	 101			; 00000065H
  00098	6f		 DB	 111			; 0000006fH
  00099	75		 DB	 117			; 00000075H
  0009a	74		 DB	 116			; 00000074H
  0009b	73		 DB	 115			; 00000073H
  0009c	00		 DB	 0
?Set0Timeout@CSerialPort@@QAEXXZ ENDP			; CSerialPort::Set0Timeout
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Set0WriteTimeout@CSerialPort@@QAEXXZ		; CSerialPort::Set0WriteTimeout
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Set0WriteTimeout@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_Timeouts$ = -40					; size = 20
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Set0WriteTimeout@CSerialPort@@QAEXXZ PROC		; CSerialPort::Set0WriteTimeout, COMDAT
; _this$ = ecx

; 996  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 997  :   COMMTIMEOUTS Timeouts;
; 998  :   GetTimeouts(Timeouts);

  0002d	8d 45 d8	 lea	 eax, DWORD PTR _Timeouts$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::GetTimeouts

; 999  :   Timeouts.WriteTotalTimeoutMultiplier = 0;

  00039	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _Timeouts$[ebp+12], 0

; 1000 :   Timeouts.WriteTotalTimeoutConstant = 0;

  00040	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Timeouts$[ebp+16], 0

; 1001 :   SetTimeouts(Timeouts);

  00047	8d 45 d8	 lea	 eax, DWORD PTR _Timeouts$[ebp]
  0004a	50		 push	 eax
  0004b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::SetTimeouts

; 1002 : }

  00053	52		 push	 edx
  00054	8b cd		 mov	 ecx, ebp
  00056	50		 push	 eax
  00057	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Set0WriteT
  0005d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00062	58		 pop	 eax
  00063	5a		 pop	 edx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
  00082	8b ff		 npad	 2
$LN5@Set0WriteT:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@Set0WriteT
$LN4@Set0WriteT:
  0008c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00090	14 00 00 00	 DD	 20			; 00000014H
  00094	00 00 00 00	 DD	 $LN3@Set0WriteT
$LN3@Set0WriteT:
  00098	54		 DB	 84			; 00000054H
  00099	69		 DB	 105			; 00000069H
  0009a	6d		 DB	 109			; 0000006dH
  0009b	65		 DB	 101			; 00000065H
  0009c	6f		 DB	 111			; 0000006fH
  0009d	75		 DB	 117			; 00000075H
  0009e	74		 DB	 116			; 00000074H
  0009f	73		 DB	 115			; 00000073H
  000a0	00		 DB	 0
?Set0WriteTimeout@CSerialPort@@QAEXXZ ENDP		; CSerialPort::Set0WriteTimeout
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?Set0ReadTimeout@CSerialPort@@QAEXXZ		; CSerialPort::Set0ReadTimeout
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Set0ReadTimeout@CSerialPort@@QAEXXZ
_TEXT	SEGMENT
_Timeouts$ = -40					; size = 20
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Set0ReadTimeout@CSerialPort@@QAEXXZ PROC		; CSerialPort::Set0ReadTimeout, COMDAT
; _this$ = ecx

; 1005 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00013	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1006 :   COMMTIMEOUTS Timeouts;
; 1007 :   GetTimeouts(Timeouts);

  0002d	8d 45 d8	 lea	 eax, DWORD PTR _Timeouts$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?GetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::GetTimeouts

; 1008 :   Timeouts.ReadIntervalTimeout = MAXDWORD;

  00039	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _Timeouts$[ebp], -1

; 1009 :   Timeouts.ReadTotalTimeoutMultiplier = 0;

  00040	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Timeouts$[ebp+4], 0

; 1010 :   Timeouts.ReadTotalTimeoutConstant = 0;

  00047	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _Timeouts$[ebp+8], 0

; 1011 :   SetTimeouts(Timeouts);

  0004e	8d 45 d8	 lea	 eax, DWORD PTR _Timeouts$[ebp]
  00051	50		 push	 eax
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?SetTimeouts@CSerialPort@@QAEXAAU_COMMTIMEOUTS@@@Z ; CSerialPort::SetTimeouts

; 1012 : }

  0005a	52		 push	 edx
  0005b	8b cd		 mov	 ecx, ebp
  0005d	50		 push	 eax
  0005e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Set0ReadTi
  00064	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00069	58		 pop	 eax
  0006a	5a		 pop	 edx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00071	33 cd		 xor	 ecx, ebp
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
  00089	8d 49 00	 npad	 3
$LN5@Set0ReadTi:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@Set0ReadTi
$LN4@Set0ReadTi:
  00094	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00098	14 00 00 00	 DD	 20			; 00000014H
  0009c	00 00 00 00	 DD	 $LN3@Set0ReadTi
$LN3@Set0ReadTi:
  000a0	54		 DB	 84			; 00000054H
  000a1	69		 DB	 105			; 00000069H
  000a2	6d		 DB	 109			; 0000006dH
  000a3	65		 DB	 101			; 00000065H
  000a4	6f		 DB	 111			; 0000006fH
  000a5	75		 DB	 117			; 00000075H
  000a6	74		 DB	 116			; 00000074H
  000a7	73		 DB	 115			; 00000073H
  000a8	00		 DB	 0
?Set0ReadTimeout@CSerialPort@@QAEXXZ ENDP		; CSerialPort::Set0ReadTimeout
_TEXT	ENDS
PUBLIC	??_C@_1EC@HMHLCICG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?6@ ; `string'
PUBLIC	??_C@_1FO@FFDGKEGJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?1??WaitEvent@CSerialPort@@QAE_NAAK@Z@4JA ; `CSerialPort::WaitEvent'::`2'::__LINE__Var
PUBLIC	??_C@_1EE@CBNJNNHE@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ ; `string'
PUBLIC	?WaitEvent@CSerialPort@@QAE_NAAK@Z		; CSerialPort::WaitEvent
EXTRN	__imp__WaitCommEvent@12:PROC
;	COMDAT ??_C@_1EC@HMHLCICG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?6@
CONST	SEGMENT
??_C@_1EC@HMHLCICG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?6@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'W', 00H, 'a', 00H
	DB	'i', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'E'
	DB	00H, 'v', 00H, 'e', 00H, 'n', 00H, 't', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@FFDGKEGJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@
CONST	SEGMENT
??_C@_1FO@FFDGKEGJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ',', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'O'
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a', 00H, 'p', 00H
	DB	'p', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'T', 00H, 'R', 00H, 'U', 00H, 'E', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAE_NAAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??WaitEvent@CSerialPort@@QAE_NAAK@Z@4JA DD 03f7H ; `CSerialPort::WaitEvent'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@CBNJNNHE@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
CONST	SEGMENT
??_C@_1EE@CBNJNNHE@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ',', 00H, 'I', 00H, 's', 00H, 'O', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, '(', 00H, ')', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?WaitEvent@CSerialPort@@QAE_NAAK@Z
_TEXT	SEGMENT
$T212301 = -248						; size = 8
$T212302 = -232						; size = 8
$T212303 = -216						; size = 8
_this$ = -8						; size = 4
_dwMask$ = 8						; size = 4
?WaitEvent@CSerialPort@@QAE_NAAK@Z PROC			; CSerialPort::WaitEvent, COMDAT
; _this$ = ecx

; 1015 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1016 : //   ASSERT(IsOpen());
; 1017 : //   ASSERT(!m_bOverlapped);
; 1018 : 	TRACE(_T("CSerialPort::WaitEvent,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@CBNJNNHE@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAE_NAAK@Z@4JA
  0002d	83 c0 03	 add	 eax, 3
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T212301[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 1019 : 	TRACE(_T("CSerialPort::WaitEvent,m_bOverlapped == TRUE\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@FFDGKEGJ@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAE_NAAK@Z@4JA
  00054	83 c0 04	 add	 eax, 4
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T212302[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 1020 : 
; 1021 :   if (!WaitCommEvent(m_hComm, &dwMask, NULL))

  00071	8b f4		 mov	 esi, esp
  00073	6a 00		 push	 0
  00075	8b 45 08	 mov	 eax, DWORD PTR _dwMask$[ebp]
  00078	50		 push	 eax
  00079	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	52		 push	 edx
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitCommEvent@12
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	85 c0		 test	 eax, eax
  0008f	75 2d		 jne	 SHORT $LN2@WaitEvent

; 1022 :   {
; 1023 :     TRACE(_T("Failed in call to WaitCommEvent\n"));

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@HMHLCICG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?6@
  00096	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAE_NAAK@Z@4JA
  0009b	83 c0 08	 add	 eax, 8
  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000a4	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T212303[ebp]
  000aa	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000b5	83 c4 08	 add	 esp, 8

; 1024 :     //AfxThrowSerialException();
; 1025 : 	return false;

  000b8	32 c0		 xor	 al, al
  000ba	eb 04		 jmp	 SHORT $LN3@WaitEvent

; 1026 :   }
; 1027 :   else

  000bc	eb 02		 jmp	 SHORT $LN3@WaitEvent
$LN2@WaitEvent:

; 1028 :     return true;

  000be	b0 01		 mov	 al, 1
$LN3@WaitEvent:

; 1029 : 
; 1030 : }

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000c9	3b ec		 cmp	 ebp, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
?WaitEvent@CSerialPort@@QAE_NAAK@Z ENDP			; CSerialPort::WaitEvent
_TEXT	ENDS
PUBLIC	??_C@_1GG@KFOGCDID@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@ ; `string'
PUBLIC	??_C@_1GA@CNBBMPCF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA ; `CSerialPort::WaitEvent'::`2'::__LINE__Var
;	COMDAT ??_C@_1GG@KFOGCDID@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@
CONST	SEGMENT
??_C@_1GG@KFOGCDID@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ',', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H
	DB	'.', 00H, 'h', 00H, 'E', 00H, 'v', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@CNBBMPCF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@
CONST	SEGMENT
??_C@_1GA@CNBBMPCF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@ DB 'C'
	DB	00H, 'S', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'P', 00H, 'o', 00H, 'r', 00H, 't', 00H, ':', 00H, ':', 00H, 'W'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, 'E', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ',', 00H, 'm', 00H, '_', 00H, 'b', 00H, 'O'
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a', 00H, 'p', 00H
	DB	'p', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA DD 0409H ; `CSerialPort::WaitEvent'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z
_TEXT	SEGMENT
$T212306 = -276						; size = 8
$T212307 = -260						; size = 8
$T212308 = -244						; size = 8
$T212309 = -228						; size = 8
_bSuccess$ = -20					; size = 4
_this$ = -8						; size = 4
_dwMask$ = 8						; size = 4
_overlapped$ = 12					; size = 4
?WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z PROC	; CSerialPort::WaitEvent, COMDAT
; _this$ = ecx

; 1033 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00013	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1034 : //   ASSERT(IsOpen());
; 1035 : //   ASSERT(m_bOverlapped);
; 1036 : //   ASSERT(overlapped.hEvent);
; 1037 :   TRACE(_T("CSerialPort::WaitEvent,IsOpen()\r\n"));

  00023	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@CBNJNNHE@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAI?$AAs?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN@
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA
  0002d	83 c0 04	 add	 eax, 4
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00036	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T212306[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00047	83 c4 08	 add	 esp, 8

; 1038 :   TRACE(_T("CSerialPort::WaitEvent,m_bOverlapped == FALSE\r\n"));

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_1GA@CNBBMPCF@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAm?$AA_?$AAb?$AAO?$AAv?$AAe?$AAr?$AAl?$AAa@
  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA
  00054	83 c0 05	 add	 eax, 5
  00057	50		 push	 eax
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  0005d	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T212307[ebp]
  00063	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  0006e	83 c4 08	 add	 esp, 8

; 1039 :   TRACE(_T("CSerialPort::WaitEvent,overlapped.hEvent == NULL\r\n"));

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_1GG@KFOGCDID@?$AAC?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?0?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe@
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA
  0007b	83 c0 06	 add	 eax, 6
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  00084	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T212308[ebp]
  0008a	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00095	83 c4 08	 add	 esp, 8

; 1040 : 
; 1041 :   BOOL bSuccess = WaitCommEvent(m_hComm, &dwMask, &overlapped);

  00098	8b f4		 mov	 esi, esp
  0009a	8b 45 0c	 mov	 eax, DWORD PTR _overlapped$[ebp]
  0009d	50		 push	 eax
  0009e	8b 4d 08	 mov	 ecx, DWORD PTR _dwMask$[ebp]
  000a1	51		 push	 ecx
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000a8	50		 push	 eax
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitCommEvent@12
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	89 45 ec	 mov	 DWORD PTR _bSuccess$[ebp], eax

; 1042 :   if (!bSuccess)

  000b9	83 7d ec 00	 cmp	 DWORD PTR _bSuccess$[ebp], 0
  000bd	75 47		 jne	 SHORT $LN2@WaitEvent@2

; 1043 :   {
; 1044 :     if (GetLastError() != ERROR_IO_PENDING)

  000bf	8b f4		 mov	 esi, esp
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000c7	3b f4		 cmp	 esi, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000d3	74 31		 je	 SHORT $LN2@WaitEvent@2

; 1045 :     {
; 1046 :       TRACE(_T("Failed in call to WaitCommEvent\n"));

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@HMHLCICG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAt?$AAo?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAC?$AAo?$AAm?$AAm?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?6@
  000da	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?1??WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z@4JA
  000df	83 c0 0d	 add	 eax, 13			; 0000000dH
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@PACLAOLH@e?3?2cz?2vs?2dvicectrldlg_new_signal@
  000e8	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR $T212309[ebp]
  000ee	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  000f9	83 c4 08	 add	 esp, 8

; 1047 :       AfxThrowSerialException();

  000fc	6a 00		 push	 0
  000fe	e8 00 00 00 00	 call	 ?AfxThrowSerialException@@YAXK@Z ; AfxThrowSerialException
  00103	83 c4 04	 add	 esp, 4
$LN2@WaitEvent@2:

; 1048 :     }
; 1049 :   }
; 1050 : 
; 1051 :   return bSuccess;

  00106	8b 45 ec	 mov	 eax, DWORD PTR _bSuccess$[ebp]

; 1052 : }

  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  00112	3b ec		 cmp	 ebp, esp
  00114	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 08 00	 ret	 8
?WaitEvent@CSerialPort@@QAEHAAKAAU_OVERLAPPED@@@Z ENDP	; CSerialPort::WaitEvent
_TEXT	ENDS
PUBLIC	?FormatV@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXPB_WPAD@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::FormatV
PUBLIC	??_C@_1JG@ONLNNLHA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	??_C@_1DM@KPGCKOJB@?$AAA?$AAt?$AAl?$AAI?$AAs?$AAV?$AAa?$AAl?$AAi?$AAd?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$CI?$AA?5?$AAp?$AAs?$AAz?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	?AtlIsValidString@ATL@@YAHPB_WI@Z		; ATL::AtlIsValidString
EXTRN	__CrtDbgReportW:PROC
;	COMDAT ??_C@_1JG@ONLNNLHA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\cstringt.h
CONST	SEGMENT
??_C@_1JG@ONLNNLHA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H
	DB	'v', 00H, 'c', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'c', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KPGCKOJB@?$AAA?$AAt?$AAl?$AAI?$AAs?$AAV?$AAa?$AAl?$AAi?$AAd?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$CI?$AA?5?$AAp?$AAs?$AAz?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@KPGCKOJB@?$AAA?$AAt?$AAl?$AAI?$AAs?$AAV?$AAa?$AAl?$AAi?$AAd?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$CI?$AA?5?$AAp?$AAs?$AAz?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$CJ?$AA?$AA@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'I', 00H, 's', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '(', 00H, ' ', 00H, 'p', 00H, 's', 00H
	DB	'z', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, ' ', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ
_TEXT	SEGMENT
_argList$ = -8						; size = 4
_this$ = 8						; size = 4
_pszFormat$ = 12					; size = 4
?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::Format, COMDAT

; 2603 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2604 : 	ATLASSERT( AtlIsValidString( pszFormat ) );

  0001e	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00023	8b 45 0c	 mov	 eax, DWORD PTR _pszFormat$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ?AtlIsValidString@ATL@@YAHPB_WI@Z ; ATL::AtlIsValidString
  0002c	83 c4 08	 add	 esp, 8
  0002f	85 c0		 test	 eax, eax
  00031	75 21		 jne	 SHORT $LN3@Format
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@KPGCKOJB@?$AAA?$AAt?$AAl?$AAI?$AAs?$AAV?$AAa?$AAl?$AAi?$AAd?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$CI?$AA?5?$AAp?$AAs?$AAz?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$CJ?$AA?$AA@
  00038	6a 00		 push	 0
  0003a	68 2c 0a 00 00	 push	 2604			; 00000a2cH
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1JG@ONLNNLHA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 01		 jne	 SHORT $LN3@Format
  00053	cc		 int	 3
$LN3@Format:

; 2605 : 
; 2606 : 	va_list argList;
; 2607 : 	va_start( argList, pszFormat );

  00054	8d 45 10	 lea	 eax, DWORD PTR _pszFormat$[ebp+4]
  00057	89 45 f8	 mov	 DWORD PTR _argList$[ebp], eax

; 2608 : 	FormatV( pszFormat, argList );

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _argList$[ebp]
  0005d	50		 push	 eax
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFormat$[ebp]
  00061	51		 push	 ecx
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?FormatV@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXPB_WPAD@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::FormatV

; 2609 : 	va_end( argList );

  0006a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _argList$[ebp], 0

; 2610 : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?Format@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::Format
_TEXT	ENDS
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength
PUBLIC	?Format@?$ChTraitsCRT@_W@ATL@@SAHPA_WIPB_WPAD@Z	; ATL::ChTraitsCRT<wchar_t>::Format
PUBLIC	?GetFormattedLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WPAD@Z ; ATL::ChTraitsCRT<wchar_t>::GetFormattedLength
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FormatV@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXPB_WPAD@Z
_TEXT	SEGMENT
_pszBuffer$ = -32					; size = 4
_nLength$ = -20						; size = 4
_this$ = -8						; size = 4
_pszFormat$ = 8						; size = 4
_args$ = 12						; size = 4
?FormatV@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXPB_WPAD@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::FormatV, COMDAT
; _this$ = ecx

; 2132 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2133 : 		ATLASSERT( AtlIsValidString( pszFormat ) );

  00023	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00028	8b 45 08	 mov	 eax, DWORD PTR _pszFormat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?AtlIsValidString@ATL@@YAHPB_WI@Z ; ATL::AtlIsValidString
  00031	83 c4 08	 add	 esp, 8
  00034	85 c0		 test	 eax, eax
  00036	75 21		 jne	 SHORT $LN5@FormatV
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_1DM@KPGCKOJB@?$AAA?$AAt?$AAl?$AAI?$AAs?$AAV?$AAa?$AAl?$AAi?$AAd?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?$CI?$AA?5?$AAp?$AAs?$AAz?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AA?$CJ?$AA?$AA@
  0003d	6a 00		 push	 0
  0003f	68 55 08 00 00	 push	 2133			; 00000855H
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1JG@ONLNNLHA@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  00049	6a 02		 push	 2
  0004b	e8 00 00 00 00	 call	 __CrtDbgReportW
  00050	83 c4 14	 add	 esp, 20			; 00000014H
  00053	83 f8 01	 cmp	 eax, 1
  00056	75 01		 jne	 SHORT $LN5@FormatV
  00058	cc		 int	 3
$LN5@FormatV:

; 2134 : 		if(pszFormat == NULL)

  00059	83 7d 08 00	 cmp	 DWORD PTR _pszFormat$[ebp], 0
  0005d	75 0a		 jne	 SHORT $LN2@FormatV

; 2135 : 			AtlThrow(E_INVALIDARG);

  0005f	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00064	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@FormatV:

; 2136 : 
; 2137 : 		int nLength = StringTraits::GetFormattedLength( pszFormat, args );

  00069	8b 45 0c	 mov	 eax, DWORD PTR _args$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _pszFormat$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 ?GetFormattedLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WPAD@Z ; ATL::ChTraitsCRT<wchar_t>::GetFormattedLength
  00076	83 c4 08	 add	 esp, 8
  00079	89 45 ec	 mov	 DWORD PTR _nLength$[ebp], eax

; 2138 : 
; 2139 : 		if (nLength < 0)

  0007c	83 7d ec 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  00080	7d 0a		 jge	 SHORT $LN1@FormatV

; 2140 : 			AtlThrow(E_FAIL);

  00082	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00087	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN1@FormatV:

; 2141 : 
; 2142 : 		PXSTR pszBuffer = GetBuffer( nLength );

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _nLength$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
  00098	89 45 e0	 mov	 DWORD PTR _pszBuffer$[ebp], eax

; 2143 : 		StringTraits::Format( pszBuffer, nLength+1, pszFormat, args );

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _args$[ebp]
  0009e	50		 push	 eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _pszFormat$[ebp]
  000a2	51		 push	 ecx
  000a3	8b 55 ec	 mov	 edx, DWORD PTR _nLength$[ebp]
  000a6	83 c2 01	 add	 edx, 1
  000a9	52		 push	 edx
  000aa	8b 45 e0	 mov	 eax, DWORD PTR _pszBuffer$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?Format@?$ChTraitsCRT@_W@ATL@@SAHPA_WIPB_WPAD@Z ; ATL::ChTraitsCRT<wchar_t>::Format
  000b3	83 c4 10	 add	 esp, 16			; 00000010H

; 2144 : 		ReleaseBufferSetLength( nLength );

  000b6	8b 45 ec	 mov	 eax, DWORD PTR _nLength$[ebp]
  000b9	50		 push	 eax
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength
$LN4@FormatV:

; 2145 : 	}

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
?FormatV@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXPB_WPAD@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::FormatV
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 224  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _nLineNo$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 225  : 	}

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z		; ATL::CTrace::TraceV
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
EXTRN	?atlTraceGeneral@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceGeneral
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = 8						; size = 4
_pszFmt$ = 12						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 272  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 273  : 		va_list ptr; va_start(ptr, pszFmt);

  0001e	8d 45 10	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  00021	89 45 f8	 mov	 DWORD PTR _ptr$[ebp], eax

; 274  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, atlTraceGeneral, 0, pszFmt, ptr);

  00024	8b 45 f8	 mov	 eax, DWORD PTR _ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0002b	51		 push	 ecx
  0002c	6a 00		 push	 0
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceGeneral@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceGeneral
  00033	e8 00 00 00 00	 call	 ??BCTraceCategory@ATL@@QBEKXZ ; ATL::CTraceCategory::operator unsigned long
  00038	50		 push	 eax
  00039	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 11		 mov	 edx, DWORD PTR [ecx]
  00045	52		 push	 edx
  00046	68 00 00 00 00	 push	 OFFSET ?s_trace@CTrace@ATL@@2V12@A ; ATL::CTrace::s_trace
  0004b	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z ; ATL::CTrace::TraceV
  00050	83 c4 1c	 add	 esp, 28			; 0000001cH

; 275  : 		va_end(ptr);

  00053	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 276  : 	}

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
??RCTraceFileAndLineInfo@ATL@@QBAXPB_WZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVU:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 212  : 	AtlTraceVU(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

  0001e	8b 45 20	 mov	 eax, DWORD PTR _args$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 1c	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 18	 mov	 edx, DWORD PTR _nLevel$[ebp]
  00029	52		 push	 edx
  0002a	8b 45 14	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR _nLine$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR _pszFileName$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _AtlTraceVU
  00042	83 c4 1c	 add	 esp, 28			; 0000001cH

; 213  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 	return( m_dwCategory );

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]

; 303  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPB_WZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??_C@_0EM@LIFEDLIA@c?3?2program?5files?2microsoft?5visua@ ; `string'
PUBLIC	?__LINE__Var@?1??AtlThrowImpl@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrowImpl'::`2'::__LINE__Var
PUBLIC	??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@ ; `string'
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
;	COMDAT ??_C@_0EM@LIFEDLIA@c?3?2program?5files?2microsoft?5visua@
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_0EM@LIFEDLIA@c?3?2program?5files?2microsoft?5visua@ DB 'c:\program '
	DB	'files\microsoft visual studio 10.0\vc\atlmfc\include\atlexcep'
	DB	't.h', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AtlThrowImpl@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AtlThrowImpl@ATL@@YGXJ@Z@4JA DD 041H	; `ATL::AtlThrowImpl'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'o', 00H
	DB	'w', 00H, ':', 00H, ' ', 00H, 'h', 00H, 'r', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T212326 = -204						; size = 8
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  0001e	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@
  00027	6a 00		 push	 0
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
  0002e	e8 00 00 00 00	 call	 ??BCTraceCategory@ATL@@QBEKXZ ; ATL::CTraceCategory::operator unsigned long
  00033	50		 push	 eax
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?1??AtlThrowImpl@ATL@@YGXJ@Z@4JA
  0003a	83 c1 01	 add	 ecx, 1
  0003d	51		 push	 ecx
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LIFEDLIA@c?3?2program?5files?2microsoft?5visua@
  00043	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T212326[ebp]
  00049	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXKIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00054	83 c4 14	 add	 esp, 20			; 00000014H

; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00057	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  0005e	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00060	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}
; 72   : 	else

  00065	eb 09		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00067	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPB_WZZ
_TEXT	SEGMENT
_ptr$ = -8						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPB_WZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 248  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 249  : 		va_list ptr; va_start(ptr, pszFmt);

  0001e	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  00021	89 45 f8	 mov	 DWORD PTR _ptr$[ebp], eax

; 250  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  00024	8b 45 f8	 mov	 eax, DWORD PTR _ptr$[ebp]
  00027	50		 push	 eax
  00028	8b 4d 14	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 10	 mov	 edx, DWORD PTR _nLevel$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 0c	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003a	52		 push	 edx
  0003b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	51		 push	 ecx
  00041	68 00 00 00 00	 push	 OFFSET ?s_trace@CTrace@ATL@@2V12@A ; ATL::CTrace::s_trace
  00046	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@QBAXPBDHKIPB_WPAD@Z ; ATL::CTrace::TraceV
  0004b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 251  : 		va_end(ptr);

  0004e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 252  : 	}

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPB_WZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\atlcore.h
_TEXT	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPB_WI@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
_nMaxLength$ = 12					; size = 4
?AtlIsValidString@ATL@@YAHPB_WI@Z PROC			; ATL::AtlIsValidString, COMDAT

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 47   : 	(nMaxLength);
; 48   : 	return (psz != NULL);

  0001e	33 c0		 xor	 eax, eax
  00020	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00024	0f 95 c0	 setne	 al

; 49   : }

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?AtlIsValidString@ATL@@YAHPB_WI@Z ENDP			; ATL::AtlIsValidString
_TEXT	ENDS
EXTRN	__vscwprintf:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\cstringt.h
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WPAD@Z
_TEXT	SEGMENT
_pszFormat$ = 8						; size = 4
_args$ = 12						; size = 4
?GetFormattedLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WPAD@Z PROC ; ATL::ChTraitsCRT<wchar_t>::GetFormattedLength, COMDAT

; 655  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 656  : 		return _vscwprintf( pszFormat, args );

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _args$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _pszFormat$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 __vscwprintf
  0002b	83 c4 08	 add	 esp, 8

; 657  : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GetFormattedLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WPAD@Z ENDP ; ATL::ChTraitsCRT<wchar_t>::GetFormattedLength
_TEXT	ENDS
EXTRN	_vswprintf_s:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Format@?$ChTraitsCRT@_W@ATL@@SAHPA_WIPB_WPAD@Z
_TEXT	SEGMENT
_pszBuffer$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pszFormat$ = 16					; size = 4
_args$ = 20						; size = 4
?Format@?$ChTraitsCRT@_W@ATL@@SAHPA_WIPB_WPAD@Z PROC	; ATL::ChTraitsCRT<wchar_t>::Format, COMDAT

; 674  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 675  : 		return vswprintf_s( pszBuffer, nLength, pszFormat, args );

  0001e	8b 45 14	 mov	 eax, DWORD PTR _args$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 10	 mov	 ecx, DWORD PTR _pszFormat$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 0c	 mov	 edx, DWORD PTR _nLength$[ebp]
  00029	52		 push	 edx
  0002a	8b 45 08	 mov	 eax, DWORD PTR _pszBuffer$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _vswprintf_s
  00033	83 c4 10	 add	 esp, 16			; 00000010H

; 676  : 	}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Format@?$ChTraitsCRT@_W@ATL@@SAHPA_WIPB_WPAD@Z ENDP	; ATL::ChTraitsCRT<wchar_t>::Format
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
PUBLIC	?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >, COMDAT
; _this$ = ecx

; 925  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	e8 00 00 00 00	 call	 ?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager
  00028	50		 push	 eax
  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>

; 926  : 	}

  00031	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@_W$0A@@ATL@@QAE@ABV01@@Z	; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@ABV01@@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >, COMDAT
; _this$ = ecx

; 946  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 45 08	 mov	 eax, DWORD PTR _strSrc$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@_W$0A@@ATL@@QAE@ABV01@@Z ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>

; 947  : 	}

  0002f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@ABV01@@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >, COMDAT
; _this$ = ecx

; 1212 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1213 : 	}

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ ; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\atlsimpstr.h
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ PROC		; ATL::CSimpleStringT<wchar_t,0>::operator wchar_t const *, COMDAT
; _this$ = ecx

; 402  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 403  : 		return( m_pszData );

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]

; 404  : 	}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??B?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ENDP		; ATL::CSimpleStringT<wchar_t,0>::operator wchar_t const *
_TEXT	ENDS
PUBLIC	?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<wchar_t,0>::SetLength
PUBLIC	?StringLengthN@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_WI@Z ; ATL::CSimpleStringT<wchar_t,0>::StringLengthN
PUBLIC	?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ReleaseBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_nAlloc$196437 = -20					; size = 4
_this$ = -8						; size = 4
_nNewLength$ = 8					; size = 4
?ReleaseBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBuffer, COMDAT
; _this$ = ecx

; 583  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 584  : 		if( nNewLength == -1 )

  00023	83 7d 08 ff	 cmp	 DWORD PTR _nNewLength$[ebp], -1
  00027	75 23		 jne	 SHORT $LN1@ReleaseBuf

; 585  : 		{
; 586  : 			int nAlloc = GetData()->nAllocLength;

  00029	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00031	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00034	89 45 ec	 mov	 DWORD PTR _nAlloc$196437[ebp], eax

; 587  : 			nNewLength = StringLengthN( m_pszData, nAlloc);

  00037	8b 45 ec	 mov	 eax, DWORD PTR _nAlloc$196437[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ?StringLengthN@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_WI@Z ; ATL::CSimpleStringT<wchar_t,0>::StringLengthN
  00046	83 c4 08	 add	 esp, 8
  00049	89 45 08	 mov	 DWORD PTR _nNewLength$[ebp], eax
$LN1@ReleaseBuf:

; 588  : 		}
; 589  : 		SetLength( nNewLength );

  0004c	8b 45 08	 mov	 eax, DWORD PTR _nNewLength$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::SetLength

; 590  : 	}

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
?ReleaseBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBuffer
_TEXT	ENDS
PUBLIC	?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
PUBLIC	??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ ; `string'
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
CONST	SEGMENT
??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H
	DB	'v', 00H, 'c', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm'
	DB	00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't'
	DB	00H, 'l', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl?$AA?$AA@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pData$ = -32						; size = 4
___atl_condVal$196839 = -20				; size = 4
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>, COMDAT
; _this$ = ecx

; 229  : 	explicit CSimpleStringT(_Inout_ IAtlStringMgr* pStringMgr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN10@CSimpleStr:

; 230  : 	{
; 231  : 		ATLENSURE( pStringMgr != NULL );

  00023	33 c0		 xor	 eax, eax
  00025	83 7d 08 00	 cmp	 DWORD PTR _pStringMgr$[ebp], 0
  00029	0f 95 c0	 setne	 al
  0002c	89 45 ec	 mov	 DWORD PTR ___atl_condVal$196839[ebp], eax
$LN7@CSimpleStr:
  0002f	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$196839[ebp], 0
  00033	75 21		 jne	 SHORT $LN3@CSimpleStr
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl?$AA?$AA@
  0003a	6a 00		 push	 0
  0003c	68 e7 00 00 00	 push	 231			; 000000e7H
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  00046	6a 02		 push	 2
  00048	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004d	83 c4 14	 add	 esp, 20			; 00000014H
  00050	83 f8 01	 cmp	 eax, 1
  00053	75 01		 jne	 SHORT $LN3@CSimpleStr
  00055	cc		 int	 3
$LN3@CSimpleStr:
  00056	33 c0		 xor	 eax, eax
  00058	75 fc		 jne	 SHORT $LN3@CSimpleStr
  0005a	33 c0		 xor	 eax, eax
  0005c	75 d1		 jne	 SHORT $LN7@CSimpleStr
  0005e	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$196839[ebp], 0
  00062	75 0a		 jne	 SHORT $LN9@CSimpleStr
  00064	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00069	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN9@CSimpleStr:
  0006e	33 c0		 xor	 eax, eax
  00070	75 b1		 jne	 SHORT $LN10@CSimpleStr

; 232  : 		CStringData* pData = pStringMgr->GetNilString();

  00072	8b 45 08	 mov	 eax, DWORD PTR _pStringMgr$[ebp]
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	8b f4		 mov	 esi, esp
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _pStringMgr$[ebp]
  0007c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0007f	ff d0		 call	 eax
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00088	89 45 e0	 mov	 DWORD PTR _pData$[ebp], eax

; 233  : 		Attach( pData );

  0008b	8b 45 e0	 mov	 eax, DWORD PTR _pData$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach

; 234  : 	}

  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN12@CSimpleStr:
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
_TEXT	ENDS
PUBLIC	?CloneData@?$CSimpleStringT@_W$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<wchar_t,0>::CloneData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$CSimpleStringT@_W$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_pNewData$ = -32					; size = 4
_pSrcData$ = -20					; size = 4
_this$ = -8						; size = 4
_strSrc$ = 8						; size = 4
??0?$CSimpleStringT@_W$0A@@ATL@@QAE@ABV01@@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>, COMDAT
; _this$ = ecx

; 236  : 	CSimpleStringT(_In_ const CSimpleStringT& strSrc)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : 	{
; 238  : 		CStringData* pSrcData = strSrc.GetData();

  00023	8b 4d 08	 mov	 ecx, DWORD PTR _strSrc$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0002b	89 45 ec	 mov	 DWORD PTR _pSrcData$[ebp], eax

; 239  : 		CStringData* pNewData = CloneData( pSrcData );

  0002e	8b 45 ec	 mov	 eax, DWORD PTR _pSrcData$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@_W$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<wchar_t,0>::CloneData
  00037	83 c4 04	 add	 esp, 4
  0003a	89 45 e0	 mov	 DWORD PTR _pNewData$[ebp], eax

; 240  : 		Attach( pNewData );

  0003d	8b 45 e0	 mov	 eax, DWORD PTR _pNewData$[ebp]
  00040	50		 push	 eax
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach

; 241  : 	}

  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
??0?$CSimpleStringT@_W$0A@@ATL@@QAE@ABV01@@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ PROC		; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>, COMDAT
; _this$ = ecx

; 286  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 287  : 		CStringData* pData = GetData();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0002b	89 45 ec	 mov	 DWORD PTR _pData$[ebp], eax

; 288  : 		pData->Release();

  0002e	8b 4d ec	 mov	 ecx, DWORD PTR _pData$[ebp]
  00031	e8 00 00 00 00	 call	 ?Release@CStringData@ATL@@QAEXXZ ; ATL::CStringData::Release

; 289  : 	}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
_TEXT	ENDS
PUBLIC	??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'R', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC			; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 111  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 		ATLASSERT( nRefs != 0 );

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002a	75 1e		 jne	 SHORT $LN4@Release
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00031	6a 00		 push	 0
  00033	6a 70		 push	 112			; 00000070H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  0003a	6a 02		 push	 2
  0003c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN4@Release
  00049	cc		 int	 3
$LN4@Release:

; 113  : 
; 114  : 		if( _AtlInterlockedDecrement( &nRefs ) <= 0 )

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00050	83 c9 ff	 or	 ecx, -1
  00053	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00057	49		 dec	 ecx
  00058	85 c9		 test	 ecx, ecx
  0005a	7f 1e		 jg	 SHORT $LN2@Release

; 115  : 		{
; 116  : 			pStringMgr->Free( this );

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	50		 push	 eax
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	8b 12		 mov	 edx, DWORD PTR [edx]
  0006e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00071	ff d0		 call	 eax
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Release:

; 117  : 		}
; 118  : 	}

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::GetBuffer, COMDAT
; _this$ = ecx

; 533  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 534  : 		return( PrepareWrite( nMinBufferLength ) );

  00023	8b 45 08	 mov	 eax, DWORD PTR _nMinBufferLength$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite

; 535  : 	}

  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
_TEXT	ENDS
EXTRN	_wcsnlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StringLengthN@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_WI@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
_sizeInXChar$ = 12					; size = 4
?StringLengthN@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_WI@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::StringLengthN, COMDAT

; 772  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 773  : 		if( psz == NULL )

  0001e	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00022	75 04		 jne	 SHORT $LN1@StringLeng

; 774  : 		{
; 775  : 			return( 0 );

  00024	33 c0		 xor	 eax, eax
  00026	eb 10		 jmp	 SHORT $LN2@StringLeng
$LN1@StringLeng:

; 776  : 		}
; 777  : 		return( int( wcsnlen( psz, sizeInXChar ) ) );

  00028	8b 45 0c	 mov	 eax, DWORD PTR _sizeInXChar$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _wcsnlen
  00035	83 c4 08	 add	 esp, 8
$LN2@StringLeng:

; 778  : 	}

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?StringLengthN@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_WI@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::StringLengthN
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::Attach, COMDAT
; _this$ = ecx

; 802  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 803  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00023	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  00026	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	89 01		 mov	 DWORD PTR [ecx], eax

; 804  : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::Attach
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC			; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 84   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 		return (this+1);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 c0 10	 add	 eax, 16			; 00000010H

; 86   : 	}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ PROC ; ATL::CSimpleStringT<wchar_t,0>::GetData, COMDAT
; _this$ = ecx

; 822  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 823  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	83 e8 10	 sub	 eax, 16			; 00000010H

; 824  : 	}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<wchar_t,0>::GetData
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z
_TEXT	SEGMENT
_nTooShort$ = -44					; size = 4
_nShared$ = -32						; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 826  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 827  : 		if (nLength < 0)

  00023	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  00027	7d 0a		 jge	 SHORT $LN2@PrepareWri

; 828  : 			AtlThrow(E_INVALIDARG);

  00029	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0002e	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@PrepareWri:

; 829  : 
; 830  : 		CStringData* pOldData = GetData();

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0003b	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 831  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  00049	89 4d e0	 mov	 DWORD PTR _nShared$[ebp], ecx

; 832  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	2b 4d 08	 sub	 ecx, DWORD PTR _nLength$[ebp]
  00055	89 4d d4	 mov	 DWORD PTR _nTooShort$[ebp], ecx

; 833  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

  00058	8b 45 e0	 mov	 eax, DWORD PTR _nShared$[ebp]
  0005b	0b 45 d4	 or	 eax, DWORD PTR _nTooShort$[ebp]
  0005e	7d 0c		 jge	 SHORT $LN1@PrepareWri

; 834  : 		{
; 835  : 			PrepareWrite2( nLength );

  00060	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  00063	50		 push	 eax
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2
$LN1@PrepareWri:

; 836  : 		}
; 837  : 
; 838  : 		return( m_pszData );

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@PrepareWri:

; 839  : 	}

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite
_TEXT	ENDS
PUBLIC	??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?$CI?$AA?$CJ?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg@ ; `string'
PUBLIC	??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?$CI?$AA?$CJ?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg@
CONST	SEGMENT
??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?$CI?$AA?$CJ?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg@ DB 'n'
	DB	00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, '(', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 'n', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::SetLength, COMDAT
; _this$ = ecx

; 890  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 891  : 		ATLASSERT( nLength >= 0 );

  00023	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  00027	7d 21		 jge	 SHORT $LN5@SetLength
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0002e	6a 00		 push	 0
  00030	68 7b 03 00 00	 push	 891			; 0000037bH
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  0003a	6a 02		 push	 2
  0003c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN5@SetLength
  00049	cc		 int	 3
$LN5@SetLength:

; 892  : 		ATLASSERT( nLength <= GetData()->nAllocLength );

  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  00055	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00058	7e 21		 jle	 SHORT $LN6@SetLength
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AA?$CI?$AA?$CJ?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg@
  0005f	6a 00		 push	 0
  00061	68 7c 03 00 00	 push	 892			; 0000037cH
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  0006b	6a 02		 push	 2
  0006d	e8 00 00 00 00	 call	 __CrtDbgReportW
  00072	83 c4 14	 add	 esp, 20			; 00000014H
  00075	83 f8 01	 cmp	 eax, 1
  00078	75 01		 jne	 SHORT $LN6@SetLength
  0007a	cc		 int	 3
$LN6@SetLength:

; 893  : 
; 894  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  0007b	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0007f	7c 10		 jl	 SHORT $LN1@SetLength
  00081	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  0008c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0008f	7e 0a		 jle	 SHORT $LN2@SetLength
$LN1@SetLength:

; 895  : 			AtlThrow(E_INVALIDARG);

  00091	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00096	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@SetLength:

; 896  : 
; 897  : 		GetData()->nDataLength = nLength;

  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  000a6	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 898  : 		m_pszData[nLength] = 0;

  000a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ae	33 d2		 xor	 edx, edx
  000b0	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  000b3	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
$LN4@SetLength:

; 899  : 	}

  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx
  000ba	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000c0	3b ec		 cmp	 ebp, esp
  000c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 04 00	 ret	 4
?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::SetLength
_TEXT	ENDS
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:PROC ; AfxGetStringManager
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\afxstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager, COMDAT

; 51   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 52   : 		return( AfxGetStringManager() );

  0001e	e8 00 00 00 00	 call	 ?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager

; 53   : 	}

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
; File c:\program files\microsoft visual studio 10.0\vc\atlmfc\include\atlsimpstr.h
CONST	SEGMENT
??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'N', 00H, 'e', 00H, 'w', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 592  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 593  : 		ATLASSERT( nNewLength >= 0 );

  00023	83 7d 08 00	 cmp	 DWORD PTR _nNewLength$[ebp], 0
  00027	7d 21		 jge	 SHORT $LN3@ReleaseBuf@2
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0002e	6a 00		 push	 0
  00030	68 51 02 00 00	 push	 593			; 00000251H
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  0003a	6a 02		 push	 2
  0003c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN3@ReleaseBuf@2
  00049	cc		 int	 3
$LN3@ReleaseBuf@2:

; 594  : 		SetLength( nNewLength );

  0004a	8b 45 08	 mov	 eax, DWORD PTR _nNewLength$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::SetLength

; 595  : 	}

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength
_TEXT	ENDS
PUBLIC	?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::Reallocate
PUBLIC	?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<wchar_t,0>::Fork
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nNewLength$197144 = -32				; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 841  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 842  : 		CStringData* pOldData = GetData();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0002b	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 843  : 		if( pOldData->nDataLength > nLength )

  0002e	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	3b 4d 08	 cmp	 ecx, DWORD PTR _nLength$[ebp]
  00037	7e 09		 jle	 SHORT $LN7@PrepareWri@2

; 844  : 		{
; 845  : 			nLength = pOldData->nDataLength;

  00039	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	89 4d 08	 mov	 DWORD PTR _nLength$[ebp], ecx
$LN7@PrepareWri@2:

; 846  : 		}
; 847  : 		if( pOldData->IsShared() )

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  00045	e8 00 00 00 00	 call	 ?IsShared@CStringData@ATL@@QBE_NXZ ; ATL::CStringData::IsShared
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	85 c0		 test	 eax, eax
  0004f	74 0e		 je	 SHORT $LN6@PrepareWri@2

; 848  : 		{
; 849  : 			Fork( nLength );

  00051	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  00054	50		 push	 eax
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::Fork
  0005d	eb 52		 jmp	 SHORT $LN8@PrepareWri@2
$LN6@PrepareWri@2:

; 850  : 		}
; 851  : 		else if( pOldData->nAllocLength < nLength )

  0005f	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	3b 4d 08	 cmp	 ecx, DWORD PTR _nLength$[ebp]
  00068	7d 47		 jge	 SHORT $LN8@PrepareWri@2

; 852  : 		{
; 853  : 			// Grow exponentially, until we hit 1G, then by 1M thereafter.
; 854  : 			int nNewLength = pOldData->nAllocLength;

  0006a	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0006d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00070	89 4d e0	 mov	 DWORD PTR _nNewLength$197144[ebp], ecx

; 855  : 			if( nNewLength > 1024 * 1024 * 1024 )

  00073	81 7d e0 00 00
	00 40		 cmp	 DWORD PTR _nNewLength$197144[ebp], 1073741824 ; 40000000H
  0007a	7e 0d		 jle	 SHORT $LN3@PrepareWri@2

; 856  : 			{
; 857  : 				nNewLength += 1024 * 1024;

  0007c	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$197144[ebp]
  0007f	05 00 00 10 00	 add	 eax, 1048576		; 00100000H
  00084	89 45 e0	 mov	 DWORD PTR _nNewLength$197144[ebp], eax

; 858  : 			}
; 859  : 			else

  00087	eb 0e		 jmp	 SHORT $LN2@PrepareWri@2
$LN3@PrepareWri@2:

; 860  : 			{
; 861  : 				// Exponential growth factor is 1.5.
; 862  : 				nNewLength = nNewLength + nNewLength / 2;

  00089	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$197144[ebp]
  0008c	99		 cdq
  0008d	2b c2		 sub	 eax, edx
  0008f	d1 f8		 sar	 eax, 1
  00091	03 45 e0	 add	 eax, DWORD PTR _nNewLength$197144[ebp]
  00094	89 45 e0	 mov	 DWORD PTR _nNewLength$197144[ebp], eax
$LN2@PrepareWri@2:

; 863  : 			}
; 864  : 			if( nNewLength < nLength )

  00097	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$197144[ebp]
  0009a	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  0009d	7d 06		 jge	 SHORT $LN1@PrepareWri@2

; 865  : 			{
; 866  : 				nNewLength = nLength;

  0009f	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  000a2	89 45 e0	 mov	 DWORD PTR _nNewLength$197144[ebp], eax
$LN1@PrepareWri@2:

; 867  : 			}
; 868  : 			Reallocate( nNewLength );

  000a5	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$197144[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::Reallocate
$LN8@PrepareWri@2:

; 869  : 		}
; 870  : 	}

  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsShared@CStringData@ATL@@QBE_NXZ PROC			; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 98   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 		return( nRefs > 1 );

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	33 c9		 xor	 ecx, ecx
  00028	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  0002c	0f 9f c1	 setg	 cl
  0002f	8a c1		 mov	 al, cl

; 100  : 	}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	?CopyChars@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::CopyChars
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
PUBLIC	?AddRef@CStringData@ATL@@QAEXXZ			; ATL::CStringData::AddRef
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CloneData@?$CSimpleStringT@_W$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT
_pNewStringMgr$ = -20					; size = 4
_pNewData$ = -8						; size = 4
_pData$ = 8						; size = 4
?CloneData@?$CSimpleStringT@_W$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::CloneData, COMDAT

; 902  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 903  : 		CStringData* pNewData = NULL;

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pNewData$[ebp], 0

; 904  : 
; 905  : 		IAtlStringMgr* pNewStringMgr = pData->pStringMgr->Clone();

  00025	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR _pData$[ebp]
  0002d	8b 02		 mov	 eax, DWORD PTR [edx]
  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	8b f4		 mov	 esi, esp
  00033	8b c8		 mov	 ecx, eax
  00035	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00038	ff d0		 call	 eax
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	89 45 ec	 mov	 DWORD PTR _pNewStringMgr$[ebp], eax

; 906  : 		if( !pData->IsLocked() && (pNewStringMgr == pData->pStringMgr) )

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  00047	e8 00 00 00 00	 call	 ?IsLocked@CStringData@ATL@@QBE_NXZ ; ATL::CStringData::IsLocked
  0004c	0f b6 c0	 movzx	 eax, al
  0004f	85 c0		 test	 eax, eax
  00051	75 1a		 jne	 SHORT $LN3@CloneData
  00053	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  00056	8b 4d ec	 mov	 ecx, DWORD PTR _pNewStringMgr$[ebp]
  00059	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005b	75 10		 jne	 SHORT $LN3@CloneData

; 907  : 		{
; 908  : 			pNewData = pData;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  00060	89 45 f8	 mov	 DWORD PTR _pNewData$[ebp], eax

; 909  : 			pNewData->AddRef();

  00063	8b 4d f8	 mov	 ecx, DWORD PTR _pNewData$[ebp]
  00066	e8 00 00 00 00	 call	 ?AddRef@CStringData@ATL@@QAEXXZ ; ATL::CStringData::AddRef

; 910  : 		}
; 911  : 		else

  0006b	eb 66		 jmp	 SHORT $LN2@CloneData
$LN3@CloneData:

; 912  : 		{
; 913  : 			pNewData = pNewStringMgr->Allocate( pData->nDataLength, sizeof( XCHAR ) );

  0006d	8b f4		 mov	 esi, esp
  0006f	6a 02		 push	 2
  00071	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  00074	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00077	51		 push	 ecx
  00078	8b 55 ec	 mov	 edx, DWORD PTR _pNewStringMgr$[ebp]
  0007b	8b 02		 mov	 eax, DWORD PTR [edx]
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _pNewStringMgr$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	ff d2		 call	 edx
  00084	3b f4		 cmp	 esi, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	89 45 f8	 mov	 DWORD PTR _pNewData$[ebp], eax

; 914  : 			if( pNewData == NULL )

  0008e	83 7d f8 00	 cmp	 DWORD PTR _pNewData$[ebp], 0
  00092	75 05		 jne	 SHORT $LN1@CloneData

; 915  : 			{
; 916  : 				ThrowMemoryException();

  00094	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
$LN1@CloneData:

; 917  : 			}
; 918  : 			pNewData->nDataLength = pData->nDataLength;

  00099	8b 45 f8	 mov	 eax, DWORD PTR _pNewData$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  0009f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 919  : 			CopyChars( PXSTR( pNewData->data() ), pData->nDataLength+1,
; 920  : 				PCXSTR( pData->data() ), pData->nDataLength+1 );  // Copy '\0'

  000a5	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  000a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ab	83 c1 01	 add	 ecx, 1
  000ae	51		 push	 ecx
  000af	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  000b2	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  000b7	50		 push	 eax
  000b8	8b 55 08	 mov	 edx, DWORD PTR _pData$[ebp]
  000bb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000be	83 c0 01	 add	 eax, 1
  000c1	50		 push	 eax
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _pNewData$[ebp]
  000c5	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?CopyChars@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::CopyChars
  000d0	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@CloneData:

; 921  : 		}
; 922  : 
; 923  : 		return( pNewData );

  000d3	8b 45 f8	 mov	 eax, DWORD PTR _pNewData$[ebp]
$LN5@CloneData:

; 924  : 	}

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000df	3b ec		 cmp	 ebp, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?CloneData@?$CSimpleStringT@_W$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::CloneData
_TEXT	ENDS
PUBLIC	??_C@_1BE@BLGCOAPB@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BE@BLGCOAPB@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@BLGCOAPB@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'R', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AddRef@CStringData@ATL@@QAEXXZ PROC			; ATL::CStringData::AddRef, COMDAT
; _this$ = ecx

; 89   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 90   : 		ATLASSERT(nRefs > 0);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002a	7f 1e		 jg	 SHORT $LN3@AddRef
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@BLGCOAPB@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00031	6a 00		 push	 0
  00033	6a 5a		 push	 90			; 0000005aH
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  0003a	6a 02		 push	 2
  0003c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00041	83 c4 14	 add	 esp, 20			; 00000014H
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 01		 jne	 SHORT $LN3@AddRef
  00049	cc		 int	 3
$LN3@AddRef:

; 91   : 		_AtlInterlockedIncrement(&nRefs);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx

; 92   : 	}

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?AddRef@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::AddRef
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsLocked@CStringData@ATL@@QBE_NXZ PROC			; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 94   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 		return nRefs < 0;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	33 c9		 xor	 ecx, ecx
  00028	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002c	0f 9c c1	 setl	 cl
  0002f	8a c1		 mov	 al, cl

; 96   : 	}

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
EXTRN	_memcpy_s:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CopyChars@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_nDestLen$ = 12						; size = 4
_pchSrc$ = 16						; size = 4
_nChars$ = 20						; size = 4
?CopyChars@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::CopyChars, COMDAT

; 718  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 719  : 		memcpy_s( pchDest, nDestLen*sizeof( XCHAR ),
; 720  : 			pchSrc, nChars*sizeof( XCHAR ) );

  0001e	8b 45 14	 mov	 eax, DWORD PTR _nChars$[ebp]
  00021	d1 e0		 shl	 eax, 1
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _pchSrc$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR _nDestLen$[ebp]
  0002b	d1 e2		 shl	 edx, 1
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR _pchDest$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memcpy_s
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 721  : 	}

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?CopyChars@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::CopyChars
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ PROC ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException, COMDAT

; 795  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 796  : 		AtlThrow( E_OUTOFMEMORY );

  0001e	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00023	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@ThrowMemor:

; 797  : 	}

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
tv82 = -256						; size = 4
tv74 = -256						; size = 4
_nCharsToCopy$ = -56					; size = 4
_pNewData$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC		; ATL::CSimpleStringT<wchar_t,0>::Fork, COMDAT
; _this$ = ecx

; 806  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00013	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 807  : 		CStringData* pOldData = GetData();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0002b	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 808  : 		int nOldLength = pOldData->nDataLength;

  0002e	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	89 4d e0	 mov	 DWORD PTR _nOldLength$[ebp], ecx

; 809  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

  00037	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	8b 55 ec	 mov	 edx, DWORD PTR _pOldData$[ebp]
  0003f	8b 02		 mov	 eax, DWORD PTR [edx]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	8b f4		 mov	 esi, esp
  00045	8b c8		 mov	 ecx, eax
  00047	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004a	ff d0		 call	 eax
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  00059	8b f4		 mov	 esi, esp
  0005b	6a 02		 push	 2
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  00060	51		 push	 ecx
  00061	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR tv74[ebp]
  00067	8b 02		 mov	 eax, DWORD PTR [edx]
  00069	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv74[ebp]
  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	ff d2		 call	 edx
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	89 45 d4	 mov	 DWORD PTR _pNewData$[ebp], eax

; 810  : 		if( pNewData == NULL )

  0007d	83 7d d4 00	 cmp	 DWORD PTR _pNewData$[ebp], 0
  00081	75 05		 jne	 SHORT $LN1@Fork

; 811  : 		{
; 812  : 			ThrowMemoryException();

  00083	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
$LN1@Fork:

; 813  : 		}
; 814  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

  00088	8b 45 e0	 mov	 eax, DWORD PTR _nOldLength$[ebp]
  0008b	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  0008e	7d 0b		 jge	 SHORT $LN4@Fork
  00090	8b 4d e0	 mov	 ecx, DWORD PTR _nOldLength$[ebp]
  00093	89 8d 00 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  00099	eb 09		 jmp	 SHORT $LN5@Fork
$LN4@Fork:
  0009b	8b 55 08	 mov	 edx, DWORD PTR _nLength$[ebp]
  0009e	89 95 00 ff ff
	ff		 mov	 DWORD PTR tv82[ebp], edx
$LN5@Fork:
  000a4	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv82[ebp]
  000aa	83 c0 01	 add	 eax, 1
  000ad	89 45 c8	 mov	 DWORD PTR _nCharsToCopy$[ebp], eax

; 815  : 		CopyChars( PXSTR( pNewData->data() ), nCharsToCopy,
; 816  : 			PCXSTR( pOldData->data() ), nCharsToCopy );

  000b0	8b 45 c8	 mov	 eax, DWORD PTR _nCharsToCopy$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  000b7	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  000bc	50		 push	 eax
  000bd	8b 4d c8	 mov	 ecx, DWORD PTR _nCharsToCopy$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 4d d4	 mov	 ecx, DWORD PTR _pNewData$[ebp]
  000c4	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?CopyChars@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::CopyChars
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 817  : 		pNewData->nDataLength = nOldLength;

  000d2	8b 45 d4	 mov	 eax, DWORD PTR _pNewData$[ebp]
  000d5	8b 4d e0	 mov	 ecx, DWORD PTR _nOldLength$[ebp]
  000d8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 818  : 		pOldData->Release();

  000db	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  000de	e8 00 00 00 00	 call	 ?Release@CStringData@ATL@@QAEXXZ ; ATL::CStringData::Release

; 819  : 		Attach( pNewData );

  000e3	8b 45 d4	 mov	 eax, DWORD PTR _pNewData$[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
$LN3@Fork:

; 820  : 	}

  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000f8	3b ec		 cmp	 ebp, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<wchar_t,0>::Fork
_TEXT	ENDS
PUBLIC	??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@ ; `string'
;	COMDAT ??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
CONST	SEGMENT
??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@ DB 'p'
	DB	00H, 'O', 00H, 'l', 00H, 'd', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'n', 00H, 'A', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'n', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_pNewData$ = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::Reallocate, COMDAT
; _this$ = ecx

; 872  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 873  : 		CStringData* pOldData = GetData();

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0002b	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 874  : 		ATLASSERT( pOldData->nAllocLength < nLength );

  0002e	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00031	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00034	3b 4d 08	 cmp	 ecx, DWORD PTR _nLength$[ebp]
  00037	7c 21		 jl	 SHORT $LN6@Reallocate
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo?$AAc?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh@
  0003e	6a 00		 push	 0
  00040	68 6a 03 00 00	 push	 874			; 0000036aH
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_1JK@OKOEFEHL@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAv?$AAi?$AAs?$AAu?$AAa@
  0004a	6a 02		 push	 2
  0004c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00051	83 c4 14	 add	 esp, 20			; 00000014H
  00054	83 f8 01	 cmp	 eax, 1
  00057	75 01		 jne	 SHORT $LN6@Reallocate
  00059	cc		 int	 3
$LN6@Reallocate:

; 875  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 4d e0	 mov	 DWORD PTR _pStringMgr$[ebp], ecx

; 876  : 		if ( pOldData->nAllocLength >= nLength || nLength <= 0)

  00062	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00065	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00068	3b 4d 08	 cmp	 ecx, DWORD PTR _nLength$[ebp]
  0006b	7d 06		 jge	 SHORT $LN2@Reallocate
  0006d	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  00071	7f 07		 jg	 SHORT $LN3@Reallocate
$LN2@Reallocate:

; 877  : 		{
; 878  : 			ThrowMemoryException();

  00073	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException

; 879  : 			return;

  00078	eb 3a		 jmp	 SHORT $LN5@Reallocate
$LN3@Reallocate:

; 880  : 		}
; 881  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

  0007a	8b f4		 mov	 esi, esp
  0007c	6a 02		 push	 2
  0007e	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  00081	50		 push	 eax
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 e0	 mov	 edx, DWORD PTR _pStringMgr$[ebp]
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	8b 4d e0	 mov	 ecx, DWORD PTR _pStringMgr$[ebp]
  0008e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00091	ff d2		 call	 edx
  00093	3b f4		 cmp	 esi, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009a	89 45 d4	 mov	 DWORD PTR _pNewData$[ebp], eax

; 882  : 		if( pNewData == NULL )

  0009d	83 7d d4 00	 cmp	 DWORD PTR _pNewData$[ebp], 0
  000a1	75 05		 jne	 SHORT $LN1@Reallocate

; 883  : 		{
; 884  : 			ThrowMemoryException();

  000a3	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
$LN1@Reallocate:

; 885  : 		}
; 886  : 		Attach( pNewData );

  000a8	8b 45 d4	 mov	 eax, DWORD PTR _pNewData$[ebp]
  000ab	50		 push	 eax
  000ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
$LN5@Reallocate:

; 887  : 	}

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::Reallocate
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File e:\cz\vs\dvicectrldlg_new_signal_1\serialport.cpp
;	COMDAT ??__E_SerialPortData@@YAXXZ
text$yc	SEGMENT
??__E_SerialPortData@@YAXXZ PROC			; `dynamic initializer for '_SerialPortData'', COMDAT

; 113  : _SERIAL_PORT_DATA _SerialPortData;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?_SerialPortData@@3V_SERIAL_PORT_DATA@@A ; _SerialPortData
  00023	e8 00 00 00 00	 call	 ??0_SERIAL_PORT_DATA@@QAE@XZ ; _SERIAL_PORT_DATA::_SERIAL_PORT_DATA
  00028	68 00 00 00 00	 push	 OFFSET ??__F_SerialPortData@@YAXXZ ; `dynamic atexit destructor for '_SerialPortData''
  0002d	e8 00 00 00 00	 call	 _atexit
  00032	83 c4 04	 add	 esp, 4
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
??__E_SerialPortData@@YAXXZ ENDP			; `dynamic initializer for '_SerialPortData''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??__F_SerialPortData@@YAXXZ
text$yd	SEGMENT
??__F_SerialPortData@@YAXXZ PROC			; `dynamic atexit destructor for '_SerialPortData'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?_SerialPortData@@3V_SERIAL_PORT_DATA@@A ; _SerialPortData
  00023	e8 00 00 00 00	 call	 ??1_SERIAL_PORT_DATA@@QAE@XZ ; _SERIAL_PORT_DATA::~_SERIAL_PORT_DATA
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__F_SerialPortData@@YAXXZ ENDP			; `dynamic atexit destructor for '_SerialPortData''
text$yd	ENDS
PUBLIC	?_SerialPortData@@3V_SERIAL_PORT_DATA@@A	; _SerialPortData
_BSS	SEGMENT
?_SerialPortData@@3V_SERIAL_PORT_DATA@@A DQ 01H DUP (?)	; _SerialPortData
_BSS	ENDS
CRT$XCU	SEGMENT
__SerialPortData$initializer$ DD FLAT:??__E_SerialPortData@@YAXXZ
CRT$XCU	ENDS
END
